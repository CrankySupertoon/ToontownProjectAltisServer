1494874279
3 2
10 libp3putil 4 xqRv 12 panda3d.core 
892
913 5 clear 0 4 1807 56 PointerToBase< ReferenceCountedVector< ushort > >::clear 0 1 13 0
75
inline void PointerToBase< ReferenceCountedVector< ushort > >::clear(void);

914 6 output 0 4 1807 57 PointerToBase< ReferenceCountedVector< ushort > >::output 0 1 14 0
83
void PointerToBase< ReferenceCountedVector< ushort > >::output(ostream &out) const;

915 19 ~PointerToArrayBase 0 4 1806 49 PointerToArrayBase< ushort >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< ushort >::~PointerToArrayBase(void);

916 19 ConstPointerToArray 0 4 1805 50 ConstPointerToArray< ushort >::ConstPointerToArray 0 3 1 2 3 0
284
inline ConstPointerToArray< ushort >::ConstPointerToArray(PointerToArray< ushort > const &copy);
inline ConstPointerToArray< ushort >::ConstPointerToArray(ConstPointerToArray< ushort > const &copy);
ConstPointerToArray< ushort >::ConstPointerToArray(PyObject *self, PyObject *source);

917 4 size 0 4 1805 35 ConstPointerToArray< ushort >::size 0 1 4 0
73
inline unsigned long int ConstPointerToArray< ushort >::size(void) const;

918 11 get_element 0 4 1805 42 ConstPointerToArray< ushort >::get_element 0 1 5 0
91
inline ushort const &ConstPointerToArray< ushort >::get_element(unsigned long int n) const;

919 11 __getitem__ 0 4 1805 42 ConstPointerToArray< ushort >::__getitem__ 0 1 6 0
84
ushort const &ConstPointerToArray< ushort >::__getitem__(unsigned long int n) const;

920 8 get_data 0 4 1805 39 ConstPointerToArray< ushort >::get_data 0 1 7 0
85
inline std::basic_string< char > ConstPointerToArray< ushort >::get_data(void) const;

921 11 get_subdata 0 4 1805 42 ConstPointerToArray< ushort >::get_subdata 0 1 8 0
128
inline std::basic_string< char > ConstPointerToArray< ushort >::get_subdata(unsigned long int n, unsigned long int count) const;

922 13 get_ref_count 0 4 1805 44 ConstPointerToArray< ushort >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< ushort >::get_ref_count(void) const;

923 18 get_node_ref_count 0 4 1805 49 ConstPointerToArray< ushort >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< ushort >::get_node_ref_count(void) const;

924 13 __getbuffer__ 0 4 1805 44 ConstPointerToArray< ushort >::__getbuffer__ 0 1 11 0
99
int ConstPointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

925 17 __releasebuffer__ 0 4 1805 48 ConstPointerToArray< ushort >::__releasebuffer__ 0 1 12 0
93
void ConstPointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

926 20 ~ConstPointerToArray 0 4 1805 51 ConstPointerToArray< ushort >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< ushort >::~ConstPointerToArray(void);

927 14 PointerToArray 0 4 1809 40 PointerToArray< ushort >::PointerToArray 0 3 15 16 17 0
279
inline PointerToArray< ushort >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));
inline PointerToArray< ushort >::PointerToArray(PointerToArray< ushort > const &copy);
PointerToArray< ushort >::PointerToArray(PyObject *self, PyObject *source);

928 11 empty_array 0 4 1809 37 PointerToArray< ushort >::empty_array 0 1 18 0
166
static inline PointerToArray< ushort > PointerToArray< ushort >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));

929 4 size 0 4 1809 30 PointerToArray< ushort >::size 0 1 19 0
68
inline unsigned long int PointerToArray< ushort >::size(void) const;

930 9 push_back 0 4 1809 35 PointerToArray< ushort >::push_back 0 1 20 0
65
inline void PointerToArray< ushort >::push_back(ushort const &x);

931 8 pop_back 0 4 1809 34 PointerToArray< ushort >::pop_back 0 1 21 0
53
inline void PointerToArray< ushort >::pop_back(void);

932 11 get_element 0 4 1809 37 PointerToArray< ushort >::get_element 0 1 22 0
86
inline ushort const &PointerToArray< ushort >::get_element(unsigned long int n) const;

933 11 set_element 0 4 1809 37 PointerToArray< ushort >::set_element 0 1 23 0
92
inline void PointerToArray< ushort >::set_element(unsigned long int n, ushort const &value);

934 11 __getitem__ 0 4 1809 37 PointerToArray< ushort >::__getitem__ 0 1 24 0
79
ushort const &PointerToArray< ushort >::__getitem__(unsigned long int n) const;

935 11 __setitem__ 0 4 1809 37 PointerToArray< ushort >::__setitem__ 0 1 25 0
85
void PointerToArray< ushort >::__setitem__(unsigned long int n, ushort const &value);

936 8 get_data 0 4 1809 34 PointerToArray< ushort >::get_data 0 1 26 0
80
inline std::basic_string< char > PointerToArray< ushort >::get_data(void) const;

937 8 set_data 0 4 1809 34 PointerToArray< ushort >::set_data 0 1 27 0
86
inline void PointerToArray< ushort >::set_data(std::basic_string< char > const &data);

938 11 get_subdata 0 4 1809 37 PointerToArray< ushort >::get_subdata 0 1 28 0
123
inline std::basic_string< char > PointerToArray< ushort >::get_subdata(unsigned long int n, unsigned long int count) const;

939 11 set_subdata 0 4 1809 37 PointerToArray< ushort >::set_subdata 0 1 29 0
135
inline void PointerToArray< ushort >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

940 13 get_ref_count 0 4 1809 39 PointerToArray< ushort >::get_ref_count 0 1 30 0
63
inline int PointerToArray< ushort >::get_ref_count(void) const;

941 18 get_node_ref_count 0 4 1809 44 PointerToArray< ushort >::get_node_ref_count 0 1 31 0
68
inline int PointerToArray< ushort >::get_node_ref_count(void) const;

942 13 __getbuffer__ 0 4 1809 39 PointerToArray< ushort >::__getbuffer__ 0 1 32 0
88
int PointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

943 17 __releasebuffer__ 0 4 1809 43 PointerToArray< ushort >::__releasebuffer__ 0 1 33 0
88
void PointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

944 15 ~PointerToArray 0 4 1809 41 PointerToArray< ushort >::~PointerToArray 0 0 0
48
PointerToArray< ushort >::~PointerToArray(void);

945 14 ~AnimInterface 0 6 1810 29 AnimInterface::~AnimInterface 0 0 10
/**
 *
 */
44
virtual AnimInterface::~AnimInterface(void);

946 4 play 0 4 1810 19 AnimInterface::play 0 2 34 35 477
/**
 * Runs the entire animation from beginning to end and stops.
 */

/**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

947 4 loop 0 4 1810 19 AnimInterface::loop 0 2 36 37 392
/**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

948 8 pingpong 0 4 1810 23 AnimInterface::pingpong 0 2 38 39 369
/**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

949 4 stop 0 4 1810 19 AnimInterface::stop 0 1 40 130
/**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */
38
inline void AnimInterface::stop(void);

950 4 pose 0 4 1810 19 AnimInterface::pose 0 1 41 72
/**
 * Sets the animation to the indicated frame and holds it there.
 */
46
inline void AnimInterface::pose(double frame);

951 13 set_play_rate 0 4 1810 28 AnimInterface::set_play_rate 0 1 42 243
/**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */
59
inline void AnimInterface::set_play_rate(double play_rate);

952 13 get_play_rate 0 4 1810 28 AnimInterface::get_play_rate 0 1 43 79
/**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */
55
inline double AnimInterface::get_play_rate(void) const;

953 14 get_frame_rate 0 4 1810 29 AnimInterface::get_frame_rate 0 1 44 234
/**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */
56
inline double AnimInterface::get_frame_rate(void) const;

954 14 get_num_frames 0 6 1810 29 AnimInterface::get_num_frames 0 1 45 278
/**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */
54
virtual int AnimInterface::get_num_frames(void) const;

955 9 get_frame 0 4 1810 24 AnimInterface::get_frame 0 1 46 116
/**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */
48
inline int AnimInterface::get_frame(void) const;

956 14 get_next_frame 0 4 1810 29 AnimInterface::get_next_frame 0 1 47 330
/**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */
53
inline int AnimInterface::get_next_frame(void) const;

957 8 get_frac 0 4 1810 23 AnimInterface::get_frac 0 1 48 314
/**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */
50
inline double AnimInterface::get_frac(void) const;

958 14 get_full_frame 0 4 1810 29 AnimInterface::get_full_frame 0 1 49 372
/**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */
53
inline int AnimInterface::get_full_frame(void) const;

959 15 get_full_fframe 0 4 1810 30 AnimInterface::get_full_fframe 0 1 50 490
/**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */
57
inline double AnimInterface::get_full_fframe(void) const;

960 10 is_playing 0 4 1810 25 AnimInterface::is_playing 0 1 51 208
/**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */
50
inline bool AnimInterface::is_playing(void) const;

961 6 output 0 6 1810 21 AnimInterface::output 0 1 52 10
/**
 *
 */
55
virtual void AnimInterface::output(ostream &out) const;

962 14 get_class_type 0 4 1810 29 AnimInterface::get_class_type 0 1 53 0
54
static TypeHandle AnimInterface::get_class_type(void);

963 9 UpdateSeq 0 4 1815 20 UpdateSeq::UpdateSeq 0 2 54 55 132
/**
 * Creates an UpdateSeq in the given state.
 */

/**
 * Creates an UpdateSeq in the 'initial' state.
 */

/**
 *
 */

/**
 *
 */
89
constexpr UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

964 7 initial 0 4 1815 18 UpdateSeq::initial 0 1 56 55
/**
 * Returns an UpdateSeq in the 'initial' state.
 */
52
static constexpr UpdateSeq UpdateSeq::initial(void);

965 3 old 0 4 1815 14 UpdateSeq::old 0 1 57 51
/**
 * Returns an UpdateSeq in the 'old' state.
 */
48
static constexpr UpdateSeq UpdateSeq::old(void);

966 5 fresh 0 4 1815 16 UpdateSeq::fresh 0 1 58 53
/**
 * Returns an UpdateSeq in the 'fresh' state.
 */
50
static constexpr UpdateSeq UpdateSeq::fresh(void);

967 10 operator = 0 4 1815 21 UpdateSeq::operator = 0 1 59 10
/**
 *
 */
63
inline UpdateSeq &UpdateSeq::operator =(UpdateSeq const &copy);

968 5 clear 0 4 1815 16 UpdateSeq::clear 0 1 60 55
/**
 * Resets the UpdateSeq to the 'initial' state.
 */
35
inline void UpdateSeq::clear(void);

969 10 is_initial 0 4 1815 21 UpdateSeq::is_initial 0 1 61 67
/**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */
46
inline bool UpdateSeq::is_initial(void) const;

970 6 is_old 0 4 1815 17 UpdateSeq::is_old 0 1 62 63
/**
 * Returns true if the UpdateSeq is in the 'old' state.
 */
42
inline bool UpdateSeq::is_old(void) const;

971 8 is_fresh 0 4 1815 19 UpdateSeq::is_fresh 0 1 63 65
/**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */
44
inline bool UpdateSeq::is_fresh(void) const;

972 10 is_special 0 4 1815 21 UpdateSeq::is_special 0 1 64 105
/**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */
46
inline bool UpdateSeq::is_special(void) const;

973 11 operator == 0 4 1815 22 UpdateSeq::operator == 0 1 65 0
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

974 11 operator != 0 4 1815 22 UpdateSeq::operator != 0 1 66 0
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

975 10 operator < 0 4 1815 21 UpdateSeq::operator < 0 1 67 0
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

976 11 operator <= 0 4 1815 22 UpdateSeq::operator <= 0 1 68 0
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

977 10 operator > 0 4 1815 21 UpdateSeq::operator > 0 1 69 0
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

978 11 operator >= 0 4 1815 22 UpdateSeq::operator >= 0 1 70 0
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

979 11 operator ++ 0 68 1815 22 UpdateSeq::operator ++ 0 1 71 0
46
inline UpdateSeq UpdateSeq::operator ++(void);

980 11 operator ++ 0 4 1815 22 UpdateSeq::operator ++ 0 1 72 0
46
inline UpdateSeq UpdateSeq::operator ++(int );

981 7 get_seq 0 4 1815 18 UpdateSeq::get_seq 0 1 73 107
/**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */
60
inline AtomicAdjust::Integer UpdateSeq::get_seq(void) const;

982 6 output 0 4 1815 17 UpdateSeq::output 0 1 74 10
/**
 *
 */
50
inline void UpdateSeq::output(ostream &out) const;

983 10 ~UpdateSeq 0 4 1815 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

984 6 fillin 0 6 1819 21 TypedWritable::fillin 0 1 75 308
/**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */
79
virtual void TypedWritable::fillin(DatagramIterator &scan, BamReader *manager);

985 17 mark_bam_modified 0 4 1819 32 TypedWritable::mark_bam_modified 0 1 76 345
/**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */
51
inline void TypedWritable::mark_bam_modified(void);

986 16 get_bam_modified 0 4 1819 31 TypedWritable::get_bam_modified 0 1 77 140
/**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

987 10 __reduce__ 0 4 1819 25 TypedWritable::__reduce__ 0 1 78 0
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

988 18 __reduce_persist__ 0 4 1819 33 TypedWritable::__reduce_persist__ 0 1 79 0
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

989 20 encode_to_bam_stream 0 4 1819 35 TypedWritable::encode_to_bam_stream 0 1 80 846
/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a string string.  Returns empty string
 * on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */

/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and stores that data in the indicated string.  Returns true on
 * success, false on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */
160
inline std::string TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(std::string &data, BamWriter *writer = NULL) const;

990 26 decode_raw_from_bam_stream 0 4 1819 41 TypedWritable::decode_raw_from_bam_stream 0 0 957
/**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts the single object on that string.  Returns true on success, false
 * on on error.
 *
 * This variant sets the TypedWritable and ReferenceCount pointers separately;
 * both are pointers to the same object.  The reference count is not
 * incremented; it is the caller's responsibility to manage the reference
 * count.
 *
 * Note that this method cannot be used to retrieve objects that do not
 * inherit from ReferenceCount, because these objects cannot persist beyond
 * the lifetime of the BamReader that reads them.  To retrieve these objects
 * from a bam stream, you must construct a BamReader directly.
 *
 * If you happen to know that the particular object in question inherits from
 * TypedWritableReferenceCount or PandaNode, consider calling the variant of
 * decode_from_bam_stream() defined for those methods, which presents a
 * simpler interface.
 */
152
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, std::string const &data, BamReader *reader = NULL);

991 14 get_class_type 0 4 1819 29 TypedWritable::get_class_type 0 1 81 0
54
static TypeHandle TypedWritable::get_class_type(void);

992 23 upcast_to_TypedWritable 0 12 1821 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 84 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

993 39 downcast_to_TypedWritableReferenceCount 0 12 1819 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 1 85 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

994 24 upcast_to_ReferenceCount 0 12 1821 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 86 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

995 39 downcast_to_TypedWritableReferenceCount 0 12 1822 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 1 87 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

996 22 decode_from_bam_stream 0 4 1821 51 TypedWritableReferenceCount::decode_from_bam_stream 0 1 82 492
/**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on that string.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */
151
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(std::string const &data, BamReader *reader = NULL);

997 14 get_class_type 0 4 1821 43 TypedWritableReferenceCount::get_class_type 0 1 83 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

998 28 ~TypedWritableReferenceCount 0 4 1821 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

999 37 upcast_to_TypedWritableReferenceCount 0 12 1823 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 110 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1000 26 downcast_to_BamCacheRecord 0 12 1821 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 1 111 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1001 24 upcast_to_LinkedListNode 0 12 1823 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1002 26 downcast_to_BamCacheRecord 0 12 1824 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1003 15 ~BamCacheRecord 0 6 1823 31 BamCacheRecord::~BamCacheRecord 0 0 10
/**
 *
 */
46
virtual BamCacheRecord::~BamCacheRecord(void);

1004 9 make_copy 0 4 1823 25 BamCacheRecord::make_copy 0 1 88 179
/**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1005 11 operator == 0 4 1823 27 BamCacheRecord::operator == 0 1 89 0
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1006 19 get_source_pathname 0 4 1823 35 BamCacheRecord::get_source_pathname 0 1 90 237
/**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1007 18 get_cache_filename 0 4 1823 34 BamCacheRecord::get_cache_filename 0 1 91 230
/**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1008 20 get_source_timestamp 0 4 1823 36 BamCacheRecord::get_source_timestamp 0 1 92 204
/**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */
63
inline time_t BamCacheRecord::get_source_timestamp(void) const;

1009 17 get_recorded_time 0 4 1823 33 BamCacheRecord::get_recorded_time 0 1 93 84
/**
 * Returns the time at which this particular record was recorded or updated.
 */
60
inline time_t BamCacheRecord::get_recorded_time(void) const;

1010 23 get_num_dependent_files 0 4 1823 39 BamCacheRecord::get_num_dependent_files 0 1 94 75
/**
 * Returns the number of source files that contribute to the cache.
 */
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1011 22 get_dependent_pathname 0 4 1823 38 BamCacheRecord::get_dependent_pathname 0 1 95 94
/**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1012 20 dependents_unchanged 0 4 1823 36 BamCacheRecord::dependents_unchanged 0 1 96 124
/**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */
54
bool BamCacheRecord::dependents_unchanged(void) const;

1013 21 clear_dependent_files 0 4 1823 37 BamCacheRecord::clear_dependent_files 0 1 97 80
/**
 * Empties the list of files that contribute to the data in this record.
 */
49
void BamCacheRecord::clear_dependent_files(void);

1014 18 add_dependent_file 0 4 1823 34 BamCacheRecord::add_dependent_file 0 2 98 99 309
/**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */

/**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */
132
void BamCacheRecord::add_dependent_file(Filename const &pathname);
void BamCacheRecord::add_dependent_file(VirtualFile const *file);

1015 8 has_data 0 4 1823 24 BamCacheRecord::has_data 0 1 100 130
/**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */
49
inline bool BamCacheRecord::has_data(void) const;

1016 10 clear_data 0 4 1823 26 BamCacheRecord::clear_data 0 1 101 147
/**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */
45
inline void BamCacheRecord::clear_data(void);

1017 8 get_data 0 4 1823 24 BamCacheRecord::get_data 0 1 102 139
/**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1018 12 extract_data 0 4 1823 28 BamCacheRecord::extract_data 0 0 416
/**
 * Fills ptr and ref_ptr with the two different-typed pointers to the same
 * object, the data stored within this record.  This transfers ownership of
 * the data pointer; the caller will be responsible for managing the reference
 * counts on this object subsequently.
 *
 * Returns true if the record contained any data (and the pointers have been
 * filled), false if it didn't (and the pointers are NULL).
 */
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1019 8 set_data 0 4 1823 24 BamCacheRecord::set_data 0 4 103 104 105 106 916
/**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */

/**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */
281
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr);
inline void BamCacheRecord::set_data(TypedWritableReferenceCount *ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1020 6 output 0 4 1823 22 BamCacheRecord::output 0 1 107 10
/**
 *
 */
48
void BamCacheRecord::output(ostream &out) const;

1021 5 write 0 4 1823 21 BamCacheRecord::write 0 1 108 10
/**
 *
 */
69
void BamCacheRecord::write(ostream &out, int indent_level = 0) const;

1022 14 get_class_type 0 4 1823 30 BamCacheRecord::get_class_type 0 1 109 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1023 8 BamCache 0 4 1829 18 BamCache::BamCache 0 1 112 10
/**
 *
 */
25
BamCache::BamCache(void);

1024 9 ~BamCache 0 4 1829 19 BamCache::~BamCache 0 0 10
/**
 *
 */
26
BamCache::~BamCache(void);

1025 10 set_active 0 4 1829 20 BamCache::set_active 0 1 113 347
/**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
44
inline void BamCache::set_active(bool flag);

1026 10 get_active 0 4 1829 20 BamCache::get_active 0 1 114 381
/**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
45
inline bool BamCache::get_active(void) const;

1027 16 set_cache_models 0 4 1829 26 BamCache::set_cache_models 0 1 115 118
/**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */
50
inline void BamCache::set_cache_models(bool flag);

1028 16 get_cache_models 0 4 1829 26 BamCache::get_cache_models 0 1 116 172
/**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */
51
inline bool BamCache::get_cache_models(void) const;

1029 18 set_cache_textures 0 4 1829 28 BamCache::set_cache_textures 0 1 117 101
/**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */
52
inline void BamCache::set_cache_textures(bool flag);

1030 18 get_cache_textures 0 4 1829 28 BamCache::get_cache_textures 0 1 118 174
/**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */
53
inline bool BamCache::get_cache_textures(void) const;

1031 29 set_cache_compressed_textures 0 4 1829 39 BamCache::set_cache_compressed_textures 0 1 119 722
/**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1032 29 get_cache_compressed_textures 0 4 1829 39 BamCache::get_cache_compressed_textures 0 1 120 202
/**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1033 26 set_cache_compiled_shaders 0 4 1829 36 BamCache::set_cache_compiled_shaders 0 1 121 184
/**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */
60
inline void BamCache::set_cache_compiled_shaders(bool flag);

1034 26 get_cache_compiled_shaders 0 4 1829 36 BamCache::get_cache_compiled_shaders 0 1 122 196
/**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */
61
inline bool BamCache::get_cache_compiled_shaders(void) const;

1035 8 set_root 0 4 1829 18 BamCache::set_root 0 1 123 372
/**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */
46
void BamCache::set_root(Filename const &root);

1036 8 get_root 0 4 1829 18 BamCache::get_root 0 1 124 75
/**
 * Returns the current root pathname of the cache.  See set_root().
 */
47
inline Filename BamCache::get_root(void) const;

1037 14 set_flush_time 0 4 1829 24 BamCache::set_flush_time 0 1 125 86
/**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */
53
inline void BamCache::set_flush_time(int flush_time);

1038 14 get_flush_time 0 4 1829 24 BamCache::get_flush_time 0 1 126 84
/**
 * Returns the time in seconds between automatic flushes of the cache index.
 */
48
inline int BamCache::get_flush_time(void) const;

1039 20 set_cache_max_kbytes 0 4 1829 30 BamCache::set_cache_max_kbytes 0 1 127 430
/**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1040 20 get_cache_max_kbytes 0 4 1829 30 BamCache::get_cache_max_kbytes 0 1 128 121
/**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */
54
inline int BamCache::get_cache_max_kbytes(void) const;

1041 13 set_read_only 0 4 1829 23 BamCache::set_read_only 0 1 129 252
/**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */
45
inline void BamCache::set_read_only(bool ro);

1042 13 get_read_only 0 4 1829 23 BamCache::get_read_only 0 1 130 230
/**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */
48
inline bool BamCache::get_read_only(void) const;

1043 6 lookup 0 4 1829 16 BamCache::lookup 0 1 131 782
/**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */
114
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, std::string const &cache_extension);

1044 5 store 0 4 1829 15 BamCache::store 0 1 132 212
/**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */
45
bool BamCache::store(BamCacheRecord *record);

1045 20 consider_flush_index 0 4 1829 30 BamCache::consider_flush_index 0 1 133 92
/**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */
42
void BamCache::consider_flush_index(void);

1046 11 flush_index 0 4 1829 21 BamCache::flush_index 0 1 134 48
/**
 * Ensures the index is written to disk.
 */
33
void BamCache::flush_index(void);

1047 10 list_index 0 4 1829 20 BamCache::list_index 0 1 135 63
/**
 * Writes the contents of the index to standard output.
 */
68
void BamCache::list_index(ostream &out, int indent_level = 0) const;

1048 14 get_global_ptr 0 4 1829 24 BamCache::get_global_ptr 0 1 136 124
/**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */
55
static inline BamCache *BamCache::get_global_ptr(void);

1049 27 consider_flush_global_index 0 4 1829 37 BamCache::consider_flush_global_index 0 1 137 84
/**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */
63
static inline void BamCache::consider_flush_global_index(void);

1050 18 flush_global_index 0 4 1829 28 BamCache::flush_global_index 0 1 138 75
/**
 * If there is a global BamCache object, calls flush_index() on it.
 */
54
static inline void BamCache::flush_global_index(void);

1051 8 BamEnums 0 4 1830 18 BamEnums::BamEnums 0 2 139 140 0
97
inline BamEnums::BamEnums(void) = default;
inline BamEnums::BamEnums(BamEnums const &) = default;

1052 9 ~BamEnums 0 4 1830 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1053 13 LoaderOptions 0 4 1834 28 LoaderOptions::LoaderOptions 0 3 141 142 143 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
238
LoaderOptions::LoaderOptions(int flags = (::LoaderOptions::LF_search | ::LoaderOptions::LF_report_errors));
inline LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &copy);

1054 10 operator = 0 4 1834 25 LoaderOptions::operator = 0 1 144 0
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

1055 9 set_flags 0 4 1834 24 LoaderOptions::set_flags 0 1 145 10
/**
 *
 */
48
inline void LoaderOptions::set_flags(int flags);

1056 9 get_flags 0 4 1834 24 LoaderOptions::get_flags 0 1 146 10
/**
 *
 */
48
inline int LoaderOptions::get_flags(void) const;

1057 17 set_texture_flags 0 4 1834 32 LoaderOptions::set_texture_flags 0 1 147 10
/**
 *
 */
56
inline void LoaderOptions::set_texture_flags(int flags);

1058 17 get_texture_flags 0 4 1834 32 LoaderOptions::get_texture_flags 0 1 148 10
/**
 *
 */
56
inline int LoaderOptions::get_texture_flags(void) const;

1059 21 set_texture_num_views 0 4 1834 36 LoaderOptions::set_texture_num_views 0 1 149 459
/**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1060 21 get_texture_num_views 0 4 1834 36 LoaderOptions::get_texture_num_views 0 1 150 39
/**
 * See set_texture_num_views().
 */
60
inline int LoaderOptions::get_texture_num_views(void) const;

1061 22 set_auto_texture_scale 0 4 1834 37 LoaderOptions::set_auto_texture_scale 0 1 151 209
/**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1062 22 get_auto_texture_scale 0 4 1834 37 LoaderOptions::get_auto_texture_scale 0 1 152 40
/**
 * See set_auto_texture_scale().
 */
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1063 6 output 0 4 1834 21 LoaderOptions::output 0 1 153 10
/**
 *
 */
47
void LoaderOptions::output(ostream &out) const;

1064 14 ~LoaderOptions 0 4 1834 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1065 9 BamReader 0 4 1837 20 BamReader::BamReader 0 1 154 50
// The primary interface for a caller.

/**
 *
 */
55
BamReader::BamReader(DatagramGenerator *source = NULL);

1066 10 ~BamReader 0 4 1837 21 BamReader::~BamReader 0 0 10
/**
 *
 */
28
BamReader::~BamReader(void);

1067 10 set_source 0 4 1837 21 BamReader::set_source 0 1 155 142
/**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */
54
void BamReader::set_source(DatagramGenerator *source);

1068 10 get_source 0 4 1837 21 BamReader::get_source 0 1 156 100
/**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */
54
inline DatagramGenerator *BamReader::get_source(void);

1069 4 init 0 4 1837 15 BamReader::init 0 1 157 210
/**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */
27
bool BamReader::init(void);

1070 12 set_aux_data 0 4 1837 23 BamReader::set_aux_data 0 1 158 1007
/**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */
100
void BamReader::set_aux_data(TypedWritable *obj, std::string const &name, BamReader::AuxData *data);

1071 12 get_aux_data 0 4 1837 23 BamReader::get_aux_data 0 1 159 173
/**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */
95
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, std::string const &name) const;

1072 12 get_filename 0 4 1837 23 BamReader::get_filename 0 1 160 199
/**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */
59
inline Filename const &BamReader::get_filename(void) const;

1073 18 get_loader_options 0 4 1837 29 BamReader::get_loader_options 0 1 161 98
/**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1074 18 set_loader_options 0 4 1837 29 BamReader::set_loader_options 0 1 162 58
/**
 * Specifies the LoaderOptions for this BamReader.
 */
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1075 11 read_object 0 4 1837 22 BamReader::read_object 0 1 163 1393
/**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */

/**
 * Reads a single object from the Bam file.
 *
 * This flavor of read_object() returns both a TypedWritable and a
 * ReferenceCount pointer to the same object, so the reference count may be
 * tracked reliably, without having to know precisely what type of object we
 * have.
 * @return true on success, or false on failure.
 */
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1076 6 is_eof 0 4 1837 17 BamReader::is_eof 0 1 164 138
/**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */
42
inline bool BamReader::is_eof(void) const;

1077 7 resolve 0 4 1837 18 BamReader::resolve 0 1 165 565
/**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */
30
bool BamReader::resolve(void);

1078 14 change_pointer 0 4 1837 25 BamReader::change_pointer 0 1 166 406
/**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1079 18 get_file_major_ver 0 4 1837 29 BamReader::get_file_major_ver 0 1 167 81
/**
 * Returns the major version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_major_ver(void) const;

1080 18 get_file_minor_ver 0 4 1837 29 BamReader::get_file_minor_ver 0 1 168 81
/**
 * Returns the minor version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_minor_ver(void) const;

1081 15 get_file_endian 0 4 1837 26 BamReader::get_file_endian 0 1 169 254
/**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1082 24 get_file_stdfloat_double 0 4 1837 35 BamReader::get_file_stdfloat_double 0 1 170 220
/**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1083 21 get_current_major_ver 0 4 1837 32 BamReader::get_current_major_ver 0 1 171 174
/**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */
56
inline int BamReader::get_current_major_ver(void) const;

1084 21 get_current_minor_ver 0 4 1837 32 BamReader::get_current_minor_ver 0 1 172 184
/**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */
56
inline int BamReader::get_current_minor_ver(void) const;

1085 16 get_file_version 0 4 1837 27 BamReader::get_file_version 0 1 173 0
50
PyObject *BamReader::get_file_version(void) const;

1086 16 register_factory 0 4 1837 27 BamReader::register_factory 0 1 174 208
/**
 * Registers a factory function that is called when an object of the given
 * type is encountered within the .bam stream.
 *
 * @param user_data an optional pointer to be passed along to the function.
 */
75
static void BamReader::register_factory(TypeHandle handle, PyObject *func);

1087 9 BamWriter 0 4 1844 20 BamWriter::BamWriter 0 2 175 176 10
/**
 *
 */
108
BamWriter::BamWriter(DatagramSink *target = NULL);
inline BamWriter::BamWriter(BamWriter const &) = default;

1088 10 ~BamWriter 0 4 1844 21 BamWriter::~BamWriter 0 0 10
/**
 *
 */
28
BamWriter::~BamWriter(void);

1089 10 set_target 0 4 1844 21 BamWriter::set_target 0 1 177 153
/**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */
49
void BamWriter::set_target(DatagramSink *target);

1090 10 get_target 0 4 1844 21 BamWriter::get_target 0 1 178 100
/**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */
49
inline DatagramSink *BamWriter::get_target(void);

1091 4 init 0 4 1844 15 BamWriter::init 0 1 179 220
/**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */
27
bool BamWriter::init(void);

1092 12 get_filename 0 4 1844 23 BamWriter::get_filename 0 1 180 197
/**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */
59
inline Filename const &BamWriter::get_filename(void) const;

1093 12 write_object 0 4 1844 23 BamWriter::write_object 0 1 181 736
/**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */
55
bool BamWriter::write_object(TypedWritable const *obj);

1094 10 has_object 0 4 1844 21 BamWriter::has_object 0 1 182 170
/**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1095 5 flush 0 4 1844 16 BamWriter::flush 0 1 183 85
/**
 * Ensures that all data written thus far is manifested on the output stream.
 */
28
void BamWriter::flush(void);

1096 18 get_file_major_ver 0 4 1844 29 BamWriter::get_file_major_ver 0 1 184 84
/**
 * Returns the major version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_major_ver(void) const;

1097 18 get_file_minor_ver 0 4 1844 29 BamWriter::get_file_minor_ver 0 1 185 84
/**
 * Returns the minor version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_minor_ver(void) const;

1098 18 set_file_minor_ver 0 4 1844 29 BamWriter::set_file_minor_ver 0 1 186 232
/**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */
57
inline void BamWriter::set_file_minor_ver(int minor_ver);

1099 15 get_file_endian 0 4 1844 26 BamWriter::get_file_endian 0 1 187 257
/**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1100 24 get_file_stdfloat_double 0 4 1844 35 BamWriter::get_file_stdfloat_double 0 1 188 248
/**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1101 21 get_file_texture_mode 0 4 1844 32 BamWriter::get_file_texture_mode 0 1 189 196
/**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1102 21 set_file_texture_mode 0 4 1844 32 BamWriter::set_file_texture_mode 0 1 190 187
/**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1103 13 get_root_node 0 4 1844 24 BamWriter::get_root_node 0 1 191 165
/**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */
59
inline TypedWritable *BamWriter::get_root_node(void) const;

1104 13 set_root_node 0 4 1844 24 BamWriter::set_root_node 0 1 192 160
/**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */
63
inline void BamWriter::set_root_node(TypedWritable *root_node);

1105 7 BitMask 0 4 1847 32 BitMask< uint16_t, 16 >::BitMask 0 3 193 194 195 0
192
inline BitMask< uint16_t, 16 >::BitMask(void);
inline BitMask< uint16_t, 16 >::BitMask(uint16_t init_value);
inline BitMask< uint16_t, 16 >::BitMask(BitMask< uint16_t, 16 > const &) = default;

1106 6 all_on 0 4 1847 31 BitMask< uint16_t, 16 >::all_on 0 1 196 0
76
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_on(void);

1107 7 all_off 0 4 1847 32 BitMask< uint16_t, 16 >::all_off 0 1 197 0
77
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_off(void);

1108 8 lower_on 0 4 1847 33 BitMask< uint16_t, 16 >::lower_on 0 1 198 0
85
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::lower_on(int on_bits);

1109 3 bit 0 4 1847 28 BitMask< uint16_t, 16 >::bit 0 1 199 0
78
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::bit(int index);

1110 5 range 0 4 1847 30 BitMask< uint16_t, 16 >::range 0 1 200 0
92
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::range(int low_bit, int size);

1111 16 has_max_num_bits 0 4 1847 41 BitMask< uint16_t, 16 >::has_max_num_bits 0 1 201 0
70
static constexpr bool BitMask< uint16_t, 16 >::has_max_num_bits(void);

1112 16 get_max_num_bits 0 4 1847 41 BitMask< uint16_t, 16 >::get_max_num_bits 0 1 202 0
69
static constexpr int BitMask< uint16_t, 16 >::get_max_num_bits(void);

1113 12 get_num_bits 0 4 1847 37 BitMask< uint16_t, 16 >::get_num_bits 0 1 203 0
65
static constexpr int BitMask< uint16_t, 16 >::get_num_bits(void);

1114 7 get_bit 0 4 1847 32 BitMask< uint16_t, 16 >::get_bit 0 1 204 0
62
inline bool BitMask< uint16_t, 16 >::get_bit(int index) const;

1115 7 set_bit 0 4 1847 32 BitMask< uint16_t, 16 >::set_bit 0 1 205 0
56
inline void BitMask< uint16_t, 16 >::set_bit(int index);

1116 9 clear_bit 0 4 1847 34 BitMask< uint16_t, 16 >::clear_bit 0 1 206 0
58
inline void BitMask< uint16_t, 16 >::clear_bit(int index);

1117 10 set_bit_to 0 4 1847 35 BitMask< uint16_t, 16 >::set_bit_to 0 1 207 0
71
inline void BitMask< uint16_t, 16 >::set_bit_to(int index, bool value);

1118 7 is_zero 0 4 1847 32 BitMask< uint16_t, 16 >::is_zero 0 1 208 0
57
inline bool BitMask< uint16_t, 16 >::is_zero(void) const;

1119 9 is_all_on 0 4 1847 34 BitMask< uint16_t, 16 >::is_all_on 0 1 209 0
59
inline bool BitMask< uint16_t, 16 >::is_all_on(void) const;

1120 7 extract 0 4 1847 32 BitMask< uint16_t, 16 >::extract 0 1 210 0
78
inline uint16_t BitMask< uint16_t, 16 >::extract(int low_bit, int size) const;

1121 5 store 0 4 1847 30 BitMask< uint16_t, 16 >::store 0 1 211 0
82
inline void BitMask< uint16_t, 16 >::store(uint16_t value, int low_bit, int size);

1122 10 has_any_of 0 4 1847 35 BitMask< uint16_t, 16 >::has_any_of 0 1 212 0
77
inline bool BitMask< uint16_t, 16 >::has_any_of(int low_bit, int size) const;

1123 10 has_all_of 0 4 1847 35 BitMask< uint16_t, 16 >::has_all_of 0 1 213 0
77
inline bool BitMask< uint16_t, 16 >::has_all_of(int low_bit, int size) const;

1124 9 set_range 0 4 1847 34 BitMask< uint16_t, 16 >::set_range 0 1 214 0
70
inline void BitMask< uint16_t, 16 >::set_range(int low_bit, int size);

1125 11 clear_range 0 4 1847 36 BitMask< uint16_t, 16 >::clear_range 0 1 215 0
72
inline void BitMask< uint16_t, 16 >::clear_range(int low_bit, int size);

1126 12 set_range_to 0 4 1847 37 BitMask< uint16_t, 16 >::set_range_to 0 1 216 0
85
inline void BitMask< uint16_t, 16 >::set_range_to(bool value, int low_bit, int size);

1127 8 get_word 0 4 1847 33 BitMask< uint16_t, 16 >::get_word 0 1 217 0
62
inline uint16_t BitMask< uint16_t, 16 >::get_word(void) const;

1128 8 set_word 0 4 1847 33 BitMask< uint16_t, 16 >::set_word 0 1 218 0
62
inline void BitMask< uint16_t, 16 >::set_word(uint16_t value);

1129 15 get_num_on_bits 0 4 1847 40 BitMask< uint16_t, 16 >::get_num_on_bits 0 1 219 0
64
inline int BitMask< uint16_t, 16 >::get_num_on_bits(void) const;

1130 16 get_num_off_bits 0 4 1847 41 BitMask< uint16_t, 16 >::get_num_off_bits 0 1 220 0
65
inline int BitMask< uint16_t, 16 >::get_num_off_bits(void) const;

1131 17 get_lowest_on_bit 0 4 1847 42 BitMask< uint16_t, 16 >::get_lowest_on_bit 0 1 221 0
66
inline int BitMask< uint16_t, 16 >::get_lowest_on_bit(void) const;

1132 18 get_lowest_off_bit 0 4 1847 43 BitMask< uint16_t, 16 >::get_lowest_off_bit 0 1 222 0
67
inline int BitMask< uint16_t, 16 >::get_lowest_off_bit(void) const;

1133 18 get_highest_on_bit 0 4 1847 43 BitMask< uint16_t, 16 >::get_highest_on_bit 0 1 223 0
67
inline int BitMask< uint16_t, 16 >::get_highest_on_bit(void) const;

1134 19 get_highest_off_bit 0 4 1847 44 BitMask< uint16_t, 16 >::get_highest_off_bit 0 1 224 0
68
inline int BitMask< uint16_t, 16 >::get_highest_off_bit(void) const;

1135 29 get_next_higher_different_bit 0 4 1847 54 BitMask< uint16_t, 16 >::get_next_higher_different_bit 0 1 225 0
85
inline int BitMask< uint16_t, 16 >::get_next_higher_different_bit(int low_bit) const;

1136 15 invert_in_place 0 4 1847 40 BitMask< uint16_t, 16 >::invert_in_place 0 1 226 0
59
inline void BitMask< uint16_t, 16 >::invert_in_place(void);

1137 18 has_bits_in_common 0 4 1847 43 BitMask< uint16_t, 16 >::has_bits_in_common 0 1 227 0
100
inline bool BitMask< uint16_t, 16 >::has_bits_in_common(BitMask< uint16_t, 16 > const &other) const;

1138 5 clear 0 4 1847 30 BitMask< uint16_t, 16 >::clear 0 1 228 0
49
inline void BitMask< uint16_t, 16 >::clear(void);

1139 6 output 0 4 1847 31 BitMask< uint16_t, 16 >::output 0 1 229 0
57
void BitMask< uint16_t, 16 >::output(ostream &out) const;

1140 13 output_binary 0 4 1847 38 BitMask< uint16_t, 16 >::output_binary 0 1 230 0
86
void BitMask< uint16_t, 16 >::output_binary(ostream &out, int spaces_every = 4) const;

1141 10 output_hex 0 4 1847 35 BitMask< uint16_t, 16 >::output_hex 0 1 231 0
83
void BitMask< uint16_t, 16 >::output_hex(ostream &out, int spaces_every = 4) const;

1142 5 write 0 4 1847 30 BitMask< uint16_t, 16 >::write 0 1 232 0
78
void BitMask< uint16_t, 16 >::write(ostream &out, int indent_level = 0) const;

1143 11 operator == 0 4 1847 36 BitMask< uint16_t, 16 >::operator == 0 1 233 0
93
inline bool BitMask< uint16_t, 16 >::operator ==(BitMask< uint16_t, 16 > const &other) const;

1144 11 operator != 0 4 1847 36 BitMask< uint16_t, 16 >::operator != 0 1 234 0
93
inline bool BitMask< uint16_t, 16 >::operator !=(BitMask< uint16_t, 16 > const &other) const;

1145 10 operator < 0 4 1847 35 BitMask< uint16_t, 16 >::operator < 0 1 235 0
92
inline bool BitMask< uint16_t, 16 >::operator <(BitMask< uint16_t, 16 > const &other) const;

1146 10 compare_to 0 4 1847 35 BitMask< uint16_t, 16 >::compare_to 0 1 236 0
91
inline int BitMask< uint16_t, 16 >::compare_to(BitMask< uint16_t, 16 > const &other) const;

1147 10 operator & 0 4 1847 35 BitMask< uint16_t, 16 >::operator & 0 1 237 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator &(BitMask< uint16_t, 16 > const &other) const;

1148 10 operator | 0 4 1847 35 BitMask< uint16_t, 16 >::operator | 0 1 238 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator |(BitMask< uint16_t, 16 > const &other) const;

1149 10 operator ^ 0 4 1847 35 BitMask< uint16_t, 16 >::operator ^ 0 1 239 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ^(BitMask< uint16_t, 16 > const &other) const;

1150 10 operator ~ 0 68 1847 35 BitMask< uint16_t, 16 >::operator ~ 0 1 240 0
79
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ~(void) const;

1151 11 operator << 0 4 1847 36 BitMask< uint16_t, 16 >::operator << 0 1 241 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator <<(int shift) const;

1152 11 operator >> 0 4 1847 36 BitMask< uint16_t, 16 >::operator >> 0 1 242 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator >>(int shift) const;

1153 11 operator &= 0 4 1847 36 BitMask< uint16_t, 16 >::operator &= 0 1 243 0
87
inline void BitMask< uint16_t, 16 >::operator &=(BitMask< uint16_t, 16 > const &other);

1154 11 operator |= 0 4 1847 36 BitMask< uint16_t, 16 >::operator |= 0 1 244 0
87
inline void BitMask< uint16_t, 16 >::operator |=(BitMask< uint16_t, 16 > const &other);

1155 11 operator ^= 0 4 1847 36 BitMask< uint16_t, 16 >::operator ^= 0 1 245 0
87
inline void BitMask< uint16_t, 16 >::operator ^=(BitMask< uint16_t, 16 > const &other);

1156 12 operator <<= 0 4 1847 37 BitMask< uint16_t, 16 >::operator <<= 0 1 246 0
61
inline void BitMask< uint16_t, 16 >::operator <<=(int shift);

1157 12 operator >>= 0 4 1847 37 BitMask< uint16_t, 16 >::operator >>= 0 1 247 0
61
inline void BitMask< uint16_t, 16 >::operator >>=(int shift);

1158 19 flood_down_in_place 0 4 1847 44 BitMask< uint16_t, 16 >::flood_down_in_place 0 1 248 0
63
inline void BitMask< uint16_t, 16 >::flood_down_in_place(void);

1159 17 flood_up_in_place 0 4 1847 42 BitMask< uint16_t, 16 >::flood_up_in_place 0 1 249 0
61
inline void BitMask< uint16_t, 16 >::flood_up_in_place(void);

1160 15 flood_bits_down 0 4 1847 40 BitMask< uint16_t, 16 >::flood_bits_down 0 1 250 0
84
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_down(void) const;

1161 13 flood_bits_up 0 4 1847 38 BitMask< uint16_t, 16 >::flood_bits_up 0 1 251 0
82
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_up(void) const;

1162 21 keep_next_highest_bit 0 4 1847 46 BitMask< uint16_t, 16 >::keep_next_highest_bit 0 3 252 253 254 0
309
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(BitMask< uint16_t, 16 > const &other) const;

1163 20 keep_next_lowest_bit 0 4 1847 45 BitMask< uint16_t, 16 >::keep_next_lowest_bit 0 3 255 256 257 0
306
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(BitMask< uint16_t, 16 > const &other) const;

1164 7 get_key 0 4 1847 32 BitMask< uint16_t, 16 >::get_key 0 1 258 0
56
inline int BitMask< uint16_t, 16 >::get_key(void) const;

1165 11 __nonzero__ 0 4 1847 36 BitMask< uint16_t, 16 >::__nonzero__ 0 1 259 0
61
inline bool BitMask< uint16_t, 16 >::__nonzero__(void) const;

1166 14 get_class_type 0 4 1847 39 BitMask< uint16_t, 16 >::get_class_type 0 1 260 0
64
static TypeHandle BitMask< uint16_t, 16 >::get_class_type(void);

1167 8 ~BitMask 0 4 1847 33 BitMask< uint16_t, 16 >::~BitMask 0 0 0
40
BitMask< uint16_t, 16 >::~BitMask(void);

1168 7 BitMask 0 4 1849 32 BitMask< uint32_t, 32 >::BitMask 0 3 261 262 263 0
192
inline BitMask< uint32_t, 32 >::BitMask(void);
inline BitMask< uint32_t, 32 >::BitMask(uint32_t init_value);
inline BitMask< uint32_t, 32 >::BitMask(BitMask< uint32_t, 32 > const &) = default;

1169 6 all_on 0 4 1849 31 BitMask< uint32_t, 32 >::all_on 0 1 264 0
76
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_on(void);

1170 7 all_off 0 4 1849 32 BitMask< uint32_t, 32 >::all_off 0 1 265 0
77
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_off(void);

1171 8 lower_on 0 4 1849 33 BitMask< uint32_t, 32 >::lower_on 0 1 266 0
85
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::lower_on(int on_bits);

1172 3 bit 0 4 1849 28 BitMask< uint32_t, 32 >::bit 0 1 267 0
78
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::bit(int index);

1173 5 range 0 4 1849 30 BitMask< uint32_t, 32 >::range 0 1 268 0
92
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::range(int low_bit, int size);

1174 16 has_max_num_bits 0 4 1849 41 BitMask< uint32_t, 32 >::has_max_num_bits 0 1 269 0
70
static constexpr bool BitMask< uint32_t, 32 >::has_max_num_bits(void);

1175 16 get_max_num_bits 0 4 1849 41 BitMask< uint32_t, 32 >::get_max_num_bits 0 1 270 0
69
static constexpr int BitMask< uint32_t, 32 >::get_max_num_bits(void);

1176 12 get_num_bits 0 4 1849 37 BitMask< uint32_t, 32 >::get_num_bits 0 1 271 0
65
static constexpr int BitMask< uint32_t, 32 >::get_num_bits(void);

1177 7 get_bit 0 4 1849 32 BitMask< uint32_t, 32 >::get_bit 0 1 272 0
62
inline bool BitMask< uint32_t, 32 >::get_bit(int index) const;

1178 7 set_bit 0 4 1849 32 BitMask< uint32_t, 32 >::set_bit 0 1 273 0
56
inline void BitMask< uint32_t, 32 >::set_bit(int index);

1179 9 clear_bit 0 4 1849 34 BitMask< uint32_t, 32 >::clear_bit 0 1 274 0
58
inline void BitMask< uint32_t, 32 >::clear_bit(int index);

1180 10 set_bit_to 0 4 1849 35 BitMask< uint32_t, 32 >::set_bit_to 0 1 275 0
71
inline void BitMask< uint32_t, 32 >::set_bit_to(int index, bool value);

1181 7 is_zero 0 4 1849 32 BitMask< uint32_t, 32 >::is_zero 0 1 276 0
57
inline bool BitMask< uint32_t, 32 >::is_zero(void) const;

1182 9 is_all_on 0 4 1849 34 BitMask< uint32_t, 32 >::is_all_on 0 1 277 0
59
inline bool BitMask< uint32_t, 32 >::is_all_on(void) const;

1183 7 extract 0 4 1849 32 BitMask< uint32_t, 32 >::extract 0 1 278 0
78
inline uint32_t BitMask< uint32_t, 32 >::extract(int low_bit, int size) const;

1184 5 store 0 4 1849 30 BitMask< uint32_t, 32 >::store 0 1 279 0
82
inline void BitMask< uint32_t, 32 >::store(uint32_t value, int low_bit, int size);

1185 10 has_any_of 0 4 1849 35 BitMask< uint32_t, 32 >::has_any_of 0 1 280 0
77
inline bool BitMask< uint32_t, 32 >::has_any_of(int low_bit, int size) const;

1186 10 has_all_of 0 4 1849 35 BitMask< uint32_t, 32 >::has_all_of 0 1 281 0
77
inline bool BitMask< uint32_t, 32 >::has_all_of(int low_bit, int size) const;

1187 9 set_range 0 4 1849 34 BitMask< uint32_t, 32 >::set_range 0 1 282 0
70
inline void BitMask< uint32_t, 32 >::set_range(int low_bit, int size);

1188 11 clear_range 0 4 1849 36 BitMask< uint32_t, 32 >::clear_range 0 1 283 0
72
inline void BitMask< uint32_t, 32 >::clear_range(int low_bit, int size);

1189 12 set_range_to 0 4 1849 37 BitMask< uint32_t, 32 >::set_range_to 0 1 284 0
85
inline void BitMask< uint32_t, 32 >::set_range_to(bool value, int low_bit, int size);

1190 8 get_word 0 4 1849 33 BitMask< uint32_t, 32 >::get_word 0 1 285 0
62
inline uint32_t BitMask< uint32_t, 32 >::get_word(void) const;

1191 8 set_word 0 4 1849 33 BitMask< uint32_t, 32 >::set_word 0 1 286 0
62
inline void BitMask< uint32_t, 32 >::set_word(uint32_t value);

1192 15 get_num_on_bits 0 4 1849 40 BitMask< uint32_t, 32 >::get_num_on_bits 0 1 287 0
64
inline int BitMask< uint32_t, 32 >::get_num_on_bits(void) const;

1193 16 get_num_off_bits 0 4 1849 41 BitMask< uint32_t, 32 >::get_num_off_bits 0 1 288 0
65
inline int BitMask< uint32_t, 32 >::get_num_off_bits(void) const;

1194 17 get_lowest_on_bit 0 4 1849 42 BitMask< uint32_t, 32 >::get_lowest_on_bit 0 1 289 0
66
inline int BitMask< uint32_t, 32 >::get_lowest_on_bit(void) const;

1195 18 get_lowest_off_bit 0 4 1849 43 BitMask< uint32_t, 32 >::get_lowest_off_bit 0 1 290 0
67
inline int BitMask< uint32_t, 32 >::get_lowest_off_bit(void) const;

1196 18 get_highest_on_bit 0 4 1849 43 BitMask< uint32_t, 32 >::get_highest_on_bit 0 1 291 0
67
inline int BitMask< uint32_t, 32 >::get_highest_on_bit(void) const;

1197 19 get_highest_off_bit 0 4 1849 44 BitMask< uint32_t, 32 >::get_highest_off_bit 0 1 292 0
68
inline int BitMask< uint32_t, 32 >::get_highest_off_bit(void) const;

1198 29 get_next_higher_different_bit 0 4 1849 54 BitMask< uint32_t, 32 >::get_next_higher_different_bit 0 1 293 0
85
inline int BitMask< uint32_t, 32 >::get_next_higher_different_bit(int low_bit) const;

1199 15 invert_in_place 0 4 1849 40 BitMask< uint32_t, 32 >::invert_in_place 0 1 294 0
59
inline void BitMask< uint32_t, 32 >::invert_in_place(void);

1200 18 has_bits_in_common 0 4 1849 43 BitMask< uint32_t, 32 >::has_bits_in_common 0 1 295 0
100
inline bool BitMask< uint32_t, 32 >::has_bits_in_common(BitMask< uint32_t, 32 > const &other) const;

1201 5 clear 0 4 1849 30 BitMask< uint32_t, 32 >::clear 0 1 296 0
49
inline void BitMask< uint32_t, 32 >::clear(void);

1202 6 output 0 4 1849 31 BitMask< uint32_t, 32 >::output 0 1 297 0
57
void BitMask< uint32_t, 32 >::output(ostream &out) const;

1203 13 output_binary 0 4 1849 38 BitMask< uint32_t, 32 >::output_binary 0 1 298 0
86
void BitMask< uint32_t, 32 >::output_binary(ostream &out, int spaces_every = 4) const;

1204 10 output_hex 0 4 1849 35 BitMask< uint32_t, 32 >::output_hex 0 1 299 0
83
void BitMask< uint32_t, 32 >::output_hex(ostream &out, int spaces_every = 4) const;

1205 5 write 0 4 1849 30 BitMask< uint32_t, 32 >::write 0 1 300 0
78
void BitMask< uint32_t, 32 >::write(ostream &out, int indent_level = 0) const;

1206 11 operator == 0 4 1849 36 BitMask< uint32_t, 32 >::operator == 0 1 301 0
93
inline bool BitMask< uint32_t, 32 >::operator ==(BitMask< uint32_t, 32 > const &other) const;

1207 11 operator != 0 4 1849 36 BitMask< uint32_t, 32 >::operator != 0 1 302 0
93
inline bool BitMask< uint32_t, 32 >::operator !=(BitMask< uint32_t, 32 > const &other) const;

1208 10 operator < 0 4 1849 35 BitMask< uint32_t, 32 >::operator < 0 1 303 0
92
inline bool BitMask< uint32_t, 32 >::operator <(BitMask< uint32_t, 32 > const &other) const;

1209 10 compare_to 0 4 1849 35 BitMask< uint32_t, 32 >::compare_to 0 1 304 0
91
inline int BitMask< uint32_t, 32 >::compare_to(BitMask< uint32_t, 32 > const &other) const;

1210 10 operator & 0 4 1849 35 BitMask< uint32_t, 32 >::operator & 0 1 305 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator &(BitMask< uint32_t, 32 > const &other) const;

1211 10 operator | 0 4 1849 35 BitMask< uint32_t, 32 >::operator | 0 1 306 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator |(BitMask< uint32_t, 32 > const &other) const;

1212 10 operator ^ 0 4 1849 35 BitMask< uint32_t, 32 >::operator ^ 0 1 307 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ^(BitMask< uint32_t, 32 > const &other) const;

1213 10 operator ~ 0 68 1849 35 BitMask< uint32_t, 32 >::operator ~ 0 1 308 0
79
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ~(void) const;

1214 11 operator << 0 4 1849 36 BitMask< uint32_t, 32 >::operator << 0 1 309 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator <<(int shift) const;

1215 11 operator >> 0 4 1849 36 BitMask< uint32_t, 32 >::operator >> 0 1 310 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator >>(int shift) const;

1216 11 operator &= 0 4 1849 36 BitMask< uint32_t, 32 >::operator &= 0 1 311 0
87
inline void BitMask< uint32_t, 32 >::operator &=(BitMask< uint32_t, 32 > const &other);

1217 11 operator |= 0 4 1849 36 BitMask< uint32_t, 32 >::operator |= 0 1 312 0
87
inline void BitMask< uint32_t, 32 >::operator |=(BitMask< uint32_t, 32 > const &other);

1218 11 operator ^= 0 4 1849 36 BitMask< uint32_t, 32 >::operator ^= 0 1 313 0
87
inline void BitMask< uint32_t, 32 >::operator ^=(BitMask< uint32_t, 32 > const &other);

1219 12 operator <<= 0 4 1849 37 BitMask< uint32_t, 32 >::operator <<= 0 1 314 0
61
inline void BitMask< uint32_t, 32 >::operator <<=(int shift);

1220 12 operator >>= 0 4 1849 37 BitMask< uint32_t, 32 >::operator >>= 0 1 315 0
61
inline void BitMask< uint32_t, 32 >::operator >>=(int shift);

1221 19 flood_down_in_place 0 4 1849 44 BitMask< uint32_t, 32 >::flood_down_in_place 0 1 316 0
63
inline void BitMask< uint32_t, 32 >::flood_down_in_place(void);

1222 17 flood_up_in_place 0 4 1849 42 BitMask< uint32_t, 32 >::flood_up_in_place 0 1 317 0
61
inline void BitMask< uint32_t, 32 >::flood_up_in_place(void);

1223 15 flood_bits_down 0 4 1849 40 BitMask< uint32_t, 32 >::flood_bits_down 0 1 318 0
84
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_down(void) const;

1224 13 flood_bits_up 0 4 1849 38 BitMask< uint32_t, 32 >::flood_bits_up 0 1 319 0
82
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_up(void) const;

1225 21 keep_next_highest_bit 0 4 1849 46 BitMask< uint32_t, 32 >::keep_next_highest_bit 0 3 320 321 322 0
309
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(BitMask< uint32_t, 32 > const &other) const;

1226 20 keep_next_lowest_bit 0 4 1849 45 BitMask< uint32_t, 32 >::keep_next_lowest_bit 0 3 323 324 325 0
306
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(BitMask< uint32_t, 32 > const &other) const;

1227 7 get_key 0 4 1849 32 BitMask< uint32_t, 32 >::get_key 0 1 326 0
56
inline int BitMask< uint32_t, 32 >::get_key(void) const;

1228 11 __nonzero__ 0 4 1849 36 BitMask< uint32_t, 32 >::__nonzero__ 0 1 327 0
61
inline bool BitMask< uint32_t, 32 >::__nonzero__(void) const;

1229 14 get_class_type 0 4 1849 39 BitMask< uint32_t, 32 >::get_class_type 0 1 328 0
64
static TypeHandle BitMask< uint32_t, 32 >::get_class_type(void);

1230 8 ~BitMask 0 4 1849 33 BitMask< uint32_t, 32 >::~BitMask 0 0 0
40
BitMask< uint32_t, 32 >::~BitMask(void);

1231 7 BitMask 0 4 1851 32 BitMask< uint64_t, 64 >::BitMask 0 3 329 330 331 0
192
inline BitMask< uint64_t, 64 >::BitMask(void);
inline BitMask< uint64_t, 64 >::BitMask(uint64_t init_value);
inline BitMask< uint64_t, 64 >::BitMask(BitMask< uint64_t, 64 > const &) = default;

1232 6 all_on 0 4 1851 31 BitMask< uint64_t, 64 >::all_on 0 1 332 0
76
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_on(void);

1233 7 all_off 0 4 1851 32 BitMask< uint64_t, 64 >::all_off 0 1 333 0
77
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_off(void);

1234 8 lower_on 0 4 1851 33 BitMask< uint64_t, 64 >::lower_on 0 1 334 0
85
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::lower_on(int on_bits);

1235 3 bit 0 4 1851 28 BitMask< uint64_t, 64 >::bit 0 1 335 0
78
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::bit(int index);

1236 5 range 0 4 1851 30 BitMask< uint64_t, 64 >::range 0 1 336 0
92
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::range(int low_bit, int size);

1237 16 has_max_num_bits 0 4 1851 41 BitMask< uint64_t, 64 >::has_max_num_bits 0 1 337 0
70
static constexpr bool BitMask< uint64_t, 64 >::has_max_num_bits(void);

1238 16 get_max_num_bits 0 4 1851 41 BitMask< uint64_t, 64 >::get_max_num_bits 0 1 338 0
69
static constexpr int BitMask< uint64_t, 64 >::get_max_num_bits(void);

1239 12 get_num_bits 0 4 1851 37 BitMask< uint64_t, 64 >::get_num_bits 0 1 339 0
65
static constexpr int BitMask< uint64_t, 64 >::get_num_bits(void);

1240 7 get_bit 0 4 1851 32 BitMask< uint64_t, 64 >::get_bit 0 1 340 0
62
inline bool BitMask< uint64_t, 64 >::get_bit(int index) const;

1241 7 set_bit 0 4 1851 32 BitMask< uint64_t, 64 >::set_bit 0 1 341 0
56
inline void BitMask< uint64_t, 64 >::set_bit(int index);

1242 9 clear_bit 0 4 1851 34 BitMask< uint64_t, 64 >::clear_bit 0 1 342 0
58
inline void BitMask< uint64_t, 64 >::clear_bit(int index);

1243 10 set_bit_to 0 4 1851 35 BitMask< uint64_t, 64 >::set_bit_to 0 1 343 0
71
inline void BitMask< uint64_t, 64 >::set_bit_to(int index, bool value);

1244 7 is_zero 0 4 1851 32 BitMask< uint64_t, 64 >::is_zero 0 1 344 0
57
inline bool BitMask< uint64_t, 64 >::is_zero(void) const;

1245 9 is_all_on 0 4 1851 34 BitMask< uint64_t, 64 >::is_all_on 0 1 345 0
59
inline bool BitMask< uint64_t, 64 >::is_all_on(void) const;

1246 7 extract 0 4 1851 32 BitMask< uint64_t, 64 >::extract 0 1 346 0
78
inline uint64_t BitMask< uint64_t, 64 >::extract(int low_bit, int size) const;

1247 5 store 0 4 1851 30 BitMask< uint64_t, 64 >::store 0 1 347 0
82
inline void BitMask< uint64_t, 64 >::store(uint64_t value, int low_bit, int size);

1248 10 has_any_of 0 4 1851 35 BitMask< uint64_t, 64 >::has_any_of 0 1 348 0
77
inline bool BitMask< uint64_t, 64 >::has_any_of(int low_bit, int size) const;

1249 10 has_all_of 0 4 1851 35 BitMask< uint64_t, 64 >::has_all_of 0 1 349 0
77
inline bool BitMask< uint64_t, 64 >::has_all_of(int low_bit, int size) const;

1250 9 set_range 0 4 1851 34 BitMask< uint64_t, 64 >::set_range 0 1 350 0
70
inline void BitMask< uint64_t, 64 >::set_range(int low_bit, int size);

1251 11 clear_range 0 4 1851 36 BitMask< uint64_t, 64 >::clear_range 0 1 351 0
72
inline void BitMask< uint64_t, 64 >::clear_range(int low_bit, int size);

1252 12 set_range_to 0 4 1851 37 BitMask< uint64_t, 64 >::set_range_to 0 1 352 0
85
inline void BitMask< uint64_t, 64 >::set_range_to(bool value, int low_bit, int size);

1253 8 get_word 0 4 1851 33 BitMask< uint64_t, 64 >::get_word 0 1 353 0
62
inline uint64_t BitMask< uint64_t, 64 >::get_word(void) const;

1254 8 set_word 0 4 1851 33 BitMask< uint64_t, 64 >::set_word 0 1 354 0
62
inline void BitMask< uint64_t, 64 >::set_word(uint64_t value);

1255 15 get_num_on_bits 0 4 1851 40 BitMask< uint64_t, 64 >::get_num_on_bits 0 1 355 0
64
inline int BitMask< uint64_t, 64 >::get_num_on_bits(void) const;

1256 16 get_num_off_bits 0 4 1851 41 BitMask< uint64_t, 64 >::get_num_off_bits 0 1 356 0
65
inline int BitMask< uint64_t, 64 >::get_num_off_bits(void) const;

1257 17 get_lowest_on_bit 0 4 1851 42 BitMask< uint64_t, 64 >::get_lowest_on_bit 0 1 357 0
66
inline int BitMask< uint64_t, 64 >::get_lowest_on_bit(void) const;

1258 18 get_lowest_off_bit 0 4 1851 43 BitMask< uint64_t, 64 >::get_lowest_off_bit 0 1 358 0
67
inline int BitMask< uint64_t, 64 >::get_lowest_off_bit(void) const;

1259 18 get_highest_on_bit 0 4 1851 43 BitMask< uint64_t, 64 >::get_highest_on_bit 0 1 359 0
67
inline int BitMask< uint64_t, 64 >::get_highest_on_bit(void) const;

1260 19 get_highest_off_bit 0 4 1851 44 BitMask< uint64_t, 64 >::get_highest_off_bit 0 1 360 0
68
inline int BitMask< uint64_t, 64 >::get_highest_off_bit(void) const;

1261 29 get_next_higher_different_bit 0 4 1851 54 BitMask< uint64_t, 64 >::get_next_higher_different_bit 0 1 361 0
85
inline int BitMask< uint64_t, 64 >::get_next_higher_different_bit(int low_bit) const;

1262 15 invert_in_place 0 4 1851 40 BitMask< uint64_t, 64 >::invert_in_place 0 1 362 0
59
inline void BitMask< uint64_t, 64 >::invert_in_place(void);

1263 18 has_bits_in_common 0 4 1851 43 BitMask< uint64_t, 64 >::has_bits_in_common 0 1 363 0
100
inline bool BitMask< uint64_t, 64 >::has_bits_in_common(BitMask< uint64_t, 64 > const &other) const;

1264 5 clear 0 4 1851 30 BitMask< uint64_t, 64 >::clear 0 1 364 0
49
inline void BitMask< uint64_t, 64 >::clear(void);

1265 6 output 0 4 1851 31 BitMask< uint64_t, 64 >::output 0 1 365 0
57
void BitMask< uint64_t, 64 >::output(ostream &out) const;

1266 13 output_binary 0 4 1851 38 BitMask< uint64_t, 64 >::output_binary 0 1 366 0
86
void BitMask< uint64_t, 64 >::output_binary(ostream &out, int spaces_every = 4) const;

1267 10 output_hex 0 4 1851 35 BitMask< uint64_t, 64 >::output_hex 0 1 367 0
83
void BitMask< uint64_t, 64 >::output_hex(ostream &out, int spaces_every = 4) const;

1268 5 write 0 4 1851 30 BitMask< uint64_t, 64 >::write 0 1 368 0
78
void BitMask< uint64_t, 64 >::write(ostream &out, int indent_level = 0) const;

1269 11 operator == 0 4 1851 36 BitMask< uint64_t, 64 >::operator == 0 1 369 0
93
inline bool BitMask< uint64_t, 64 >::operator ==(BitMask< uint64_t, 64 > const &other) const;

1270 11 operator != 0 4 1851 36 BitMask< uint64_t, 64 >::operator != 0 1 370 0
93
inline bool BitMask< uint64_t, 64 >::operator !=(BitMask< uint64_t, 64 > const &other) const;

1271 10 operator < 0 4 1851 35 BitMask< uint64_t, 64 >::operator < 0 1 371 0
92
inline bool BitMask< uint64_t, 64 >::operator <(BitMask< uint64_t, 64 > const &other) const;

1272 10 compare_to 0 4 1851 35 BitMask< uint64_t, 64 >::compare_to 0 1 372 0
91
inline int BitMask< uint64_t, 64 >::compare_to(BitMask< uint64_t, 64 > const &other) const;

1273 10 operator & 0 4 1851 35 BitMask< uint64_t, 64 >::operator & 0 1 373 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator &(BitMask< uint64_t, 64 > const &other) const;

1274 10 operator | 0 4 1851 35 BitMask< uint64_t, 64 >::operator | 0 1 374 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator |(BitMask< uint64_t, 64 > const &other) const;

1275 10 operator ^ 0 4 1851 35 BitMask< uint64_t, 64 >::operator ^ 0 1 375 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ^(BitMask< uint64_t, 64 > const &other) const;

1276 10 operator ~ 0 68 1851 35 BitMask< uint64_t, 64 >::operator ~ 0 1 376 0
79
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ~(void) const;

1277 11 operator << 0 4 1851 36 BitMask< uint64_t, 64 >::operator << 0 1 377 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator <<(int shift) const;

1278 11 operator >> 0 4 1851 36 BitMask< uint64_t, 64 >::operator >> 0 1 378 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator >>(int shift) const;

1279 11 operator &= 0 4 1851 36 BitMask< uint64_t, 64 >::operator &= 0 1 379 0
87
inline void BitMask< uint64_t, 64 >::operator &=(BitMask< uint64_t, 64 > const &other);

1280 11 operator |= 0 4 1851 36 BitMask< uint64_t, 64 >::operator |= 0 1 380 0
87
inline void BitMask< uint64_t, 64 >::operator |=(BitMask< uint64_t, 64 > const &other);

1281 11 operator ^= 0 4 1851 36 BitMask< uint64_t, 64 >::operator ^= 0 1 381 0
87
inline void BitMask< uint64_t, 64 >::operator ^=(BitMask< uint64_t, 64 > const &other);

1282 12 operator <<= 0 4 1851 37 BitMask< uint64_t, 64 >::operator <<= 0 1 382 0
61
inline void BitMask< uint64_t, 64 >::operator <<=(int shift);

1283 12 operator >>= 0 4 1851 37 BitMask< uint64_t, 64 >::operator >>= 0 1 383 0
61
inline void BitMask< uint64_t, 64 >::operator >>=(int shift);

1284 19 flood_down_in_place 0 4 1851 44 BitMask< uint64_t, 64 >::flood_down_in_place 0 1 384 0
63
inline void BitMask< uint64_t, 64 >::flood_down_in_place(void);

1285 17 flood_up_in_place 0 4 1851 42 BitMask< uint64_t, 64 >::flood_up_in_place 0 1 385 0
61
inline void BitMask< uint64_t, 64 >::flood_up_in_place(void);

1286 15 flood_bits_down 0 4 1851 40 BitMask< uint64_t, 64 >::flood_bits_down 0 1 386 0
84
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_down(void) const;

1287 13 flood_bits_up 0 4 1851 38 BitMask< uint64_t, 64 >::flood_bits_up 0 1 387 0
82
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_up(void) const;

1288 21 keep_next_highest_bit 0 4 1851 46 BitMask< uint64_t, 64 >::keep_next_highest_bit 0 3 388 389 390 0
309
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(BitMask< uint64_t, 64 > const &other) const;

1289 20 keep_next_lowest_bit 0 4 1851 45 BitMask< uint64_t, 64 >::keep_next_lowest_bit 0 3 391 392 393 0
306
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(BitMask< uint64_t, 64 > const &other) const;

1290 7 get_key 0 4 1851 32 BitMask< uint64_t, 64 >::get_key 0 1 394 0
56
inline int BitMask< uint64_t, 64 >::get_key(void) const;

1291 11 __nonzero__ 0 4 1851 36 BitMask< uint64_t, 64 >::__nonzero__ 0 1 395 0
61
inline bool BitMask< uint64_t, 64 >::__nonzero__(void) const;

1292 14 get_class_type 0 4 1851 39 BitMask< uint64_t, 64 >::get_class_type 0 1 396 0
64
static TypeHandle BitMask< uint64_t, 64 >::get_class_type(void);

1293 8 ~BitMask 0 4 1851 33 BitMask< uint64_t, 64 >::~BitMask 0 0 0
40
BitMask< uint64_t, 64 >::~BitMask(void);

1294 8 BitArray 0 4 1854 18 BitArray::BitArray 0 4 397 398 399 400 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
190
inline BitArray::BitArray(void);
inline BitArray::BitArray(BitArray::WordType init_value);
BitArray::BitArray(SparseArray const &from);
inline BitArray::BitArray(BitArray const &) = default;

1295 6 all_on 0 4 1854 16 BitArray::all_on 0 1 401 69
/**
 * Returns a BitArray with an infinite array of bits, all on.
 */
46
static inline BitArray BitArray::all_on(void);

1296 7 all_off 0 4 1854 17 BitArray::all_off 0 1 402 53
/**
 * Returns a BitArray whose bits are all off.
 */
47
static inline BitArray BitArray::all_off(void);

1297 8 lower_on 0 4 1854 18 BitArray::lower_on 0 1 403 62
/**
 * Returns a BitArray whose lower on_bits bits are on.
 */
55
static inline BitArray BitArray::lower_on(int on_bits);

1298 3 bit 0 4 1854 13 BitArray::bit 0 1 404 61
/**
 * Returns a BitArray with only the indicated bit on.
 */
48
static inline BitArray BitArray::bit(int index);

1299 5 range 0 4 1854 15 BitArray::range 0 1 405 76
/**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */
62
static inline BitArray BitArray::range(int low_bit, int size);

1300 16 has_max_num_bits 0 4 1854 26 BitArray::has_max_num_bits 0 1 406 387
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The BitArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or BitArray interchangeably.
 */
55
static constexpr bool BitArray::has_max_num_bits(void);

1301 16 get_max_num_bits 0 4 1854 26 BitArray::get_max_num_bits 0 1 407 422
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The BitArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or BitArray interchangeably.
 */
54
static constexpr int BitArray::get_max_num_bits(void);

1302 21 get_num_bits_per_word 0 4 1854 31 BitArray::get_num_bits_per_word 0 1 408 203
/**
 * Returns the number of bits stored per word internally.  This is of interest
 * only in that it limits the maximum number of bits that may be queried or
 * set at once by extract() and store().
 */
59
static constexpr int BitArray::get_num_bits_per_word(void);

1303 12 get_num_bits 0 4 1854 22 BitArray::get_num_bits 0 1 409 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
54
inline std::size_t BitArray::get_num_bits(void) const;

1304 7 get_bit 0 4 1854 17 BitArray::get_bit 0 1 410 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
47
inline bool BitArray::get_bit(int index) const;

1305 7 set_bit 0 4 1854 17 BitArray::set_bit 0 1 411 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
41
inline void BitArray::set_bit(int index);

1306 9 clear_bit 0 4 1854 19 BitArray::clear_bit 0 1 412 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
43
inline void BitArray::clear_bit(int index);

1307 10 set_bit_to 0 4 1854 20 BitArray::set_bit_to 0 1 413 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
56
inline void BitArray::set_bit_to(int index, bool value);

1308 16 get_highest_bits 0 4 1854 26 BitArray::get_highest_bits 0 1 414 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
51
inline bool BitArray::get_highest_bits(void) const;

1309 7 is_zero 0 4 1854 17 BitArray::is_zero 0 1 415 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
35
bool BitArray::is_zero(void) const;

1310 9 is_all_on 0 4 1854 19 BitArray::is_all_on 0 1 416 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
37
bool BitArray::is_all_on(void) const;

1311 7 extract 0 4 1854 17 BitArray::extract 0 1 417 187
/**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */
73
inline BitArray::WordType BitArray::extract(int low_bit, int size) const;

1312 5 store 0 4 1854 15 BitArray::store 0 1 418 92
/**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */
77
inline void BitArray::store(BitArray::WordType value, int low_bit, int size);

1313 10 has_any_of 0 4 1854 20 BitArray::has_any_of 0 1 419 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
55
bool BitArray::has_any_of(int low_bit, int size) const;

1314 10 has_all_of 0 4 1854 20 BitArray::has_all_of 0 1 420 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
55
bool BitArray::has_all_of(int low_bit, int size) const;

1315 9 set_range 0 4 1854 19 BitArray::set_range 0 1 421 47
/**
 * Sets the indicated range of bits on.
 */
48
void BitArray::set_range(int low_bit, int size);

1316 11 clear_range 0 4 1854 21 BitArray::clear_range 0 1 422 48
/**
 * Sets the indicated range of bits off.
 */
50
void BitArray::clear_range(int low_bit, int size);

1317 12 set_range_to 0 4 1854 22 BitArray::set_range_to 0 1 423 64
/**
 * Sets the indicated range of bits to either on or off.
 */
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1318 15 get_num_on_bits 0 4 1854 25 BitArray::get_num_on_bits 0 1 424 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
42
int BitArray::get_num_on_bits(void) const;

1319 16 get_num_off_bits 0 4 1854 26 BitArray::get_num_off_bits 0 1 425 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
43
int BitArray::get_num_off_bits(void) const;

1320 17 get_lowest_on_bit 0 4 1854 27 BitArray::get_lowest_on_bit 0 1 426 101
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */
44
int BitArray::get_lowest_on_bit(void) const;

1321 18 get_lowest_off_bit 0 4 1854 28 BitArray::get_lowest_off_bit 0 1 427 101
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */
45
int BitArray::get_lowest_off_bit(void) const;

1322 18 get_highest_on_bit 0 4 1854 28 BitArray::get_highest_on_bit 0 1 428 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
45
int BitArray::get_highest_on_bit(void) const;

1323 19 get_highest_off_bit 0 4 1854 29 BitArray::get_highest_off_bit 0 1 429 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
46
int BitArray::get_highest_off_bit(void) const;

1324 29 get_next_higher_different_bit 0 4 1854 39 BitArray::get_next_higher_different_bit 0 1 430 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1325 13 get_num_words 0 4 1854 23 BitArray::get_num_words 0 1 431 75
/**
 * Returns the number of possibly-unique words stored in the array.
 */
55
inline std::size_t BitArray::get_num_words(void) const;

1326 8 get_word 0 4 1854 18 BitArray::get_word 0 1 432 175
/**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */
66
inline BitArray::MaskType BitArray::get_word(std::size_t n) const;

1327 8 set_word 0 4 1854 18 BitArray::set_word 0 1 433 113
/**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */
72
inline void BitArray::set_word(std::size_t n, BitArray::WordType value);

1328 15 invert_in_place 0 4 1854 25 BitArray::invert_in_place 0 1 434 90
/**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */
37
void BitArray::invert_in_place(void);

1329 18 has_bits_in_common 0 4 1854 28 BitArray::has_bits_in_common 0 1 435 178
/**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1330 5 clear 0 4 1854 15 BitArray::clear 0 1 436 49
/**
 * Sets all the bits in the BitArray off.
 */
34
inline void BitArray::clear(void);

1331 6 output 0 4 1854 16 BitArray::output 0 1 437 193
/**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */
42
void BitArray::output(ostream &out) const;

1332 13 output_binary 0 4 1854 23 BitArray::output_binary 0 1 438 83
/**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */
71
void BitArray::output_binary(ostream &out, int spaces_every = 4) const;

1333 10 output_hex 0 4 1854 20 BitArray::output_hex 0 1 439 93
/**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */
68
void BitArray::output_hex(ostream &out, int spaces_every = 4) const;

1334 5 write 0 4 1854 15 BitArray::write 0 1 440 99
/**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */
63
void BitArray::write(ostream &out, int indent_level = 0) const;

1335 11 operator == 0 4 1854 21 BitArray::operator == 0 1 441 0
63
inline bool BitArray::operator ==(BitArray const &other) const;

1336 11 operator != 0 4 1854 21 BitArray::operator != 0 1 442 0
63
inline bool BitArray::operator !=(BitArray const &other) const;

1337 10 operator < 0 4 1854 20 BitArray::operator < 0 1 443 0
62
inline bool BitArray::operator <(BitArray const &other) const;

1338 10 compare_to 0 4 1854 20 BitArray::compare_to 0 1 444 233
/**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */
54
int BitArray::compare_to(BitArray const &other) const;

1339 10 operator & 0 4 1854 20 BitArray::operator & 0 1 445 0
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1340 10 operator | 0 4 1854 20 BitArray::operator | 0 1 446 0
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1341 10 operator ^ 0 4 1854 20 BitArray::operator ^ 0 1 447 0
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1342 10 operator ~ 0 68 1854 20 BitArray::operator ~ 0 1 448 0
49
inline BitArray BitArray::operator ~(void) const;

1343 11 operator << 0 4 1854 21 BitArray::operator << 0 1 449 0
55
inline BitArray BitArray::operator <<(int shift) const;

1344 11 operator >> 0 4 1854 21 BitArray::operator >> 0 1 450 0
55
inline BitArray BitArray::operator >>(int shift) const;

1345 11 operator &= 0 4 1854 21 BitArray::operator &= 0 1 451 0
50
void BitArray::operator &=(BitArray const &other);

1346 11 operator |= 0 4 1854 21 BitArray::operator |= 0 1 452 0
50
void BitArray::operator |=(BitArray const &other);

1347 11 operator ^= 0 4 1854 21 BitArray::operator ^= 0 1 453 0
50
void BitArray::operator ^=(BitArray const &other);

1348 12 operator <<= 0 4 1854 22 BitArray::operator <<= 0 1 454 0
39
void BitArray::operator <<=(int shift);

1349 12 operator >>= 0 4 1854 22 BitArray::operator >>= 0 1 455 0
39
void BitArray::operator >>=(int shift);

1350 14 get_class_type 0 4 1854 24 BitArray::get_class_type 0 1 456 0
49
static TypeHandle BitArray::get_class_type(void);

1351 9 ~BitArray 0 4 1854 19 BitArray::~BitArray 0 0 0
26
BitArray::~BitArray(void);

1352 12 ButtonHandle 0 4 1856 26 ButtonHandle::ButtonHandle 0 4 457 458 459 460 758
// The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer!

/**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */

/**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */
219
inline ButtonHandle::ButtonHandle(void) = default;
constexpr ButtonHandle::ButtonHandle(int index);
ButtonHandle::ButtonHandle(std::string const &name);
inline ButtonHandle::ButtonHandle(ButtonHandle const &) = default;

1353 11 operator == 0 4 1856 25 ButtonHandle::operator == 0 1 461 0
71
inline bool ButtonHandle::operator ==(ButtonHandle const &other) const;

1354 11 operator != 0 4 1856 25 ButtonHandle::operator != 0 1 462 0
71
inline bool ButtonHandle::operator !=(ButtonHandle const &other) const;

1355 10 operator < 0 4 1856 24 ButtonHandle::operator < 0 1 463 0
70
inline bool ButtonHandle::operator <(ButtonHandle const &other) const;

1356 11 operator <= 0 4 1856 25 ButtonHandle::operator <= 0 1 464 0
71
inline bool ButtonHandle::operator <=(ButtonHandle const &other) const;

1357 10 operator > 0 4 1856 24 ButtonHandle::operator > 0 1 465 0
70
inline bool ButtonHandle::operator >(ButtonHandle const &other) const;

1358 11 operator >= 0 4 1856 25 ButtonHandle::operator >= 0 1 466 0
71
inline bool ButtonHandle::operator >=(ButtonHandle const &other) const;

1359 10 compare_to 0 4 1856 24 ButtonHandle::compare_to 0 1 467 209
/**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */
69
inline int ButtonHandle::compare_to(ButtonHandle const &other) const;

1360 8 get_hash 0 4 1856 22 ButtonHandle::get_hash 0 1 468 54
/**
 * Returns a hash code suitable for phash_map.
 */
54
inline std::size_t ButtonHandle::get_hash(void) const;

1361 8 get_name 0 4 1856 22 ButtonHandle::get_name 0 1 469 42
/**
 * Returns the name of the button.
 */
47
std::string ButtonHandle::get_name(void) const;

1362 20 has_ascii_equivalent 0 4 1856 34 ButtonHandle::has_ascii_equivalent 0 1 470 121
/**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1363 20 get_ascii_equivalent 0 4 1856 34 ButtonHandle::get_ascii_equivalent 0 1 471 109
/**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1364 9 get_alias 0 4 1856 23 ButtonHandle::get_alias 0 1 472 373
/**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */
49
ButtonHandle ButtonHandle::get_alias(void) const;

1365 7 matches 0 4 1856 21 ButtonHandle::matches 0 1 473 263
/**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1366 9 get_index 0 4 1856 23 ButtonHandle::get_index 0 1 474 363
/**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */
50
constexpr int ButtonHandle::get_index(void) const;

1367 6 output 0 4 1856 20 ButtonHandle::output 0 1 475 10
/**
 *
 */
53
inline void ButtonHandle::output(ostream &out) const;

1368 4 none 0 4 1856 18 ButtonHandle::none 0 1 476 92
/**
 * Returns a special zero-valued ButtonHandle that is used to indicate no
 * button.
 */
52
static inline ButtonHandle ButtonHandle::none(void);

1369 22 operator typecast bool 0 132 1856 36 ButtonHandle::operator typecast bool 0 1 478 0
61
inline bool ButtonHandle::operator typecast bool(void) const;

1370 14 get_class_type 0 4 1856 28 ButtonHandle::get_class_type 0 1 477 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1371 13 ~ButtonHandle 0 4 1856 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1372 10 get_button 0 4 1860 26 ButtonRegistry::get_button 0 1 480 150
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */
65
ButtonHandle ButtonRegistry::get_button(std::string const &name);

1373 11 find_button 0 4 1860 27 ButtonRegistry::find_button 0 1 481 144
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */
66
ButtonHandle ButtonRegistry::find_button(std::string const &name);

1374 17 find_ascii_button 0 4 1860 33 ButtonRegistry::find_ascii_button 0 1 482 169
/**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1375 5 write 0 4 1860 21 ButtonRegistry::write 0 1 483 10
/**
 *
 */
47
void ButtonRegistry::write(ostream &out) const;

1376 3 ptr 0 4 1860 19 ButtonRegistry::ptr 0 1 484 134
// ptr() returns the pointer to the global ButtonRegistry object.

/**
 * Returns the pointer to the global ButtonRegistry object.
 */
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1377 14 ButtonRegistry 0 4 1860 30 ButtonRegistry::ButtonRegistry 0 1 479 10
/**
 *
 */
72
inline ButtonRegistry::ButtonRegistry(ButtonRegistry const &) = default;

1378 15 ~ButtonRegistry 0 4 1860 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1379 15 get_num_buttons 0 4 1861 26 ButtonMap::get_num_buttons 0 1 487 76
/**
 * Returns the number of buttons that this button mapping specifies.
 */
58
inline std::size_t ButtonMap::get_num_buttons(void) const;

1380 14 get_raw_button 0 4 1861 25 ButtonMap::get_raw_button 0 1 488 76
/**
 * Returns the underlying raw button associated with the nth button.
 */
67
inline ButtonHandle ButtonMap::get_raw_button(std::size_t i) const;

1381 17 get_mapped_button 0 4 1861 28 ButtonMap::get_mapped_button 0 3 489 490 491 437
/**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */
229
inline ButtonHandle ButtonMap::get_mapped_button(std::size_t i) const;
inline ButtonHandle ButtonMap::get_mapped_button(ButtonHandle raw) const;
inline ButtonHandle ButtonMap::get_mapped_button(std::string const &raw_name) const;

1382 23 get_mapped_button_label 0 4 1861 34 ButtonMap::get_mapped_button_label 0 3 492 493 494 837
/**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */
265
inline std::string const &ButtonMap::get_mapped_button_label(std::size_t i) const;
inline std::string const &ButtonMap::get_mapped_button_label(ButtonHandle raw) const;
inline std::string const &ButtonMap::get_mapped_button_label(std::string const &raw_name) const;

1383 6 output 0 4 1861 17 ButtonMap::output 0 1 495 10
/**
 *
 */
43
void ButtonMap::output(ostream &out) const;

1384 5 write 0 4 1861 16 ButtonMap::write 0 1 496 10
/**
 *
 */
64
void ButtonMap::write(ostream &out, int indent_level = 0) const;

1385 14 get_class_type 0 4 1861 25 ButtonMap::get_class_type 0 1 497 0
50
static TypeHandle ButtonMap::get_class_type(void);

1386 9 ButtonMap 0 4 1861 20 ButtonMap::ButtonMap 0 2 485 486 0
102
inline ButtonMap::ButtonMap(void) = default;
inline ButtonMap::ButtonMap(ButtonMap const &) = default;

1387 10 ~ButtonMap 0 4 1861 21 ButtonMap::~ButtonMap 0 0 0
28
ButtonMap::~ButtonMap(void);

1388 6 output 0 6 1863 22 CallbackObject::output 0 1 499 10
/**
 *
 */
56
virtual void CallbackObject::output(ostream &out) const;

1389 4 make 0 4 1863 20 CallbackObject::make 0 1 500 0
76
static PointerTo< CallbackObject > CallbackObject::make(PyObject *function);

1390 14 get_class_type 0 4 1863 30 CallbackObject::get_class_type 0 1 501 0
55
static TypeHandle CallbackObject::get_class_type(void);

1391 14 CallbackObject 0 4 1863 30 CallbackObject::CallbackObject 0 1 498 10
/**
 *
 */
72
inline CallbackObject::CallbackObject(CallbackObject const &) = default;

1392 15 ~CallbackObject 0 4 1863 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1393 19 get_cache_ref_count 0 4 1864 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 502 47
/**
 * Returns the current reference count.
 */
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1394 9 cache_ref 0 4 1864 44 CachedTypedWritableReferenceCount::cache_ref 0 1 503 108
/**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1395 11 cache_unref 0 4 1864 46 CachedTypedWritableReferenceCount::cache_unref 0 1 504 202
/**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1396 24 test_ref_count_integrity 0 4 1864 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 505 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1397 14 get_class_type 0 4 1864 49 CachedTypedWritableReferenceCount::get_class_type 0 1 506 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1398 6 output 0 6 1865 20 CallbackData::output 0 1 507 10
/**
 *
 */
54
virtual void CallbackData::output(ostream &out) const;

1399 6 upcall 0 6 1865 20 CallbackData::upcall 0 1 508 159
/**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */
40
virtual void CallbackData::upcall(void);

1400 14 get_class_type 0 4 1865 28 CallbackData::get_class_type 0 1 509 0
53
static TypeHandle CallbackData::get_class_type(void);

1401 13 ~CallbackData 0 4 1865 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1402 20 PythonCallbackObject 0 4 1866 42 PythonCallbackObject::PythonCallbackObject 0 2 510 511 10
/**
 *
 */
177
PythonCallbackObject::PythonCallbackObject(PyObject *function = (& ::_Py_NoneStruct));
inline PythonCallbackObject::PythonCallbackObject(PythonCallbackObject const &) = default;

1403 12 operator new 0 4 1866 34 PythonCallbackObject::operator new 0 1 512 0
144
inline void *PythonCallbackObject::operator new(std::size_t size);
inline void *PythonCallbackObject::operator new(std::size_t size, void *ptr);

1404 15 operator delete 0 4 1866 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1405 12 validate_ptr 0 4 1866 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1406 12 set_function 0 4 1866 34 PythonCallbackObject::set_function 0 1 513 126
/**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */
60
void PythonCallbackObject::set_function(PyObject *function);

1407 12 get_function 0 4 1866 34 PythonCallbackObject::get_function 0 1 514 64
/**
 * Returns the function that is called for the callback.
 */
51
PyObject *PythonCallbackObject::get_function(void);

1408 14 get_class_type 0 4 1866 36 PythonCallbackObject::get_class_type 0 1 515 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1409 7 TimeVal 0 4 1867 16 TimeVal::TimeVal 0 1 516 10
/**
 *
 */
30
inline TimeVal::TimeVal(void);

1410 7 get_sec 0 4 1867 16 TimeVal::get_sec 0 1 517 10
/**
 *
 */
42
inline ulong TimeVal::get_sec(void) const;

1411 8 get_usec 0 4 1867 17 TimeVal::get_usec 0 1 518 10
/**
 *
 */
43
inline ulong TimeVal::get_usec(void) const;

1412 6 get_tv 0 20 1867 15 TimeVal::get_tv 0 1 520 32
getter for ulong TimeVal::tv[2];
35
ulong *TimeVal::get_tv(void) const;

1413 6 set_tv 0 36 1867 15 TimeVal::set_tv 0 1 519 32
setter for ulong TimeVal::tv[2];
37
void TimeVal::set_tv(ulong value[2]);

1414 8 ~TimeVal 0 4 1867 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1415 11 ClockObject 0 4 1871 24 ClockObject::ClockObject 0 2 521 522 22
/**
 *
 */

/**
 *
 */
82
ClockObject::ClockObject(void);
ClockObject::ClockObject(ClockObject const &copy);

1416 8 set_mode 0 4 1871 21 ClockObject::set_mode 0 1 523 1841
/**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */
51
void ClockObject::set_mode(ClockObject::Mode mode);

1417 8 get_mode 0 4 1871 21 ClockObject::get_mode 0 1 524 66
/**
 * Returns the current mode of the clock.  See set_mode().
 */
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1418 14 get_frame_time 0 4 1871 27 ClockObject::get_frame_time 0 1 525 350
/**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */
105
inline double ClockObject::get_frame_time(Thread *current_thread = ::Thread::get_current_thread()) const;

1419 13 get_real_time 0 4 1871 26 ClockObject::get_real_time 0 1 526 434
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */
53
inline double ClockObject::get_real_time(void) const;

1420 13 get_long_time 0 4 1871 26 ClockObject::get_long_time 0 1 527 440
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */
53
inline double ClockObject::get_long_time(void) const;

1421 5 reset 0 4 1871 18 ClockObject::reset 0 1 528 75
/**
 * Simultaneously resets both the time and the frame count to zero.
 */
37
inline void ClockObject::reset(void);

1422 13 set_real_time 0 4 1871 26 ClockObject::set_real_time 0 1 529 316
/**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */
45
void ClockObject::set_real_time(double time);

1423 14 set_frame_time 0 4 1871 27 ClockObject::set_frame_time 0 1 530 215
/**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */
103
void ClockObject::set_frame_time(double time, Thread *current_thread = ::Thread::get_current_thread());

1424 15 set_frame_count 0 4 1871 28 ClockObject::set_frame_count 0 1 531 132
/**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */
108
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = ::Thread::get_current_thread());

1425 15 get_frame_count 0 4 1871 28 ClockObject::get_frame_count 0 1 532 195
/**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */
103
inline int ClockObject::get_frame_count(Thread *current_thread = ::Thread::get_current_thread()) const;

1426 18 get_net_frame_rate 0 4 1871 31 ClockObject::get_net_frame_rate 0 1 533 245
/**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */
109
inline double ClockObject::get_net_frame_rate(Thread *current_thread = ::Thread::get_current_thread()) const;

1427 6 get_dt 0 4 1871 19 ClockObject::get_dt 0 1 534 130
/**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */
97
inline double ClockObject::get_dt(Thread *current_thread = ::Thread::get_current_thread()) const;

1428 6 set_dt 0 4 1871 19 ClockObject::set_dt 0 1 535 291
/**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */
36
void ClockObject::set_dt(double dt);

1429 14 set_frame_rate 0 4 1871 27 ClockObject::set_frame_rate 0 1 536 291
/**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */
52
void ClockObject::set_frame_rate(double frame_rate);

1430 10 get_max_dt 0 4 1871 23 ClockObject::get_max_dt 0 1 537 106
/**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */
50
inline double ClockObject::get_max_dt(void) const;

1431 10 set_max_dt 0 4 1871 23 ClockObject::set_max_dt 0 1 538 511
/**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */
51
inline void ClockObject::set_max_dt(double max_dt);

1432 18 get_degrade_factor 0 4 1871 31 ClockObject::get_degrade_factor 0 1 539 265
/**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
58
inline double ClockObject::get_degrade_factor(void) const;

1433 18 set_degrade_factor 0 4 1871 31 ClockObject::set_degrade_factor 0 1 540 262
/**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1434 31 set_average_frame_rate_interval 0 4 1871 44 ClockObject::set_average_frame_rate_interval 0 1 541 393
/**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1435 31 get_average_frame_rate_interval 0 4 1871 44 ClockObject::get_average_frame_rate_interval 0 1 542 162
/**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1436 22 get_average_frame_rate 0 4 1871 35 ClockObject::get_average_frame_rate 0 1 543 214
/**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */
106
double ClockObject::get_average_frame_rate(Thread *current_thread = ::Thread::get_current_thread()) const;

1437 22 get_max_frame_duration 0 4 1871 35 ClockObject::get_max_frame_duration 0 1 544 105
/**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */
106
double ClockObject::get_max_frame_duration(Thread *current_thread = ::Thread::get_current_thread()) const;

1438 25 calc_frame_rate_deviation 0 4 1871 38 ClockObject::calc_frame_rate_deviation 0 1 545 539
/**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */
109
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = ::Thread::get_current_thread()) const;

1439 4 tick 0 4 1871 17 ClockObject::tick 0 1 546 285
/**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */
80
void ClockObject::tick(Thread *current_thread = ::Thread::get_current_thread());

1440 15 sync_frame_time 0 4 1871 28 ClockObject::sync_frame_time 0 1 547 417
/**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */
91
void ClockObject::sync_frame_time(Thread *current_thread = ::Thread::get_current_thread());

1441 12 check_errors 0 4 1871 25 ClockObject::check_errors 0 1 548 322
/**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */
62
inline bool ClockObject::check_errors(Thread *current_thread);

1442 16 get_global_clock 0 4 1871 29 ClockObject::get_global_clock 0 1 549 159
/**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */
63
static inline ClockObject *ClockObject::get_global_clock(void);

1443 14 get_class_type 0 4 1871 27 ClockObject::get_class_type 0 1 550 0
52
static TypeHandle ClockObject::get_class_type(void);

1444 24 parse_color_space_string 0 1 0 24 parse_color_space_string 0 1 903 0
60
ColorSpace parse_color_space_string(std::string const &str);

1445 18 format_color_space 0 1 0 18 format_color_space 0 1 904 0
46
std::string format_color_space(ColorSpace cs);

1446 14 get_model_path 0 1 0 14 get_model_path 0 1 905 0
47
ConfigVariableSearchPath &get_model_path(void);

1447 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 906 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1448 9 cache_ref 0 4 1875 28 CopyOnWriteObject::cache_ref 0 1 551 62
/**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */
53
inline void CopyOnWriteObject::cache_ref(void) const;

1449 11 cache_unref 0 4 1875 30 CopyOnWriteObject::cache_unref 0 1 552 64
/**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */
55
inline bool CopyOnWriteObject::cache_unref(void) const;

1450 14 get_class_type 0 4 1875 33 CopyOnWriteObject::get_class_type 0 1 553 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1451 18 ~CopyOnWriteObject 0 4 1875 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1452 17 DatagramInputFile 0 4 1876 36 DatagramInputFile::DatagramInputFile 0 1 554 10
/**
 *
 */
50
inline DatagramInputFile::DatagramInputFile(void);

1453 4 open 0 4 1876 23 DatagramInputFile::open 0 3 555 556 557 432
/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */
201
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(istream &in, Filename const &filename = Filename());

1454 10 get_stream 0 4 1876 29 DatagramInputFile::get_stream 0 1 558 61
/**
 * Returns the istream represented by the input file.
 */
52
inline istream &DatagramInputFile::get_stream(void);

1455 5 close 0 4 1876 24 DatagramInputFile::close 0 1 559 98
/**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */
36
void DatagramInputFile::close(void);

1456 11 read_header 0 4 1876 30 DatagramInputFile::read_header 0 0 257
/**
 * Reads a sequence of bytes from the beginning of the datagram file.  This
 * may be called any number of times after the file has been opened and before
 * the first datagram is read.  It may not be called once the first datagram
 * has been read.
 */
80
bool DatagramInputFile::read_header(std::string &header, std::size_t num_bytes);

1457 13 DoubleBitMask 0 4 1877 45 DoubleBitMask< BitMaskNative >::DoubleBitMask 0 2 560 561 0
157
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(void);
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(DoubleBitMask< BitMaskNative > const &copy);

1458 10 operator = 0 4 1877 42 DoubleBitMask< BitMaskNative >::operator = 0 1 562 0
126
inline DoubleBitMask< BitMaskNative > &DoubleBitMask< BitMaskNative >::operator =(DoubleBitMask< BitMaskNative > const &copy);

1459 6 all_on 0 4 1877 38 DoubleBitMask< BitMaskNative >::all_on 0 1 563 0
90
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_on(void);

1460 7 all_off 0 4 1877 39 DoubleBitMask< BitMaskNative >::all_off 0 1 564 0
91
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_off(void);

1461 8 lower_on 0 4 1877 40 DoubleBitMask< BitMaskNative >::lower_on 0 1 565 0
99
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::lower_on(int on_bits);

1462 3 bit 0 4 1877 35 DoubleBitMask< BitMaskNative >::bit 0 1 566 0
92
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::bit(int index);

1463 5 range 0 4 1877 37 DoubleBitMask< BitMaskNative >::range 0 1 567 0
106
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::range(int low_bit, int size);

1464 14 ~DoubleBitMask 0 4 1877 46 DoubleBitMask< BitMaskNative >::~DoubleBitMask 0 0 0
60
inline DoubleBitMask< BitMaskNative >::~DoubleBitMask(void);

1465 16 has_max_num_bits 0 4 1877 48 DoubleBitMask< BitMaskNative >::has_max_num_bits 0 1 568 0
77
static constexpr bool DoubleBitMask< BitMaskNative >::has_max_num_bits(void);

1466 16 get_max_num_bits 0 4 1877 48 DoubleBitMask< BitMaskNative >::get_max_num_bits 0 1 569 0
76
static constexpr int DoubleBitMask< BitMaskNative >::get_max_num_bits(void);

1467 12 get_num_bits 0 4 1877 44 DoubleBitMask< BitMaskNative >::get_num_bits 0 1 570 0
72
static constexpr int DoubleBitMask< BitMaskNative >::get_num_bits(void);

1468 7 get_bit 0 4 1877 39 DoubleBitMask< BitMaskNative >::get_bit 0 1 571 0
69
inline bool DoubleBitMask< BitMaskNative >::get_bit(int index) const;

1469 7 set_bit 0 4 1877 39 DoubleBitMask< BitMaskNative >::set_bit 0 1 572 0
63
inline void DoubleBitMask< BitMaskNative >::set_bit(int index);

1470 9 clear_bit 0 4 1877 41 DoubleBitMask< BitMaskNative >::clear_bit 0 1 573 0
65
inline void DoubleBitMask< BitMaskNative >::clear_bit(int index);

1471 10 set_bit_to 0 4 1877 42 DoubleBitMask< BitMaskNative >::set_bit_to 0 1 574 0
78
inline void DoubleBitMask< BitMaskNative >::set_bit_to(int index, bool value);

1472 7 is_zero 0 4 1877 39 DoubleBitMask< BitMaskNative >::is_zero 0 1 575 0
64
inline bool DoubleBitMask< BitMaskNative >::is_zero(void) const;

1473 9 is_all_on 0 4 1877 41 DoubleBitMask< BitMaskNative >::is_all_on 0 1 576 0
66
inline bool DoubleBitMask< BitMaskNative >::is_all_on(void) const;

1474 7 extract 0 4 1877 39 DoubleBitMask< BitMaskNative >::extract 0 1 577 0
85
inline uint32_t DoubleBitMask< BitMaskNative >::extract(int low_bit, int size) const;

1475 5 store 0 4 1877 37 DoubleBitMask< BitMaskNative >::store 0 1 578 0
89
inline void DoubleBitMask< BitMaskNative >::store(uint32_t value, int low_bit, int size);

1476 10 has_any_of 0 4 1877 42 DoubleBitMask< BitMaskNative >::has_any_of 0 1 579 0
84
inline bool DoubleBitMask< BitMaskNative >::has_any_of(int low_bit, int size) const;

1477 10 has_all_of 0 4 1877 42 DoubleBitMask< BitMaskNative >::has_all_of 0 1 580 0
84
inline bool DoubleBitMask< BitMaskNative >::has_all_of(int low_bit, int size) const;

1478 9 set_range 0 4 1877 41 DoubleBitMask< BitMaskNative >::set_range 0 1 581 0
77
inline void DoubleBitMask< BitMaskNative >::set_range(int low_bit, int size);

1479 11 clear_range 0 4 1877 43 DoubleBitMask< BitMaskNative >::clear_range 0 1 582 0
79
inline void DoubleBitMask< BitMaskNative >::clear_range(int low_bit, int size);

1480 12 set_range_to 0 4 1877 44 DoubleBitMask< BitMaskNative >::set_range_to 0 1 583 0
92
inline void DoubleBitMask< BitMaskNative >::set_range_to(bool value, int low_bit, int size);

1481 15 get_num_on_bits 0 4 1877 47 DoubleBitMask< BitMaskNative >::get_num_on_bits 0 1 584 0
71
inline int DoubleBitMask< BitMaskNative >::get_num_on_bits(void) const;

1482 16 get_num_off_bits 0 4 1877 48 DoubleBitMask< BitMaskNative >::get_num_off_bits 0 1 585 0
72
inline int DoubleBitMask< BitMaskNative >::get_num_off_bits(void) const;

1483 17 get_lowest_on_bit 0 4 1877 49 DoubleBitMask< BitMaskNative >::get_lowest_on_bit 0 1 586 0
73
inline int DoubleBitMask< BitMaskNative >::get_lowest_on_bit(void) const;

1484 18 get_lowest_off_bit 0 4 1877 50 DoubleBitMask< BitMaskNative >::get_lowest_off_bit 0 1 587 0
74
inline int DoubleBitMask< BitMaskNative >::get_lowest_off_bit(void) const;

1485 18 get_highest_on_bit 0 4 1877 50 DoubleBitMask< BitMaskNative >::get_highest_on_bit 0 1 588 0
74
inline int DoubleBitMask< BitMaskNative >::get_highest_on_bit(void) const;

1486 19 get_highest_off_bit 0 4 1877 51 DoubleBitMask< BitMaskNative >::get_highest_off_bit 0 1 589 0
75
inline int DoubleBitMask< BitMaskNative >::get_highest_off_bit(void) const;

1487 29 get_next_higher_different_bit 0 4 1877 61 DoubleBitMask< BitMaskNative >::get_next_higher_different_bit 0 1 590 0
92
inline int DoubleBitMask< BitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1488 15 invert_in_place 0 4 1877 47 DoubleBitMask< BitMaskNative >::invert_in_place 0 1 591 0
66
inline void DoubleBitMask< BitMaskNative >::invert_in_place(void);

1489 18 has_bits_in_common 0 4 1877 50 DoubleBitMask< BitMaskNative >::has_bits_in_common 0 1 592 0
114
inline bool DoubleBitMask< BitMaskNative >::has_bits_in_common(DoubleBitMask< BitMaskNative > const &other) const;

1490 5 clear 0 4 1877 37 DoubleBitMask< BitMaskNative >::clear 0 1 593 0
56
inline void DoubleBitMask< BitMaskNative >::clear(void);

1491 6 output 0 4 1877 38 DoubleBitMask< BitMaskNative >::output 0 1 594 0
64
void DoubleBitMask< BitMaskNative >::output(ostream &out) const;

1492 13 output_binary 0 4 1877 45 DoubleBitMask< BitMaskNative >::output_binary 0 1 595 0
93
void DoubleBitMask< BitMaskNative >::output_binary(ostream &out, int spaces_every = 4) const;

1493 10 output_hex 0 4 1877 42 DoubleBitMask< BitMaskNative >::output_hex 0 1 596 0
90
void DoubleBitMask< BitMaskNative >::output_hex(ostream &out, int spaces_every = 4) const;

1494 5 write 0 4 1877 37 DoubleBitMask< BitMaskNative >::write 0 1 597 0
85
void DoubleBitMask< BitMaskNative >::write(ostream &out, int indent_level = 0) const;

1495 11 operator == 0 4 1877 43 DoubleBitMask< BitMaskNative >::operator == 0 1 598 0
107
inline bool DoubleBitMask< BitMaskNative >::operator ==(DoubleBitMask< BitMaskNative > const &other) const;

1496 11 operator != 0 4 1877 43 DoubleBitMask< BitMaskNative >::operator != 0 1 599 0
107
inline bool DoubleBitMask< BitMaskNative >::operator !=(DoubleBitMask< BitMaskNative > const &other) const;

1497 10 operator < 0 4 1877 42 DoubleBitMask< BitMaskNative >::operator < 0 1 600 0
106
inline bool DoubleBitMask< BitMaskNative >::operator <(DoubleBitMask< BitMaskNative > const &other) const;

1498 10 compare_to 0 4 1877 42 DoubleBitMask< BitMaskNative >::compare_to 0 1 601 0
105
inline int DoubleBitMask< BitMaskNative >::compare_to(DoubleBitMask< BitMaskNative > const &other) const;

1499 10 operator & 0 4 1877 42 DoubleBitMask< BitMaskNative >::operator & 0 1 602 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator &(DoubleBitMask< BitMaskNative > const &other) const;

1500 10 operator | 0 4 1877 42 DoubleBitMask< BitMaskNative >::operator | 0 1 603 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator |(DoubleBitMask< BitMaskNative > const &other) const;

1501 10 operator ^ 0 4 1877 42 DoubleBitMask< BitMaskNative >::operator ^ 0 1 604 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ^(DoubleBitMask< BitMaskNative > const &other) const;

1502 10 operator ~ 0 68 1877 42 DoubleBitMask< BitMaskNative >::operator ~ 0 1 605 0
93
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ~(void) const;

1503 11 operator << 0 4 1877 43 DoubleBitMask< BitMaskNative >::operator << 0 1 606 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator <<(int shift) const;

1504 11 operator >> 0 4 1877 43 DoubleBitMask< BitMaskNative >::operator >> 0 1 607 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator >>(int shift) const;

1505 11 operator &= 0 4 1877 43 DoubleBitMask< BitMaskNative >::operator &= 0 1 608 0
101
inline void DoubleBitMask< BitMaskNative >::operator &=(DoubleBitMask< BitMaskNative > const &other);

1506 11 operator |= 0 4 1877 43 DoubleBitMask< BitMaskNative >::operator |= 0 1 609 0
101
inline void DoubleBitMask< BitMaskNative >::operator |=(DoubleBitMask< BitMaskNative > const &other);

1507 11 operator ^= 0 4 1877 43 DoubleBitMask< BitMaskNative >::operator ^= 0 1 610 0
101
inline void DoubleBitMask< BitMaskNative >::operator ^=(DoubleBitMask< BitMaskNative > const &other);

1508 12 operator <<= 0 4 1877 44 DoubleBitMask< BitMaskNative >::operator <<= 0 1 611 0
68
inline void DoubleBitMask< BitMaskNative >::operator <<=(int shift);

1509 12 operator >>= 0 4 1877 44 DoubleBitMask< BitMaskNative >::operator >>= 0 1 612 0
68
inline void DoubleBitMask< BitMaskNative >::operator >>=(int shift);

1510 14 get_class_type 0 4 1877 46 DoubleBitMask< BitMaskNative >::get_class_type 0 1 613 0
71
static TypeHandle DoubleBitMask< BitMaskNative >::get_class_type(void);

1511 13 DoubleBitMask 0 4 1879 51 DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask 0 2 614 615 0
175
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(void);
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(DoubleBitMask< DoubleBitMaskNative > const &copy);

1512 10 operator = 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::operator = 0 1 616 0
144
inline DoubleBitMask< DoubleBitMaskNative > &DoubleBitMask< DoubleBitMaskNative >::operator =(DoubleBitMask< DoubleBitMaskNative > const &copy);

1513 6 all_on 0 4 1879 44 DoubleBitMask< DoubleBitMaskNative >::all_on 0 1 617 0
102
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_on(void);

1514 7 all_off 0 4 1879 45 DoubleBitMask< DoubleBitMaskNative >::all_off 0 1 618 0
103
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_off(void);

1515 8 lower_on 0 4 1879 46 DoubleBitMask< DoubleBitMaskNative >::lower_on 0 1 619 0
111
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::lower_on(int on_bits);

1516 3 bit 0 4 1879 41 DoubleBitMask< DoubleBitMaskNative >::bit 0 1 620 0
104
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::bit(int index);

1517 5 range 0 4 1879 43 DoubleBitMask< DoubleBitMaskNative >::range 0 1 621 0
118
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::range(int low_bit, int size);

1518 14 ~DoubleBitMask 0 4 1879 52 DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask 0 0 0
66
inline DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask(void);

1519 16 has_max_num_bits 0 4 1879 54 DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits 0 1 622 0
83
static constexpr bool DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits(void);

1520 16 get_max_num_bits 0 4 1879 54 DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits 0 1 623 0
82
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits(void);

1521 12 get_num_bits 0 4 1879 50 DoubleBitMask< DoubleBitMaskNative >::get_num_bits 0 1 624 0
78
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_num_bits(void);

1522 7 get_bit 0 4 1879 45 DoubleBitMask< DoubleBitMaskNative >::get_bit 0 1 625 0
75
inline bool DoubleBitMask< DoubleBitMaskNative >::get_bit(int index) const;

1523 7 set_bit 0 4 1879 45 DoubleBitMask< DoubleBitMaskNative >::set_bit 0 1 626 0
69
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit(int index);

1524 9 clear_bit 0 4 1879 47 DoubleBitMask< DoubleBitMaskNative >::clear_bit 0 1 627 0
71
inline void DoubleBitMask< DoubleBitMaskNative >::clear_bit(int index);

1525 10 set_bit_to 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::set_bit_to 0 1 628 0
84
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit_to(int index, bool value);

1526 7 is_zero 0 4 1879 45 DoubleBitMask< DoubleBitMaskNative >::is_zero 0 1 629 0
70
inline bool DoubleBitMask< DoubleBitMaskNative >::is_zero(void) const;

1527 9 is_all_on 0 4 1879 47 DoubleBitMask< DoubleBitMaskNative >::is_all_on 0 1 630 0
72
inline bool DoubleBitMask< DoubleBitMaskNative >::is_all_on(void) const;

1528 7 extract 0 4 1879 45 DoubleBitMask< DoubleBitMaskNative >::extract 0 1 631 0
91
inline uint32_t DoubleBitMask< DoubleBitMaskNative >::extract(int low_bit, int size) const;

1529 5 store 0 4 1879 43 DoubleBitMask< DoubleBitMaskNative >::store 0 1 632 0
95
inline void DoubleBitMask< DoubleBitMaskNative >::store(uint32_t value, int low_bit, int size);

1530 10 has_any_of 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::has_any_of 0 1 633 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_any_of(int low_bit, int size) const;

1531 10 has_all_of 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::has_all_of 0 1 634 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_all_of(int low_bit, int size) const;

1532 9 set_range 0 4 1879 47 DoubleBitMask< DoubleBitMaskNative >::set_range 0 1 635 0
83
inline void DoubleBitMask< DoubleBitMaskNative >::set_range(int low_bit, int size);

1533 11 clear_range 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::clear_range 0 1 636 0
85
inline void DoubleBitMask< DoubleBitMaskNative >::clear_range(int low_bit, int size);

1534 12 set_range_to 0 4 1879 50 DoubleBitMask< DoubleBitMaskNative >::set_range_to 0 1 637 0
98
inline void DoubleBitMask< DoubleBitMaskNative >::set_range_to(bool value, int low_bit, int size);

1535 15 get_num_on_bits 0 4 1879 53 DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits 0 1 638 0
77
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits(void) const;

1536 16 get_num_off_bits 0 4 1879 54 DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits 0 1 639 0
78
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits(void) const;

1537 17 get_lowest_on_bit 0 4 1879 55 DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit 0 1 640 0
79
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit(void) const;

1538 18 get_lowest_off_bit 0 4 1879 56 DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit 0 1 641 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit(void) const;

1539 18 get_highest_on_bit 0 4 1879 56 DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit 0 1 642 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit(void) const;

1540 19 get_highest_off_bit 0 4 1879 57 DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit 0 1 643 0
81
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit(void) const;

1541 29 get_next_higher_different_bit 0 4 1879 67 DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit 0 1 644 0
98
inline int DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1542 15 invert_in_place 0 4 1879 53 DoubleBitMask< DoubleBitMaskNative >::invert_in_place 0 1 645 0
72
inline void DoubleBitMask< DoubleBitMaskNative >::invert_in_place(void);

1543 18 has_bits_in_common 0 4 1879 56 DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common 0 1 646 0
126
inline bool DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1544 5 clear 0 4 1879 43 DoubleBitMask< DoubleBitMaskNative >::clear 0 1 647 0
62
inline void DoubleBitMask< DoubleBitMaskNative >::clear(void);

1545 6 output 0 4 1879 44 DoubleBitMask< DoubleBitMaskNative >::output 0 1 648 0
70
void DoubleBitMask< DoubleBitMaskNative >::output(ostream &out) const;

1546 13 output_binary 0 4 1879 51 DoubleBitMask< DoubleBitMaskNative >::output_binary 0 1 649 0
99
void DoubleBitMask< DoubleBitMaskNative >::output_binary(ostream &out, int spaces_every = 4) const;

1547 10 output_hex 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::output_hex 0 1 650 0
96
void DoubleBitMask< DoubleBitMaskNative >::output_hex(ostream &out, int spaces_every = 4) const;

1548 5 write 0 4 1879 43 DoubleBitMask< DoubleBitMaskNative >::write 0 1 651 0
91
void DoubleBitMask< DoubleBitMaskNative >::write(ostream &out, int indent_level = 0) const;

1549 11 operator == 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::operator == 0 1 652 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator ==(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1550 11 operator != 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::operator != 0 1 653 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator !=(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1551 10 operator < 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::operator < 0 1 654 0
118
inline bool DoubleBitMask< DoubleBitMaskNative >::operator <(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1552 10 compare_to 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::compare_to 0 1 655 0
117
inline int DoubleBitMask< DoubleBitMaskNative >::compare_to(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1553 10 operator & 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::operator & 0 1 656 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator &(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1554 10 operator | 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::operator | 0 1 657 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator |(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1555 10 operator ^ 0 4 1879 48 DoubleBitMask< DoubleBitMaskNative >::operator ^ 0 1 658 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ^(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1556 10 operator ~ 0 68 1879 48 DoubleBitMask< DoubleBitMaskNative >::operator ~ 0 1 659 0
105
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ~(void) const;

1557 11 operator << 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::operator << 0 1 660 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator <<(int shift) const;

1558 11 operator >> 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::operator >> 0 1 661 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator >>(int shift) const;

1559 11 operator &= 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::operator &= 0 1 662 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator &=(DoubleBitMask< DoubleBitMaskNative > const &other);

1560 11 operator |= 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::operator |= 0 1 663 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator |=(DoubleBitMask< DoubleBitMaskNative > const &other);

1561 11 operator ^= 0 4 1879 49 DoubleBitMask< DoubleBitMaskNative >::operator ^= 0 1 664 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator ^=(DoubleBitMask< DoubleBitMaskNative > const &other);

1562 12 operator <<= 0 4 1879 50 DoubleBitMask< DoubleBitMaskNative >::operator <<= 0 1 665 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator <<=(int shift);

1563 12 operator >>= 0 4 1879 50 DoubleBitMask< DoubleBitMaskNative >::operator >>= 0 1 666 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator >>=(int shift);

1564 14 get_class_type 0 4 1879 52 DoubleBitMask< DoubleBitMaskNative >::get_class_type 0 1 667 0
77
static TypeHandle DoubleBitMask< DoubleBitMaskNative >::get_class_type(void);

1565 9 ascii_key 0 4 1882 25 KeyboardButton::ascii_key 0 1 670 144
/**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */
69
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);

1566 5 space 0 4 1882 21 KeyboardButton::space 0 1 671 0
48
static ButtonHandle KeyboardButton::space(void);

1567 9 backspace 0 4 1882 25 KeyboardButton::backspace 0 1 672 0
52
static ButtonHandle KeyboardButton::backspace(void);

1568 3 tab 0 4 1882 19 KeyboardButton::tab 0 1 673 0
46
static ButtonHandle KeyboardButton::tab(void);

1569 5 enter 0 4 1882 21 KeyboardButton::enter 0 1 674 0
48
static ButtonHandle KeyboardButton::enter(void);

1570 6 escape 0 4 1882 22 KeyboardButton::escape 0 1 675 0
49
static ButtonHandle KeyboardButton::escape(void);

1571 2 f1 0 4 1882 18 KeyboardButton::f1 0 1 676 0
45
static ButtonHandle KeyboardButton::f1(void);

1572 2 f2 0 4 1882 18 KeyboardButton::f2 0 1 677 0
45
static ButtonHandle KeyboardButton::f2(void);

1573 2 f3 0 4 1882 18 KeyboardButton::f3 0 1 678 0
45
static ButtonHandle KeyboardButton::f3(void);

1574 2 f4 0 4 1882 18 KeyboardButton::f4 0 1 679 0
45
static ButtonHandle KeyboardButton::f4(void);

1575 2 f5 0 4 1882 18 KeyboardButton::f5 0 1 680 0
45
static ButtonHandle KeyboardButton::f5(void);

1576 2 f6 0 4 1882 18 KeyboardButton::f6 0 1 681 0
45
static ButtonHandle KeyboardButton::f6(void);

1577 2 f7 0 4 1882 18 KeyboardButton::f7 0 1 682 0
45
static ButtonHandle KeyboardButton::f7(void);

1578 2 f8 0 4 1882 18 KeyboardButton::f8 0 1 683 0
45
static ButtonHandle KeyboardButton::f8(void);

1579 2 f9 0 4 1882 18 KeyboardButton::f9 0 1 684 0
45
static ButtonHandle KeyboardButton::f9(void);

1580 3 f10 0 4 1882 19 KeyboardButton::f10 0 1 685 0
46
static ButtonHandle KeyboardButton::f10(void);

1581 3 f11 0 4 1882 19 KeyboardButton::f11 0 1 686 0
46
static ButtonHandle KeyboardButton::f11(void);

1582 3 f12 0 4 1882 19 KeyboardButton::f12 0 1 687 0
46
static ButtonHandle KeyboardButton::f12(void);

1583 3 f13 0 4 1882 19 KeyboardButton::f13 0 1 688 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1584 3 f14 0 4 1882 19 KeyboardButton::f14 0 1 689 0
46
static ButtonHandle KeyboardButton::f14(void);

1585 3 f15 0 4 1882 19 KeyboardButton::f15 0 1 690 0
46
static ButtonHandle KeyboardButton::f15(void);

1586 3 f16 0 4 1882 19 KeyboardButton::f16 0 1 691 0
46
static ButtonHandle KeyboardButton::f16(void);

1587 4 left 0 4 1882 20 KeyboardButton::left 0 1 692 0
47
static ButtonHandle KeyboardButton::left(void);

1588 5 right 0 4 1882 21 KeyboardButton::right 0 1 693 0
48
static ButtonHandle KeyboardButton::right(void);

1589 2 up 0 4 1882 18 KeyboardButton::up 0 1 694 0
45
static ButtonHandle KeyboardButton::up(void);

1590 4 down 0 4 1882 20 KeyboardButton::down 0 1 695 0
47
static ButtonHandle KeyboardButton::down(void);

1591 7 page_up 0 4 1882 23 KeyboardButton::page_up 0 1 696 0
50
static ButtonHandle KeyboardButton::page_up(void);

1592 9 page_down 0 4 1882 25 KeyboardButton::page_down 0 1 697 0
52
static ButtonHandle KeyboardButton::page_down(void);

1593 4 home 0 4 1882 20 KeyboardButton::home 0 1 698 0
47
static ButtonHandle KeyboardButton::home(void);

1594 3 end 0 4 1882 19 KeyboardButton::end 0 1 699 0
46
static ButtonHandle KeyboardButton::end(void);

1595 6 insert 0 4 1882 22 KeyboardButton::insert 0 1 700 0
49
static ButtonHandle KeyboardButton::insert(void);

1596 3 del 0 4 1882 19 KeyboardButton::del 0 1 701 27
// delete is a C++ keyword.
46
static ButtonHandle KeyboardButton::del(void);

1597 4 help 0 4 1882 20 KeyboardButton::help 0 1 702 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1598 4 menu 0 4 1882 20 KeyboardButton::menu 0 1 703 0
47
static ButtonHandle KeyboardButton::menu(void);

1599 5 shift 0 4 1882 21 KeyboardButton::shift 0 1 704 0
48
static ButtonHandle KeyboardButton::shift(void);

1600 7 control 0 4 1882 23 KeyboardButton::control 0 1 705 0
50
static ButtonHandle KeyboardButton::control(void);

1601 3 alt 0 4 1882 19 KeyboardButton::alt 0 1 706 0
46
static ButtonHandle KeyboardButton::alt(void);

1602 4 meta 0 4 1882 20 KeyboardButton::meta 0 1 707 0
47
static ButtonHandle KeyboardButton::meta(void);

1603 9 caps_lock 0 4 1882 25 KeyboardButton::caps_lock 0 1 708 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1604 10 shift_lock 0 4 1882 26 KeyboardButton::shift_lock 0 1 709 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1605 8 num_lock 0 4 1882 24 KeyboardButton::num_lock 0 1 710 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1606 11 scroll_lock 0 4 1882 27 KeyboardButton::scroll_lock 0 1 711 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1607 12 print_screen 0 4 1882 28 KeyboardButton::print_screen 0 1 712 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1608 5 pause 0 4 1882 21 KeyboardButton::pause 0 1 713 0
48
static ButtonHandle KeyboardButton::pause(void);

1609 6 lshift 0 4 1882 22 KeyboardButton::lshift 0 1 714 0
49
static ButtonHandle KeyboardButton::lshift(void);

1610 6 rshift 0 4 1882 22 KeyboardButton::rshift 0 1 715 0
49
static ButtonHandle KeyboardButton::rshift(void);

1611 8 lcontrol 0 4 1882 24 KeyboardButton::lcontrol 0 1 716 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1612 8 rcontrol 0 4 1882 24 KeyboardButton::rcontrol 0 1 717 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1613 4 lalt 0 4 1882 20 KeyboardButton::lalt 0 1 718 0
47
static ButtonHandle KeyboardButton::lalt(void);

1614 4 ralt 0 4 1882 20 KeyboardButton::ralt 0 1 719 0
47
static ButtonHandle KeyboardButton::ralt(void);

1615 5 lmeta 0 4 1882 21 KeyboardButton::lmeta 0 1 720 0
48
static ButtonHandle KeyboardButton::lmeta(void);

1616 5 rmeta 0 4 1882 21 KeyboardButton::rmeta 0 1 721 0
48
static ButtonHandle KeyboardButton::rmeta(void);

1617 14 KeyboardButton 0 4 1882 30 KeyboardButton::KeyboardButton 0 2 668 669 0
127
inline KeyboardButton::KeyboardButton(void) = default;
inline KeyboardButton::KeyboardButton(KeyboardButton const &) = default;

1618 15 ~KeyboardButton 0 4 1882 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1619 13 load_prc_file 0 1 0 13 load_prc_file 0 1 907 1206
/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */

/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */
52
ConfigPage *load_prc_file(Filename const &filename);

1620 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 908 794
/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */

/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */
81
ConfigPage *load_prc_file_data(std::string const &name, std::string const &data);

1621 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 909 0
39
bool unload_prc_file(ConfigPage *page);

1622 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 910 0
39
void hash_prc_variables(HashVal &hash);

1623 15 ModifierButtons 0 4 1883 32 ModifierButtons::ModifierButtons 0 2 722 723 22
/**
 *
 */

/**
 *
 */
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1624 16 ~ModifierButtons 0 4 1883 33 ModifierButtons::~ModifierButtons 0 0 10
/**
 *
 */
40
ModifierButtons::~ModifierButtons(void);

1625 10 operator = 0 4 1883 27 ModifierButtons::operator = 0 1 724 0
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1626 11 operator == 0 4 1883 28 ModifierButtons::operator == 0 1 725 0
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1627 11 operator != 0 4 1883 28 ModifierButtons::operator != 0 1 726 0
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1628 10 operator < 0 4 1883 27 ModifierButtons::operator < 0 1 727 0
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1629 10 operator & 0 4 1883 27 ModifierButtons::operator & 0 1 728 0
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1630 10 operator | 0 4 1883 27 ModifierButtons::operator | 0 1 729 0
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1631 11 operator &= 0 4 1883 28 ModifierButtons::operator &= 0 1 730 0
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1632 11 operator |= 0 4 1883 28 ModifierButtons::operator |= 0 1 731 0
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1633 15 set_button_list 0 4 1883 32 ModifierButtons::set_button_list 0 1 732 374
/**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1634 7 matches 0 4 1883 24 ModifierButtons::matches 0 1 733 232
/**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1635 10 add_button 0 4 1883 27 ModifierButtons::add_button 0 1 734 248
/**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */
54
bool ModifierButtons::add_button(ButtonHandle button);

1636 10 has_button 0 4 1883 27 ModifierButtons::has_button 0 1 735 109
/**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1637 13 remove_button 0 4 1883 30 ModifierButtons::remove_button 0 1 736 313
/**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */
57
bool ModifierButtons::remove_button(ButtonHandle button);

1638 15 get_num_buttons 0 4 1883 32 ModifierButtons::get_num_buttons 0 1 737 143
/**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */
56
inline int ModifierButtons::get_num_buttons(void) const;

1639 10 get_button 0 4 1883 27 ModifierButtons::get_button 0 1 738 185
/**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1640 11 button_down 0 4 1883 28 ModifierButtons::button_down 0 1 739 305
/**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
55
bool ModifierButtons::button_down(ButtonHandle button);

1641 9 button_up 0 4 1883 26 ModifierButtons::button_up 0 1 740 306
/**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
53
bool ModifierButtons::button_up(ButtonHandle button);

1642 14 all_buttons_up 0 4 1883 31 ModifierButtons::all_buttons_up 0 1 741 66
/**
 * Marks all monitored buttons as being in the "up" state.
 */
50
inline void ModifierButtons::all_buttons_up(void);

1643 7 is_down 0 4 1883 24 ModifierButtons::is_down 0 2 742 743 264
/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */

/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1644 11 is_any_down 0 4 1883 28 ModifierButtons::is_any_down 0 1 744 109
/**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */
53
inline bool ModifierButtons::is_any_down(void) const;

1645 10 get_prefix 0 4 1883 27 ModifierButtons::get_prefix 0 1 745 150
/**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */
52
std::string ModifierButtons::get_prefix(void) const;

1646 6 output 0 4 1883 23 ModifierButtons::output 0 1 746 69
/**
 * Writes a one-line summary of the buttons known to be down.
 */
49
void ModifierButtons::output(ostream &out) const;

1647 5 write 0 4 1883 22 ModifierButtons::write 0 1 747 123
/**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */
48
void ModifierButtons::write(ostream &out) const;

1648 6 button 0 4 1884 19 MouseButton::button 0 1 750 166
/**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */
59
static ButtonHandle MouseButton::button(int button_number);

1649 3 one 0 4 1884 16 MouseButton::one 0 1 751 75
/**
 * Returns the ButtonHandle associated with the first mouse button.
 */
43
static ButtonHandle MouseButton::one(void);

1650 3 two 0 4 1884 16 MouseButton::two 0 1 752 76
/**
 * Returns the ButtonHandle associated with the second mouse button.
 */
43
static ButtonHandle MouseButton::two(void);

1651 5 three 0 4 1884 18 MouseButton::three 0 1 753 75
/**
 * Returns the ButtonHandle associated with the third mouse button.
 */
45
static ButtonHandle MouseButton::three(void);

1652 4 four 0 4 1884 17 MouseButton::four 0 1 754 76
/**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */
44
static ButtonHandle MouseButton::four(void);

1653 4 five 0 4 1884 17 MouseButton::five 0 1 755 75
/**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */
44
static ButtonHandle MouseButton::five(void);

1654 8 wheel_up 0 4 1884 21 MouseButton::wheel_up 0 1 756 98
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */
48
static ButtonHandle MouseButton::wheel_up(void);

1655 10 wheel_down 0 4 1884 23 MouseButton::wheel_down 0 1 757 100
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */
50
static ButtonHandle MouseButton::wheel_down(void);

1656 10 wheel_left 0 4 1884 23 MouseButton::wheel_left 0 1 758 148
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
50
static ButtonHandle MouseButton::wheel_left(void);

1657 11 wheel_right 0 4 1884 24 MouseButton::wheel_right 0 1 759 149
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
51
static ButtonHandle MouseButton::wheel_right(void);

1658 15 is_mouse_button 0 4 1884 28 MouseButton::is_mouse_button 0 1 760 117
/**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1659 11 MouseButton 0 4 1884 24 MouseButton::MouseButton 0 2 748 749 0
112
inline MouseButton::MouseButton(void) = default;
inline MouseButton::MouseButton(MouseButton const &) = default;

1660 12 ~MouseButton 0 4 1884 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1661 9 MouseData 0 4 1885 20 MouseData::MouseData 0 2 761 762 22
/**
 *
 */

/**
 *
 */
86
inline MouseData::MouseData(void);
inline MouseData::MouseData(MouseData const &copy);

1662 10 operator = 0 4 1885 21 MouseData::operator = 0 1 763 0
57
inline void MouseData::operator =(MouseData const &copy);

1663 5 get_x 0 4 1885 16 MouseData::get_x 0 1 764 10
/**
 *
 */
43
inline double MouseData::get_x(void) const;

1664 5 get_y 0 4 1885 16 MouseData::get_y 0 1 765 10
/**
 *
 */
43
inline double MouseData::get_y(void) const;

1665 13 get_in_window 0 4 1885 24 MouseData::get_in_window 0 1 766 10
/**
 *
 */
49
inline bool MouseData::get_in_window(void) const;

1666 6 output 0 4 1885 17 MouseData::output 0 1 767 10
/**
 *
 */
43
void MouseData::output(ostream &out) const;

1667 10 ~MouseData 0 4 1885 21 MouseData::~MouseData 0 0 0
28
MouseData::~MouseData(void);

1668 18 get_node_ref_count 0 4 1886 44 NodeCachedReferenceCount::get_node_ref_count 0 1 768 47
/**
 * Returns the current reference count.
 */
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1669 8 node_ref 0 4 1886 34 NodeCachedReferenceCount::node_ref 0 1 769 349
/**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1670 10 node_unref 0 4 1886 36 NodeCachedReferenceCount::node_unref 0 1 770 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1671 24 test_ref_count_integrity 0 4 1886 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 771 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1672 19 get_referenced_bits 0 4 1886 45 NodeCachedReferenceCount::get_referenced_bits 0 1 772 293
/**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1673 14 get_class_type 0 4 1886 40 NodeCachedReferenceCount::get_class_type 0 1 773 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1674 11 SparseArray 0 4 1888 24 SparseArray::SparseArray 0 3 774 775 776 22
/**
 *
 */

/**
 *
 */
150
inline SparseArray::SparseArray(void);
SparseArray::SparseArray(BitArray const &from);
inline SparseArray::SparseArray(SparseArray const &) = default;

1675 6 all_on 0 4 1888 19 SparseArray::all_on 0 1 777 72
/**
 * Returns a SparseArray with an infinite array of bits, all on.
 */
52
static inline SparseArray SparseArray::all_on(void);

1676 7 all_off 0 4 1888 20 SparseArray::all_off 0 1 778 56
/**
 * Returns a SparseArray whose bits are all off.
 */
53
static inline SparseArray SparseArray::all_off(void);

1677 8 lower_on 0 4 1888 21 SparseArray::lower_on 0 1 779 65
/**
 * Returns a SparseArray whose lower on_bits bits are on.
 */
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1678 3 bit 0 4 1888 16 SparseArray::bit 0 1 780 64
/**
 * Returns a SparseArray with only the indicated bit on.
 */
54
static inline SparseArray SparseArray::bit(int index);

1679 5 range 0 4 1888 18 SparseArray::range 0 1 781 79
/**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1680 16 has_max_num_bits 0 4 1888 29 SparseArray::has_max_num_bits 0 1 782 393
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */
55
static inline bool SparseArray::has_max_num_bits(void);

1681 16 get_max_num_bits 0 4 1888 29 SparseArray::get_max_num_bits 0 1 783 428
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */
54
static inline int SparseArray::get_max_num_bits(void);

1682 12 get_num_bits 0 4 1888 25 SparseArray::get_num_bits 0 1 784 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
49
inline int SparseArray::get_num_bits(void) const;

1683 7 get_bit 0 4 1888 20 SparseArray::get_bit 0 1 785 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
50
inline bool SparseArray::get_bit(int index) const;

1684 7 set_bit 0 4 1888 20 SparseArray::set_bit 0 1 786 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
44
inline void SparseArray::set_bit(int index);

1685 9 clear_bit 0 4 1888 22 SparseArray::clear_bit 0 1 787 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
46
inline void SparseArray::clear_bit(int index);

1686 10 set_bit_to 0 4 1888 23 SparseArray::set_bit_to 0 1 788 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
59
inline void SparseArray::set_bit_to(int index, bool value);

1687 16 get_highest_bits 0 4 1888 29 SparseArray::get_highest_bits 0 1 789 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
54
inline bool SparseArray::get_highest_bits(void) const;

1688 7 is_zero 0 4 1888 20 SparseArray::is_zero 0 1 790 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
45
inline bool SparseArray::is_zero(void) const;

1689 9 is_all_on 0 4 1888 22 SparseArray::is_all_on 0 1 791 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
47
inline bool SparseArray::is_all_on(void) const;

1690 10 has_any_of 0 4 1888 23 SparseArray::has_any_of 0 1 792 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1691 10 has_all_of 0 4 1888 23 SparseArray::has_all_of 0 1 793 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1692 9 set_range 0 4 1888 22 SparseArray::set_range 0 1 794 47
/**
 * Sets the indicated range of bits on.
 */
58
inline void SparseArray::set_range(int low_bit, int size);

1693 11 clear_range 0 4 1888 24 SparseArray::clear_range 0 1 795 48
/**
 * Sets the indicated range of bits off.
 */
60
inline void SparseArray::clear_range(int low_bit, int size);

1694 12 set_range_to 0 4 1888 25 SparseArray::set_range_to 0 1 796 64
/**
 * Sets the indicated range of bits to either on or off.
 */
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1695 15 get_num_on_bits 0 4 1888 28 SparseArray::get_num_on_bits 0 1 797 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
45
int SparseArray::get_num_on_bits(void) const;

1696 16 get_num_off_bits 0 4 1888 29 SparseArray::get_num_off_bits 0 1 798 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
46
int SparseArray::get_num_off_bits(void) const;

1697 17 get_lowest_on_bit 0 4 1888 30 SparseArray::get_lowest_on_bit 0 1 799 146
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */
47
int SparseArray::get_lowest_on_bit(void) const;

1698 18 get_lowest_off_bit 0 4 1888 31 SparseArray::get_lowest_off_bit 0 1 800 146
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */
48
int SparseArray::get_lowest_off_bit(void) const;

1699 18 get_highest_on_bit 0 4 1888 31 SparseArray::get_highest_on_bit 0 1 801 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
48
int SparseArray::get_highest_on_bit(void) const;

1700 19 get_highest_off_bit 0 4 1888 32 SparseArray::get_highest_off_bit 0 1 802 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
49
int SparseArray::get_highest_off_bit(void) const;

1701 29 get_next_higher_different_bit 0 4 1888 42 SparseArray::get_next_higher_different_bit 0 1 803 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1702 15 invert_in_place 0 4 1888 28 SparseArray::invert_in_place 0 1 804 93
/**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */
47
inline void SparseArray::invert_in_place(void);

1703 18 has_bits_in_common 0 4 1888 31 SparseArray::has_bits_in_common 0 1 805 181
/**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1704 5 clear 0 4 1888 18 SparseArray::clear 0 1 806 52
/**
 * Sets all the bits in the SparseArray off.
 */
37
inline void SparseArray::clear(void);

1705 6 output 0 4 1888 19 SparseArray::output 0 1 807 10
/**
 *
 */
45
void SparseArray::output(ostream &out) const;

1706 11 operator == 0 4 1888 24 SparseArray::operator == 0 1 808 0
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1707 11 operator != 0 4 1888 24 SparseArray::operator != 0 1 809 0
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1708 10 operator < 0 4 1888 23 SparseArray::operator < 0 1 810 0
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1709 10 compare_to 0 4 1888 23 SparseArray::compare_to 0 1 811 242
/**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */
60
int SparseArray::compare_to(SparseArray const &other) const;

1710 10 operator & 0 4 1888 23 SparseArray::operator & 0 1 812 0
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1711 10 operator | 0 4 1888 23 SparseArray::operator | 0 1 813 0
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1712 10 operator ^ 0 4 1888 23 SparseArray::operator ^ 0 1 814 0
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1713 10 operator ~ 0 68 1888 23 SparseArray::operator ~ 0 1 815 0
55
inline SparseArray SparseArray::operator ~(void) const;

1714 11 operator << 0 4 1888 24 SparseArray::operator << 0 1 816 0
61
inline SparseArray SparseArray::operator <<(int shift) const;

1715 11 operator >> 0 4 1888 24 SparseArray::operator >> 0 1 817 0
61
inline SparseArray SparseArray::operator >>(int shift) const;

1716 11 operator &= 0 4 1888 24 SparseArray::operator &= 0 1 818 0
56
void SparseArray::operator &=(SparseArray const &other);

1717 11 operator |= 0 4 1888 24 SparseArray::operator |= 0 1 819 0
56
void SparseArray::operator |=(SparseArray const &other);

1718 11 operator ^= 0 4 1888 24 SparseArray::operator ^= 0 1 820 0
56
void SparseArray::operator ^=(SparseArray const &other);

1719 12 operator <<= 0 4 1888 25 SparseArray::operator <<= 0 1 821 0
49
inline void SparseArray::operator <<=(int shift);

1720 12 operator >>= 0 4 1888 25 SparseArray::operator >>= 0 1 822 0
49
inline void SparseArray::operator >>=(int shift);

1721 10 is_inverse 0 4 1888 23 SparseArray::is_inverse 0 1 823 330
/**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */
48
inline bool SparseArray::is_inverse(void) const;

1722 17 get_num_subranges 0 4 1888 30 SparseArray::get_num_subranges 0 1 824 237
/**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */
62
inline std::size_t SparseArray::get_num_subranges(void) const;

1723 18 get_subrange_begin 0 4 1888 31 SparseArray::get_subrange_begin 0 1 825 94
/**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */
64
inline int SparseArray::get_subrange_begin(std::size_t n) const;

1724 16 get_subrange_end 0 4 1888 29 SparseArray::get_subrange_end 0 1 826 104
/**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */
62
inline int SparseArray::get_subrange_end(std::size_t n) const;

1725 14 get_class_type 0 4 1888 27 SparseArray::get_class_type 0 1 827 0
52
static TypeHandle SparseArray::get_class_type(void);

1726 12 ~SparseArray 0 4 1888 25 SparseArray::~SparseArray 0 0 0
32
SparseArray::~SparseArray(void);

1727 14 get_value_type 0 6 1889 30 ParamValueBase::get_value_type 0 1 828 52
/**
 * Returns the type of the underlying value.
 */
69
virtual inline TypeHandle ParamValueBase::get_value_type(void) const;

1728 6 output 0 6 1889 22 ParamValueBase::output 0 1 829 0
60
virtual void ParamValueBase::output(ostream &out) const = 0;

1729 14 get_class_type 0 4 1889 30 ParamValueBase::get_class_type 0 1 830 0
55
static TypeHandle ParamValueBase::get_class_type(void);

1730 18 ParamTypedRefCount 0 4 1890 38 ParamTypedRefCount::ParamTypedRefCount 0 1 831 10
/**
 *
 */
80
inline ParamTypedRefCount::ParamTypedRefCount(TypedReferenceCount const *value);

1731 9 get_value 0 4 1890 29 ParamTypedRefCount::get_value 0 1 832 55
/**
 * Retrieves the value stored in the parameter.
 */
70
inline TypedReferenceCount *ParamTypedRefCount::get_value(void) const;

1732 14 get_class_type 0 4 1890 34 ParamTypedRefCount::get_class_type 0 1 833 0
59
static TypeHandle ParamTypedRefCount::get_class_type(void);

1733 10 ParamValue 0 4 1892 32 ParamValue< string >::ParamValue 0 1 834 0
66
inline ParamValue< string >::ParamValue(std::string const &value);

1734 9 set_value 0 4 1892 31 ParamValue< string >::set_value 0 1 835 0
134
inline void ParamValue< string >::set_value(std::string const &value);
inline void ParamValue< string >::set_value(Type const &value);

1735 9 get_value 0 4 1892 31 ParamValue< string >::get_value 0 1 836 0
70
inline std::string const &ParamValue< string >::get_value(void) const;

1736 14 get_class_type 0 4 1892 36 ParamValue< string >::get_class_type 0 1 837 0
61
static TypeHandle ParamValue< string >::get_class_type(void);

1737 10 ParamValue 0 4 1895 33 ParamValue< wstring >::ParamValue 0 1 838 0
68
inline ParamValue< wstring >::ParamValue(std::wstring const &value);

1738 9 set_value 0 4 1895 32 ParamValue< wstring >::set_value 0 1 839 0
137
inline void ParamValue< wstring >::set_value(std::wstring const &value);
inline void ParamValue< wstring >::set_value(Type const &value);

1739 9 get_value 0 4 1895 32 ParamValue< wstring >::get_value 0 1 840 0
72
inline std::wstring const &ParamValue< wstring >::get_value(void) const;

1740 14 get_class_type 0 4 1895 37 ParamValue< wstring >::get_class_type 0 1 841 0
62
static TypeHandle ParamValue< wstring >::get_class_type(void);

1741 10 ParamValue 0 4 1897 36 ParamValue< LVecBase2d >::ParamValue 0 1 842 0
69
inline ParamValue< LVecBase2d >::ParamValue(LVecBase2d const &value);

1742 9 set_value 0 4 1897 35 ParamValue< LVecBase2d >::set_value 0 1 843 0
141
inline void ParamValue< LVecBase2d >::set_value(LVecBase2d const &value);
inline void ParamValue< LVecBase2d >::set_value(Type const &value);

1743 9 get_value 0 4 1897 35 ParamValue< LVecBase2d >::get_value 0 1 844 0
73
inline LVecBase2d const &ParamValue< LVecBase2d >::get_value(void) const;

1744 14 get_class_type 0 4 1897 40 ParamValue< LVecBase2d >::get_class_type 0 1 845 0
65
static TypeHandle ParamValue< LVecBase2d >::get_class_type(void);

1745 10 ParamValue 0 4 1899 36 ParamValue< LVecBase2f >::ParamValue 0 1 846 0
69
inline ParamValue< LVecBase2f >::ParamValue(LVecBase2f const &value);

1746 9 set_value 0 4 1899 35 ParamValue< LVecBase2f >::set_value 0 1 847 0
141
inline void ParamValue< LVecBase2f >::set_value(LVecBase2f const &value);
inline void ParamValue< LVecBase2f >::set_value(Type const &value);

1747 9 get_value 0 4 1899 35 ParamValue< LVecBase2f >::get_value 0 1 848 0
73
inline LVecBase2f const &ParamValue< LVecBase2f >::get_value(void) const;

1748 14 get_class_type 0 4 1899 40 ParamValue< LVecBase2f >::get_class_type 0 1 849 0
65
static TypeHandle ParamValue< LVecBase2f >::get_class_type(void);

1749 10 ParamValue 0 4 1901 36 ParamValue< LVecBase2i >::ParamValue 0 1 850 0
69
inline ParamValue< LVecBase2i >::ParamValue(LVecBase2i const &value);

1750 9 set_value 0 4 1901 35 ParamValue< LVecBase2i >::set_value 0 1 851 0
141
inline void ParamValue< LVecBase2i >::set_value(LVecBase2i const &value);
inline void ParamValue< LVecBase2i >::set_value(Type const &value);

1751 9 get_value 0 4 1901 35 ParamValue< LVecBase2i >::get_value 0 1 852 0
73
inline LVecBase2i const &ParamValue< LVecBase2i >::get_value(void) const;

1752 14 get_class_type 0 4 1901 40 ParamValue< LVecBase2i >::get_class_type 0 1 853 0
65
static TypeHandle ParamValue< LVecBase2i >::get_class_type(void);

1753 10 ParamValue 0 4 1903 36 ParamValue< LVecBase3d >::ParamValue 0 1 854 0
69
inline ParamValue< LVecBase3d >::ParamValue(LVecBase3d const &value);

1754 9 set_value 0 4 1903 35 ParamValue< LVecBase3d >::set_value 0 1 855 0
141
inline void ParamValue< LVecBase3d >::set_value(LVecBase3d const &value);
inline void ParamValue< LVecBase3d >::set_value(Type const &value);

1755 9 get_value 0 4 1903 35 ParamValue< LVecBase3d >::get_value 0 1 856 0
73
inline LVecBase3d const &ParamValue< LVecBase3d >::get_value(void) const;

1756 14 get_class_type 0 4 1903 40 ParamValue< LVecBase3d >::get_class_type 0 1 857 0
65
static TypeHandle ParamValue< LVecBase3d >::get_class_type(void);

1757 10 ParamValue 0 4 1905 36 ParamValue< LVecBase3f >::ParamValue 0 1 858 0
69
inline ParamValue< LVecBase3f >::ParamValue(LVecBase3f const &value);

1758 9 set_value 0 4 1905 35 ParamValue< LVecBase3f >::set_value 0 1 859 0
141
inline void ParamValue< LVecBase3f >::set_value(LVecBase3f const &value);
inline void ParamValue< LVecBase3f >::set_value(Type const &value);

1759 9 get_value 0 4 1905 35 ParamValue< LVecBase3f >::get_value 0 1 860 0
73
inline LVecBase3f const &ParamValue< LVecBase3f >::get_value(void) const;

1760 14 get_class_type 0 4 1905 40 ParamValue< LVecBase3f >::get_class_type 0 1 861 0
65
static TypeHandle ParamValue< LVecBase3f >::get_class_type(void);

1761 10 ParamValue 0 4 1907 36 ParamValue< LVecBase3i >::ParamValue 0 1 862 0
69
inline ParamValue< LVecBase3i >::ParamValue(LVecBase3i const &value);

1762 9 set_value 0 4 1907 35 ParamValue< LVecBase3i >::set_value 0 1 863 0
141
inline void ParamValue< LVecBase3i >::set_value(LVecBase3i const &value);
inline void ParamValue< LVecBase3i >::set_value(Type const &value);

1763 9 get_value 0 4 1907 35 ParamValue< LVecBase3i >::get_value 0 1 864 0
73
inline LVecBase3i const &ParamValue< LVecBase3i >::get_value(void) const;

1764 14 get_class_type 0 4 1907 40 ParamValue< LVecBase3i >::get_class_type 0 1 865 0
65
static TypeHandle ParamValue< LVecBase3i >::get_class_type(void);

1765 10 ParamValue 0 4 1909 36 ParamValue< LVecBase4d >::ParamValue 0 1 866 0
69
inline ParamValue< LVecBase4d >::ParamValue(LVecBase4d const &value);

1766 9 set_value 0 4 1909 35 ParamValue< LVecBase4d >::set_value 0 1 867 0
141
inline void ParamValue< LVecBase4d >::set_value(LVecBase4d const &value);
inline void ParamValue< LVecBase4d >::set_value(Type const &value);

1767 9 get_value 0 4 1909 35 ParamValue< LVecBase4d >::get_value 0 1 868 0
73
inline LVecBase4d const &ParamValue< LVecBase4d >::get_value(void) const;

1768 14 get_class_type 0 4 1909 40 ParamValue< LVecBase4d >::get_class_type 0 1 869 0
65
static TypeHandle ParamValue< LVecBase4d >::get_class_type(void);

1769 10 ParamValue 0 4 1911 36 ParamValue< LVecBase4f >::ParamValue 0 1 870 0
69
inline ParamValue< LVecBase4f >::ParamValue(LVecBase4f const &value);

1770 9 set_value 0 4 1911 35 ParamValue< LVecBase4f >::set_value 0 1 871 0
141
inline void ParamValue< LVecBase4f >::set_value(LVecBase4f const &value);
inline void ParamValue< LVecBase4f >::set_value(Type const &value);

1771 9 get_value 0 4 1911 35 ParamValue< LVecBase4f >::get_value 0 1 872 0
73
inline LVecBase4f const &ParamValue< LVecBase4f >::get_value(void) const;

1772 14 get_class_type 0 4 1911 40 ParamValue< LVecBase4f >::get_class_type 0 1 873 0
65
static TypeHandle ParamValue< LVecBase4f >::get_class_type(void);

1773 10 ParamValue 0 4 1913 36 ParamValue< LVecBase4i >::ParamValue 0 1 874 0
69
inline ParamValue< LVecBase4i >::ParamValue(LVecBase4i const &value);

1774 9 set_value 0 4 1913 35 ParamValue< LVecBase4i >::set_value 0 1 875 0
141
inline void ParamValue< LVecBase4i >::set_value(LVecBase4i const &value);
inline void ParamValue< LVecBase4i >::set_value(Type const &value);

1775 9 get_value 0 4 1913 35 ParamValue< LVecBase4i >::get_value 0 1 876 0
73
inline LVecBase4i const &ParamValue< LVecBase4i >::get_value(void) const;

1776 14 get_class_type 0 4 1913 40 ParamValue< LVecBase4i >::get_class_type 0 1 877 0
65
static TypeHandle ParamValue< LVecBase4i >::get_class_type(void);

1777 10 ParamValue 0 4 1915 35 ParamValue< LMatrix3d >::ParamValue 0 1 878 0
67
inline ParamValue< LMatrix3d >::ParamValue(LMatrix3d const &value);

1778 9 set_value 0 4 1915 34 ParamValue< LMatrix3d >::set_value 0 1 879 0
138
inline void ParamValue< LMatrix3d >::set_value(LMatrix3d const &value);
inline void ParamValue< LMatrix3d >::set_value(Type const &value);

1779 9 get_value 0 4 1915 34 ParamValue< LMatrix3d >::get_value 0 1 880 0
71
inline LMatrix3d const &ParamValue< LMatrix3d >::get_value(void) const;

1780 14 get_class_type 0 4 1915 39 ParamValue< LMatrix3d >::get_class_type 0 1 881 0
64
static TypeHandle ParamValue< LMatrix3d >::get_class_type(void);

1781 10 ParamValue 0 4 1917 35 ParamValue< LMatrix3f >::ParamValue 0 1 882 0
67
inline ParamValue< LMatrix3f >::ParamValue(LMatrix3f const &value);

1782 9 set_value 0 4 1917 34 ParamValue< LMatrix3f >::set_value 0 1 883 0
138
inline void ParamValue< LMatrix3f >::set_value(LMatrix3f const &value);
inline void ParamValue< LMatrix3f >::set_value(Type const &value);

1783 9 get_value 0 4 1917 34 ParamValue< LMatrix3f >::get_value 0 1 884 0
71
inline LMatrix3f const &ParamValue< LMatrix3f >::get_value(void) const;

1784 14 get_class_type 0 4 1917 39 ParamValue< LMatrix3f >::get_class_type 0 1 885 0
64
static TypeHandle ParamValue< LMatrix3f >::get_class_type(void);

1785 10 ParamValue 0 4 1919 35 ParamValue< LMatrix4d >::ParamValue 0 1 886 0
67
inline ParamValue< LMatrix4d >::ParamValue(LMatrix4d const &value);

1786 9 set_value 0 4 1919 34 ParamValue< LMatrix4d >::set_value 0 1 887 0
138
inline void ParamValue< LMatrix4d >::set_value(LMatrix4d const &value);
inline void ParamValue< LMatrix4d >::set_value(Type const &value);

1787 9 get_value 0 4 1919 34 ParamValue< LMatrix4d >::get_value 0 1 888 0
71
inline LMatrix4d const &ParamValue< LMatrix4d >::get_value(void) const;

1788 14 get_class_type 0 4 1919 39 ParamValue< LMatrix4d >::get_class_type 0 1 889 0
64
static TypeHandle ParamValue< LMatrix4d >::get_class_type(void);

1789 10 ParamValue 0 4 1921 35 ParamValue< LMatrix4f >::ParamValue 0 1 890 0
67
inline ParamValue< LMatrix4f >::ParamValue(LMatrix4f const &value);

1790 9 set_value 0 4 1921 34 ParamValue< LMatrix4f >::set_value 0 1 891 0
138
inline void ParamValue< LMatrix4f >::set_value(LMatrix4f const &value);
inline void ParamValue< LMatrix4f >::set_value(Type const &value);

1791 9 get_value 0 4 1921 34 ParamValue< LMatrix4f >::get_value 0 1 892 0
71
inline LMatrix4f const &ParamValue< LMatrix4f >::get_value(void) const;

1792 14 get_class_type 0 4 1921 39 ParamValue< LMatrix4f >::get_class_type 0 1 893 0
64
static TypeHandle ParamValue< LMatrix4f >::get_class_type(void);

1793 14 get_class_type 0 4 1928 36 WritableConfigurable::get_class_type 0 1 894 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1794 21 ~WritableConfigurable 0 4 1928 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1795 17 UniqueIdAllocator 0 4 1929 36 UniqueIdAllocator::UniqueIdAllocator 0 2 895 896 56
/**
 * Create a free id pool in the range [min:max].
 */
156
UniqueIdAllocator::UniqueIdAllocator(uint32_t min = 0, uint32_t max = 20);
inline UniqueIdAllocator::UniqueIdAllocator(UniqueIdAllocator const &) = default;

1796 18 ~UniqueIdAllocator 0 4 1929 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 10
/**
 *
 */
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1797 8 allocate 0 4 1929 27 UniqueIdAllocator::allocate 0 1 897 134
/**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */
43
uint32_t UniqueIdAllocator::allocate(void);

1798 18 initial_reserve_id 0 4 1929 37 UniqueIdAllocator::initial_reserve_id 0 1 898 518
/**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */
56
void UniqueIdAllocator::initial_reserve_id(uint32_t id);

1799 4 free 0 4 1929 23 UniqueIdAllocator::free 0 1 899 112
/**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */
45
void UniqueIdAllocator::free(uint32_t index);

1800 13 fraction_used 0 4 1929 32 UniqueIdAllocator::fraction_used 0 1 900 117
/**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */
57
PN_stdfloat UniqueIdAllocator::fraction_used(void) const;

1801 6 output 0 4 1929 25 UniqueIdAllocator::output 0 1 901 42
/**
 * ...intended for debugging only.
 */
51
void UniqueIdAllocator::output(ostream &out) const;

1802 5 write 0 4 1929 24 UniqueIdAllocator::write 0 1 902 42
/**
 * ...intended for debugging only.
 */
50
void UniqueIdAllocator::write(ostream &out) const;

1803 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 911 203
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */
97
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, std::string const &data);

1804 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 912 398
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */
126
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, std::string const &data);

912
1 0 0 7 8 1933 926 0 0 1 4 copy 1 1931  
2 0 0 7 8 1933 926 0 0 1 4 copy 1 1934  
3 0 0 7 8 1933 926 0 0 1 6 source 1 1841  
4 0 0 6 9 1870 0 0 0 1 4 this 3 1931  
5 0 0 6 10 1936 0 0 0 2 4 this 3 1931  1 n 1 1870  
6 0 0 6 11 1936 0 0 0 2 4 this 3 1931  1 n 1 1870  
7 0 0 6 12 1938 0 0 0 1 4 this 3 1931  
8 0 0 6 13 1938 0 0 0 3 4 this 3 1931  1 n 1 1870  5 count 1 1870  
9 0 0 6 14 1812 0 0 0 1 4 this 3 1931  
10 0 0 6 15 1812 0 0 0 1 4 this 3 1931  
11 0 0 6 16 1812 0 0 0 3 4 this 3 1931  4 view 1 1939  5 flags 1 1812  
12 0 0 4 17 1942 0 0 0 2 4 this 3 1931  4 view 1 1939  
13 0 0 4 5 1942 0 0 0 1 4 this 3 1943  
14 0 0 4 6 1942 0 0 0 2 4 this 3 1944  3 out 1 1946  
15 0 0 7 20 1948 944 0 0 1 4 copy 1 1934  
16 0 0 7 20 1948 944 0 0 1 6 source 1 1841  
17 0 0 7 20 1948 944 0 0 1 11 type_handle 1 1949  
18 0 0 7 21 1948 944 0 0 2 1 n 1 1870  11 type_handle 1 1949  
19 0 0 6 22 1870 0 0 0 1 4 this 3 1934  
20 0 0 4 23 1942 0 0 0 2 4 this 3 1948  1 x 1 1936  
21 0 0 4 24 1942 0 0 0 1 4 this 3 1948  
22 0 0 6 25 1936 0 0 0 2 4 this 3 1934  1 n 1 1870  
23 0 0 4 26 1942 0 0 0 3 4 this 3 1948  1 n 1 1870  5 value 1 1936  
24 0 0 6 27 1936 0 0 0 2 4 this 3 1934  1 n 1 1870  
25 0 0 4 28 1942 0 0 0 3 4 this 3 1948  1 n 1 1870  5 value 1 1936  
26 0 0 6 29 1938 0 0 0 1 4 this 3 1934  
27 0 0 4 30 1942 0 0 0 2 4 this 3 1948  4 data 1 1938  
28 0 0 6 31 1938 0 0 0 3 4 this 3 1934  1 n 1 1870  5 count 1 1870  
29 0 0 4 32 1942 0 0 0 4 4 this 3 1948  1 n 1 1870  5 count 1 1870  4 data 1 1938  
30 0 0 6 33 1812 0 0 0 1 4 this 3 1934  
31 0 0 6 34 1812 0 0 0 1 4 this 3 1934  
32 0 0 6 35 1812 0 0 0 3 4 this 3 1948  4 view 1 1939  5 flags 1 1812  
33 0 0 4 36 1942 0 0 0 2 4 this 3 1934  4 view 1 1939  
34 0 0 4 40 1942 0 0 69 /**
 * Runs the entire animation from beginning to end and stops.
 */ 1 4 this 3 1951  
35 0 0 4 40 1942 0 0 406 /**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */ 3 4 this 3 1951  4 from 1 1811  2 to 1 1811  
36 0 0 4 41 1942 0 0 169 /**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */ 2 4 this 3 1951  7 restart 1 1813  
37 0 0 4 41 1942 0 0 221 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 4 4 this 3 1951  7 restart 1 1813  4 from 1 1811  2 to 1 1811  
38 0 0 4 42 1942 0 0 224 /**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 2 4 this 3 1951  7 restart 1 1813  
39 0 0 4 42 1942 0 0 143 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */ 4 4 this 3 1951  7 restart 1 1813  4 from 1 1811  2 to 1 1811  
40 0 0 4 43 1942 0 0 130 /**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */ 1 4 this 3 1951  
41 0 0 4 44 1942 0 0 72 /**
 * Sets the animation to the indicated frame and holds it there.
 */ 2 4 this 3 1951  5 frame 1 1811  
42 0 0 4 45 1942 0 0 243 /**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */ 2 4 this 3 1951  9 play_rate 1 1811  
43 0 0 6 46 1811 0 0 79 /**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */ 1 4 this 3 1952  
44 0 0 6 47 1811 0 0 234 /**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */ 1 4 this 3 1952  
45 0 0 6 48 1812 0 0 278 /**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */ 1 4 this 3 1952  
46 0 0 6 49 1812 0 0 116 /**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */ 1 4 this 3 1952  
47 0 0 6 50 1812 0 0 330 /**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */ 1 4 this 3 1952  
48 0 0 6 51 1811 0 0 314 /**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */ 1 4 this 3 1952  
49 0 0 6 52 1812 0 0 372 /**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */ 1 4 this 3 1952  
50 0 0 6 53 1811 0 0 490 /**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */ 1 4 this 3 1952  
51 0 0 6 54 1813 0 0 208 /**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */ 1 4 this 3 1952  
52 0 0 4 55 1942 0 0 10 /**
 *
 */ 2 4 this 3 1952  3 out 1 1946  
53 0 0 7 68 1949 0 0 0 0 
54 0 0 7 71 1954 983 0 55 /**
 * Creates an UpdateSeq in the 'initial' state.
 */ 0 
55 0 0 7 71 1954 983 0 10 /**
 *
 */ 1 4 copy 1 1955  
56 0 0 7 72 1954 983 0 55 /**
 * Returns an UpdateSeq in the 'initial' state.
 */ 0 
57 0 0 7 73 1954 983 0 51 /**
 * Returns an UpdateSeq in the 'old' state.
 */ 0 
58 0 0 7 74 1954 983 0 53 /**
 * Returns an UpdateSeq in the 'fresh' state.
 */ 0 
59 0 0 6 75 1954 0 0 10 /**
 *
 */ 2 4 this 3 1954  4 copy 1 1955  
60 0 0 4 76 1942 0 0 55 /**
 * Resets the UpdateSeq to the 'initial' state.
 */ 1 4 this 3 1954  
61 0 0 6 77 1813 0 0 67 /**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */ 1 4 this 3 1955  
62 0 0 6 78 1813 0 0 63 /**
 * Returns true if the UpdateSeq is in the 'old' state.
 */ 1 4 this 3 1955  
63 0 0 6 79 1813 0 0 65 /**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */ 1 4 this 3 1955  
64 0 0 6 80 1813 0 0 105 /**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */ 1 4 this 3 1955  
65 0 0 6 81 1813 0 0 0 2 4 this 3 1955  5 other 1 1955  
66 0 0 6 82 1813 0 0 0 2 4 this 3 1955  5 other 1 1955  
67 0 0 6 83 1813 0 0 0 2 4 this 3 1955  5 other 1 1955  
68 0 0 6 84 1813 0 0 0 2 4 this 3 1955  5 other 1 1955  
69 0 0 6 85 1813 0 0 0 2 4 this 3 1955  5 other 1 1955  
70 0 0 6 86 1813 0 0 0 2 4 this 3 1955  5 other 1 1955  
71 0 0 7 87 1954 983 0 0 1 4 this 3 1954  
72 0 0 7 88 1954 983 0 0 2 4 this 3 1954  6 param0 0 1812  
73 0 0 6 89 1816 0 0 107 /**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */ 1 4 this 3 1955  
74 0 0 4 94 1942 0 0 10 /**
 *
 */ 2 4 this 3 1955  3 out 1 1946  
75 0 0 4 98 1942 0 0 308 /**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */ 3 4 this 3 1828  4 scan 1 1957  7 manager 1 1959  
76 0 0 4 99 1942 0 0 345 /**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */ 1 4 this 3 1828  
77 0 0 7 100 1954 983 0 140 /**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */ 1 4 this 3 1960  
78 0 0 6 101 1841 0 0 0 1 4 this 3 1960  
79 0 0 6 102 1841 0 0 0 2 4 this 3 1960  7 pickler 1 1841  
80 0 0 6 103 1938 0 0 415 /**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a string string.  Returns empty string
 * on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */ 1 4 this 3 1960  
81 0 0 7 105 1949 0 0 0 0 
82 0 0 7 112 1962 998 0 492 /**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on that string.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */ 2 4 data 1 1938  6 reader 1 1959  
83 0 0 7 113 1949 0 0 0 0 
84 0 0 6 107 1828 0 0 0 1 4 this 3 1962  
85 0 0 7 108 1962 998 0 0 1 4 this 3 1828  
86 0 0 7 110 1963 0 0 0 1 4 this 3 1962  
87 0 0 7 111 1962 998 0 0 1 4 this 3 1963  
88 0 0 7 122 1966 1003 0 179 /**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */ 1 4 this 3 1964  
89 0 0 6 123 1813 0 0 0 2 4 this 3 1964  5 other 1 1964  
90 0 0 6 124 1967 0 0 237 /**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */ 1 4 this 3 1964  
91 0 0 6 125 1967 0 0 230 /**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */ 1 4 this 3 1964  
92 0 0 6 126 1827 0 0 204 /**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */ 1 4 this 3 1964  
93 0 0 6 127 1827 0 0 84 /**
 * Returns the time at which this particular record was recorded or updated.
 */ 1 4 this 3 1964  
94 0 0 6 135 1812 0 0 75 /**
 * Returns the number of source files that contribute to the cache.
 */ 1 4 this 3 1964  
95 0 0 6 136 1967 0 0 94 /**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */ 2 4 this 3 1964  1 n 1 1812  
96 0 0 6 137 1813 0 0 124 /**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */ 1 4 this 3 1964  
97 0 0 4 138 1942 0 0 80 /**
 * Empties the list of files that contribute to the data in this record.
 */ 1 4 this 3 1966  
98 0 0 4 139 1942 0 0 225 /**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */ 2 4 this 3 1966  8 pathname 1 1967  
99 0 0 4 139 1942 0 0 82 /**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */ 2 4 this 3 1966  4 file 1 1968  
100 0 0 6 140 1813 0 0 130 /**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */ 1 4 this 3 1964  
101 0 0 4 141 1942 0 0 147 /**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */ 1 4 this 3 1966  
102 0 0 6 142 1828 0 0 139 /**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */ 1 4 this 3 1964  
103 0 0 4 144 1942 0 0 104 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */ 2 4 this 3 1966  3 ptr 1 1828  
104 0 0 4 144 1942 0 0 573 /**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */ 3 4 this 3 1966  3 ptr 1 1828  7 ref_ptr 1 1963  
105 0 0 4 144 1942 0 0 115 /**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */ 3 4 this 3 1966  3 ptr 1 1828  5 dummy 1 1812  
106 0 0 4 144 1942 0 0 118 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */ 2 4 this 3 1966  3 ptr 1 1962  
107 0 0 4 147 1942 0 0 10 /**
 *
 */ 2 4 this 3 1964  3 out 1 1946  
108 0 0 4 148 1942 0 0 10 /**
 *
 */ 3 4 this 3 1964  3 out 1 1946  12 indent_level 1 1812  
109 0 0 7 149 1949 0 0 0 0 
110 0 0 7 116 1962 998 0 0 1 4 this 3 1966  
111 0 0 7 117 1966 1003 0 0 1 4 this 3 1962  
112 0 0 7 151 1971 1024 0 10 /**
 *
 */ 0 
113 0 0 4 153 1942 0 0 347 /**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 2 4 this 3 1971  4 flag 1 1813  
114 0 0 6 154 1813 0 0 381 /**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 1 4 this 3 1972  
115 0 0 4 155 1942 0 0 118 /**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */ 2 4 this 3 1971  4 flag 1 1813  
116 0 0 6 156 1813 0 0 172 /**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1972  
117 0 0 4 157 1942 0 0 101 /**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */ 2 4 this 3 1971  4 flag 1 1813  
118 0 0 6 158 1813 0 0 174 /**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1972  
119 0 0 4 159 1942 0 0 722 /**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */ 2 4 this 3 1971  4 flag 1 1813  
120 0 0 6 160 1813 0 0 202 /**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1972  
121 0 0 4 161 1942 0 0 184 /**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */ 2 4 this 3 1971  4 flag 1 1813  
122 0 0 6 162 1813 0 0 196 /**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1972  
123 0 0 4 163 1942 0 0 372 /**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */ 2 4 this 3 1971  4 root 1 1967  
124 0 0 7 164 1974 0 0 75 /**
 * Returns the current root pathname of the cache.  See set_root().
 */ 1 4 this 3 1972  
125 0 0 4 165 1942 0 0 86 /**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */ 2 4 this 3 1971  10 flush_time 1 1812  
126 0 0 6 166 1812 0 0 84 /**
 * Returns the time in seconds between automatic flushes of the cache index.
 */ 1 4 this 3 1972  
127 0 0 4 167 1942 0 0 430 /**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */ 2 4 this 3 1971  10 max_kbytes 1 1812  
128 0 0 6 168 1812 0 0 121 /**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */ 1 4 this 3 1972  
129 0 0 4 169 1942 0 0 252 /**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */ 2 4 this 3 1971  2 ro 1 1813  
130 0 0 6 170 1813 0 0 230 /**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */ 1 4 this 3 1972  
131 0 0 7 171 1966 1003 0 782 /**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */ 3 4 this 3 1971  15 source_filename 1 1967  15 cache_extension 1 1938  
132 0 0 6 172 1813 0 0 212 /**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */ 2 4 this 3 1971  6 record 1 1966  
133 0 0 4 173 1942 0 0 92 /**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */ 1 4 this 3 1971  
134 0 0 4 174 1942 0 0 48 /**
 * Ensures the index is written to disk.
 */ 1 4 this 3 1971  
135 0 0 4 175 1942 0 0 63 /**
 * Writes the contents of the index to standard output.
 */ 3 4 this 3 1972  3 out 1 1946  12 indent_level 1 1812  
136 0 0 6 176 1971 0 0 124 /**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */ 0 
137 0 0 4 177 1942 0 0 84 /**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */ 0 
138 0 0 4 178 1942 0 0 75 /**
 * If there is a global BamCache object, calls flush_index() on it.
 */ 0 
139 0 0 7 192 1975 1052 0 0 0 
140 0 0 7 192 1975 1052 0 0 1 6 param0 0 1976  
141 0 0 7 197 1979 1064 0 10 /**
 *
 */ 1 4 copy 1 1978  
142 0 0 7 197 1979 1064 0 10 /**
 *
 */ 1 5 flags 1 1812  
143 0 0 7 197 1979 1064 0 10 /**
 *
 */ 2 5 flags 1 1812  13 texture_flags 1 1812  
144 0 0 6 198 1979 0 0 0 2 4 this 3 1979  4 copy 1 1978  
145 0 0 4 199 1942 0 0 10 /**
 *
 */ 2 4 this 3 1979  5 flags 1 1812  
146 0 0 6 200 1812 0 0 10 /**
 *
 */ 1 4 this 3 1978  
147 0 0 4 202 1942 0 0 10 /**
 *
 */ 2 4 this 3 1979  5 flags 1 1812  
148 0 0 6 203 1812 0 0 10 /**
 *
 */ 1 4 this 3 1978  
149 0 0 4 204 1942 0 0 459 /**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */ 2 4 this 3 1979  9 num_views 1 1812  
150 0 0 6 205 1812 0 0 39 /**
 * See set_texture_num_views().
 */ 1 4 this 3 1978  
151 0 0 4 208 1942 0 0 209 /**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */ 2 4 this 3 1979  5 scale 1 1814  
152 0 0 6 209 1814 0 0 40 /**
 * See set_auto_texture_scale().
 */ 1 4 this 3 1978  
153 0 0 4 211 1942 0 0 10 /**
 *
 */ 2 4 this 3 1978  3 out 1 1946  
154 0 0 7 214 1959 1066 0 38 // The primary interface for a caller. 1 6 source 1 1838  
155 0 0 4 216 1942 0 0 142 /**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */ 2 4 this 3 1959  6 source 1 1838  
156 0 0 6 217 1838 0 0 100 /**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */ 1 4 this 3 1959  
157 0 0 6 218 1813 0 0 210 /**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */ 1 4 this 3 1959  
158 0 0 4 219 1942 0 0 1007 /**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */ 4 4 this 3 1959  3 obj 1 1828  4 name 1 1938  4 data 1 1980  
159 0 0 7 220 1980 0 0 173 /**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */ 3 4 this 3 1982  3 obj 1 1828  4 name 1 1938  
160 0 0 6 221 1967 0 0 199 /**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */ 1 4 this 3 1982  
161 0 0 6 222 1978 0 0 98 /**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */ 1 4 this 3 1982  
162 0 0 4 223 1942 0 0 58 /**
 * Specifies the LoaderOptions for this BamReader.
 */ 2 4 this 3 1959  7 options 1 1978  
163 0 0 6 224 1828 0 0 1059 /**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */ 1 4 this 3 1959  
164 0 0 6 225 1813 0 0 138 /**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */ 1 4 this 3 1982  
165 0 0 6 226 1813 0 0 565 /**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */ 1 4 this 3 1959  
166 0 0 6 227 1813 0 0 406 /**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */ 3 4 this 3 1959  12 orig_pointer 1 1960  11 new_pointer 1 1960  
167 0 0 6 228 1812 0 0 81 /**
 * Returns the major version number of the Bam file currently being read.
 */ 1 4 this 3 1982  
168 0 0 6 229 1812 0 0 81 /**
 * Returns the minor version number of the Bam file currently being read.
 */ 1 4 this 3 1982  
169 0 0 6 230 1831 0 0 254 /**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */ 1 4 this 3 1982  
170 0 0 6 231 1813 0 0 220 /**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */ 1 4 this 3 1982  
171 0 0 6 232 1812 0 0 174 /**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */ 1 4 this 3 1982  
172 0 0 6 233 1812 0 0 184 /**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */ 1 4 this 3 1982  
173 0 0 6 234 1841 0 0 0 1 4 this 3 1982  
174 0 0 4 247 1942 0 0 0 2 6 handle 1 1949  4 func 1 1841  
175 0 0 7 249 1986 1088 0 0 1 6 param0 0 1984  
176 0 0 7 249 1986 1088 0 10 /**
 *
 */ 1 6 target 1 1845  
177 0 0 4 251 1942 0 0 153 /**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */ 2 4 this 3 1986  6 target 1 1845  
178 0 0 6 252 1845 0 0 100 /**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */ 1 4 this 3 1986  
179 0 0 6 253 1813 0 0 220 /**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */ 1 4 this 3 1986  
180 0 0 6 254 1967 0 0 197 /**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */ 1 4 this 3 1984  
181 0 0 6 255 1813 0 0 736 /**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */ 2 4 this 3 1986  3 obj 1 1960  
182 0 0 6 256 1813 0 0 170 /**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */ 2 4 this 3 1984  3 obj 1 1960  
183 0 0 4 257 1942 0 0 85 /**
 * Ensures that all data written thus far is manifested on the output stream.
 */ 1 4 this 3 1986  
184 0 0 6 258 1812 0 0 84 /**
 * Returns the major version number of the Bam file currently being written.
 */ 1 4 this 3 1984  
185 0 0 6 259 1812 0 0 84 /**
 * Returns the minor version number of the Bam file currently being written.
 */ 1 4 this 3 1984  
186 0 0 4 260 1942 0 0 232 /**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */ 2 4 this 3 1986  9 minor_ver 1 1812  
187 0 0 6 261 1831 0 0 257 /**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */ 1 4 this 3 1984  
188 0 0 6 262 1813 0 0 248 /**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */ 1 4 this 3 1984  
189 0 0 6 263 1833 0 0 196 /**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 1 4 this 3 1984  
190 0 0 4 264 1942 0 0 187 /**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 2 4 this 3 1986  17 file_texture_mode 1 1833  
191 0 0 6 265 1828 0 0 165 /**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */ 1 4 this 3 1984  
192 0 0 4 266 1942 0 0 160 /**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */ 2 4 this 3 1986  9 root_node 1 1828  
193 0 0 7 276 1987 1167 0 0 0 
194 0 0 7 276 1987 1167 0 0 1 6 param0 0 1988  
195 0 0 7 276 1987 1167 0 0 1 10 init_value 1 1990  
196 0 0 7 277 1987 1167 0 0 0 
197 0 0 7 278 1987 1167 0 0 0 
198 0 0 7 279 1987 1167 0 0 1 7 on_bits 1 1812  
199 0 0 7 280 1987 1167 0 0 1 5 index 1 1812  
200 0 0 7 281 1987 1167 0 0 2 7 low_bit 1 1812  4 size 1 1812  
201 0 0 6 282 1813 0 0 0 0 
202 0 0 6 283 1812 0 0 0 0 
203 0 0 6 284 1812 0 0 0 0 
204 0 0 6 285 1813 0 0 0 2 4 this 3 1988  5 index 1 1812  
205 0 0 4 286 1942 0 0 0 2 4 this 3 1987  5 index 1 1812  
206 0 0 4 287 1942 0 0 0 2 4 this 3 1987  5 index 1 1812  
207 0 0 4 288 1942 0 0 0 3 4 this 3 1987  5 index 1 1812  5 value 1 1813  
208 0 0 6 289 1813 0 0 0 1 4 this 3 1988  
209 0 0 6 290 1813 0 0 0 1 4 this 3 1988  
210 0 0 6 291 1990 0 0 0 3 4 this 3 1988  7 low_bit 1 1812  4 size 1 1812  
211 0 0 4 292 1942 0 0 0 4 4 this 3 1987  5 value 1 1990  7 low_bit 1 1812  4 size 1 1812  
212 0 0 6 293 1813 0 0 0 3 4 this 3 1988  7 low_bit 1 1812  4 size 1 1812  
213 0 0 6 294 1813 0 0 0 3 4 this 3 1988  7 low_bit 1 1812  4 size 1 1812  
214 0 0 4 295 1942 0 0 0 3 4 this 3 1987  7 low_bit 1 1812  4 size 1 1812  
215 0 0 4 296 1942 0 0 0 3 4 this 3 1987  7 low_bit 1 1812  4 size 1 1812  
216 0 0 4 297 1942 0 0 0 4 4 this 3 1987  5 value 1 1813  7 low_bit 1 1812  4 size 1 1812  
217 0 0 6 298 1990 0 0 0 1 4 this 3 1988  
218 0 0 4 299 1942 0 0 0 2 4 this 3 1987  5 value 1 1990  
219 0 0 6 300 1812 0 0 0 1 4 this 3 1988  
220 0 0 6 301 1812 0 0 0 1 4 this 3 1988  
221 0 0 6 302 1812 0 0 0 1 4 this 3 1988  
222 0 0 6 303 1812 0 0 0 1 4 this 3 1988  
223 0 0 6 304 1812 0 0 0 1 4 this 3 1988  
224 0 0 6 305 1812 0 0 0 1 4 this 3 1988  
225 0 0 6 306 1812 0 0 0 2 4 this 3 1988  7 low_bit 1 1812  
226 0 0 4 307 1942 0 0 0 1 4 this 3 1987  
227 0 0 6 308 1813 0 0 0 2 4 this 3 1988  5 other 1 1988  
228 0 0 4 309 1942 0 0 0 1 4 this 3 1987  
229 0 0 4 310 1942 0 0 0 2 4 this 3 1988  3 out 1 1946  
230 0 0 4 311 1942 0 0 0 3 4 this 3 1988  3 out 1 1946  12 spaces_every 1 1812  
231 0 0 4 312 1942 0 0 0 3 4 this 3 1988  3 out 1 1946  12 spaces_every 1 1812  
232 0 0 4 313 1942 0 0 0 3 4 this 3 1988  3 out 1 1946  12 indent_level 1 1812  
233 0 0 6 314 1813 0 0 0 2 4 this 3 1988  5 other 1 1988  
234 0 0 6 315 1813 0 0 0 2 4 this 3 1988  5 other 1 1988  
235 0 0 6 316 1813 0 0 0 2 4 this 3 1988  5 other 1 1988  
236 0 0 6 317 1812 0 0 0 2 4 this 3 1988  5 other 1 1988  
237 0 0 7 318 1987 1167 0 0 2 4 this 3 1988  5 other 1 1988  
238 0 0 7 319 1987 1167 0 0 2 4 this 3 1988  5 other 1 1988  
239 0 0 7 320 1987 1167 0 0 2 4 this 3 1988  5 other 1 1988  
240 0 0 7 321 1987 1167 0 0 1 4 this 3 1988  
241 0 0 7 322 1987 1167 0 0 2 4 this 3 1988  5 shift 1 1812  
242 0 0 7 323 1987 1167 0 0 2 4 this 3 1988  5 shift 1 1812  
243 0 0 6 324 1987 0 0 0 2 4 this 3 1987  5 other 1 1988  
244 0 0 6 325 1987 0 0 0 2 4 this 3 1987  5 other 1 1988  
245 0 0 6 326 1987 0 0 0 2 4 this 3 1987  5 other 1 1988  
246 0 0 6 327 1987 0 0 0 2 4 this 3 1987  5 shift 1 1812  
247 0 0 6 328 1987 0 0 0 2 4 this 3 1987  5 shift 1 1812  
248 0 0 4 329 1942 0 0 0 1 4 this 3 1987  
249 0 0 4 330 1942 0 0 0 1 4 this 3 1987  
250 0 0 7 331 1987 1167 0 0 1 4 this 3 1988  
251 0 0 7 332 1987 1167 0 0 1 4 this 3 1988  
252 0 0 7 333 1987 1167 0 0 1 4 this 3 1988  
253 0 0 7 333 1987 1167 0 0 2 4 this 3 1988  5 other 1 1988  
254 0 0 7 333 1987 1167 0 0 2 4 this 3 1988  5 index 1 1812  
255 0 0 7 334 1987 1167 0 0 1 4 this 3 1988  
256 0 0 7 334 1987 1167 0 0 2 4 this 3 1988  5 other 1 1988  
257 0 0 7 334 1987 1167 0 0 2 4 this 3 1988  5 index 1 1812  
258 0 0 6 335 1812 0 0 0 1 4 this 3 1988  
259 0 0 6 336 1813 0 0 0 1 4 this 3 1988  
260 0 0 7 337 1949 0 0 0 0 
261 0 0 7 341 1991 1230 0 0 0 
262 0 0 7 341 1991 1230 0 0 1 6 param0 0 1992  
263 0 0 7 341 1991 1230 0 0 1 10 init_value 1 1994  
264 0 0 7 342 1991 1230 0 0 0 
265 0 0 7 343 1991 1230 0 0 0 
266 0 0 7 344 1991 1230 0 0 1 7 on_bits 1 1812  
267 0 0 7 345 1991 1230 0 0 1 5 index 1 1812  
268 0 0 7 346 1991 1230 0 0 2 7 low_bit 1 1812  4 size 1 1812  
269 0 0 6 347 1813 0 0 0 0 
270 0 0 6 348 1812 0 0 0 0 
271 0 0 6 349 1812 0 0 0 0 
272 0 0 6 350 1813 0 0 0 2 4 this 3 1992  5 index 1 1812  
273 0 0 4 351 1942 0 0 0 2 4 this 3 1991  5 index 1 1812  
274 0 0 4 352 1942 0 0 0 2 4 this 3 1991  5 index 1 1812  
275 0 0 4 353 1942 0 0 0 3 4 this 3 1991  5 index 1 1812  5 value 1 1813  
276 0 0 6 354 1813 0 0 0 1 4 this 3 1992  
277 0 0 6 355 1813 0 0 0 1 4 this 3 1992  
278 0 0 6 356 1994 0 0 0 3 4 this 3 1992  7 low_bit 1 1812  4 size 1 1812  
279 0 0 4 357 1942 0 0 0 4 4 this 3 1991  5 value 1 1994  7 low_bit 1 1812  4 size 1 1812  
280 0 0 6 358 1813 0 0 0 3 4 this 3 1992  7 low_bit 1 1812  4 size 1 1812  
281 0 0 6 359 1813 0 0 0 3 4 this 3 1992  7 low_bit 1 1812  4 size 1 1812  
282 0 0 4 360 1942 0 0 0 3 4 this 3 1991  7 low_bit 1 1812  4 size 1 1812  
283 0 0 4 361 1942 0 0 0 3 4 this 3 1991  7 low_bit 1 1812  4 size 1 1812  
284 0 0 4 362 1942 0 0 0 4 4 this 3 1991  5 value 1 1813  7 low_bit 1 1812  4 size 1 1812  
285 0 0 6 363 1994 0 0 0 1 4 this 3 1992  
286 0 0 4 364 1942 0 0 0 2 4 this 3 1991  5 value 1 1994  
287 0 0 6 365 1812 0 0 0 1 4 this 3 1992  
288 0 0 6 366 1812 0 0 0 1 4 this 3 1992  
289 0 0 6 367 1812 0 0 0 1 4 this 3 1992  
290 0 0 6 368 1812 0 0 0 1 4 this 3 1992  
291 0 0 6 369 1812 0 0 0 1 4 this 3 1992  
292 0 0 6 370 1812 0 0 0 1 4 this 3 1992  
293 0 0 6 371 1812 0 0 0 2 4 this 3 1992  7 low_bit 1 1812  
294 0 0 4 372 1942 0 0 0 1 4 this 3 1991  
295 0 0 6 373 1813 0 0 0 2 4 this 3 1992  5 other 1 1992  
296 0 0 4 374 1942 0 0 0 1 4 this 3 1991  
297 0 0 4 375 1942 0 0 0 2 4 this 3 1992  3 out 1 1946  
298 0 0 4 376 1942 0 0 0 3 4 this 3 1992  3 out 1 1946  12 spaces_every 1 1812  
299 0 0 4 377 1942 0 0 0 3 4 this 3 1992  3 out 1 1946  12 spaces_every 1 1812  
300 0 0 4 378 1942 0 0 0 3 4 this 3 1992  3 out 1 1946  12 indent_level 1 1812  
301 0 0 6 379 1813 0 0 0 2 4 this 3 1992  5 other 1 1992  
302 0 0 6 380 1813 0 0 0 2 4 this 3 1992  5 other 1 1992  
303 0 0 6 381 1813 0 0 0 2 4 this 3 1992  5 other 1 1992  
304 0 0 6 382 1812 0 0 0 2 4 this 3 1992  5 other 1 1992  
305 0 0 7 383 1991 1230 0 0 2 4 this 3 1992  5 other 1 1992  
306 0 0 7 384 1991 1230 0 0 2 4 this 3 1992  5 other 1 1992  
307 0 0 7 385 1991 1230 0 0 2 4 this 3 1992  5 other 1 1992  
308 0 0 7 386 1991 1230 0 0 1 4 this 3 1992  
309 0 0 7 387 1991 1230 0 0 2 4 this 3 1992  5 shift 1 1812  
310 0 0 7 388 1991 1230 0 0 2 4 this 3 1992  5 shift 1 1812  
311 0 0 6 389 1991 0 0 0 2 4 this 3 1991  5 other 1 1992  
312 0 0 6 390 1991 0 0 0 2 4 this 3 1991  5 other 1 1992  
313 0 0 6 391 1991 0 0 0 2 4 this 3 1991  5 other 1 1992  
314 0 0 6 392 1991 0 0 0 2 4 this 3 1991  5 shift 1 1812  
315 0 0 6 393 1991 0 0 0 2 4 this 3 1991  5 shift 1 1812  
316 0 0 4 394 1942 0 0 0 1 4 this 3 1991  
317 0 0 4 395 1942 0 0 0 1 4 this 3 1991  
318 0 0 7 396 1991 1230 0 0 1 4 this 3 1992  
319 0 0 7 397 1991 1230 0 0 1 4 this 3 1992  
320 0 0 7 398 1991 1230 0 0 1 4 this 3 1992  
321 0 0 7 398 1991 1230 0 0 2 4 this 3 1992  5 other 1 1992  
322 0 0 7 398 1991 1230 0 0 2 4 this 3 1992  5 index 1 1812  
323 0 0 7 399 1991 1230 0 0 1 4 this 3 1992  
324 0 0 7 399 1991 1230 0 0 2 4 this 3 1992  5 other 1 1992  
325 0 0 7 399 1991 1230 0 0 2 4 this 3 1992  5 index 1 1812  
326 0 0 6 400 1812 0 0 0 1 4 this 3 1992  
327 0 0 6 401 1813 0 0 0 1 4 this 3 1992  
328 0 0 7 402 1949 0 0 0 0 
329 0 0 7 406 1996 1293 0 0 0 
330 0 0 7 406 1996 1293 0 0 1 6 param0 0 1997  
331 0 0 7 406 1996 1293 0 0 1 10 init_value 1 1999  
332 0 0 7 407 1996 1293 0 0 0 
333 0 0 7 408 1996 1293 0 0 0 
334 0 0 7 409 1996 1293 0 0 1 7 on_bits 1 1812  
335 0 0 7 410 1996 1293 0 0 1 5 index 1 1812  
336 0 0 7 411 1996 1293 0 0 2 7 low_bit 1 1812  4 size 1 1812  
337 0 0 6 412 1813 0 0 0 0 
338 0 0 6 413 1812 0 0 0 0 
339 0 0 6 414 1812 0 0 0 0 
340 0 0 6 415 1813 0 0 0 2 4 this 3 1997  5 index 1 1812  
341 0 0 4 416 1942 0 0 0 2 4 this 3 1996  5 index 1 1812  
342 0 0 4 417 1942 0 0 0 2 4 this 3 1996  5 index 1 1812  
343 0 0 4 418 1942 0 0 0 3 4 this 3 1996  5 index 1 1812  5 value 1 1813  
344 0 0 6 419 1813 0 0 0 1 4 this 3 1997  
345 0 0 6 420 1813 0 0 0 1 4 this 3 1997  
346 0 0 6 421 1999 0 0 0 3 4 this 3 1997  7 low_bit 1 1812  4 size 1 1812  
347 0 0 4 422 1942 0 0 0 4 4 this 3 1996  5 value 1 1999  7 low_bit 1 1812  4 size 1 1812  
348 0 0 6 423 1813 0 0 0 3 4 this 3 1997  7 low_bit 1 1812  4 size 1 1812  
349 0 0 6 424 1813 0 0 0 3 4 this 3 1997  7 low_bit 1 1812  4 size 1 1812  
350 0 0 4 425 1942 0 0 0 3 4 this 3 1996  7 low_bit 1 1812  4 size 1 1812  
351 0 0 4 426 1942 0 0 0 3 4 this 3 1996  7 low_bit 1 1812  4 size 1 1812  
352 0 0 4 427 1942 0 0 0 4 4 this 3 1996  5 value 1 1813  7 low_bit 1 1812  4 size 1 1812  
353 0 0 6 428 1999 0 0 0 1 4 this 3 1997  
354 0 0 4 429 1942 0 0 0 2 4 this 3 1996  5 value 1 1999  
355 0 0 6 430 1812 0 0 0 1 4 this 3 1997  
356 0 0 6 431 1812 0 0 0 1 4 this 3 1997  
357 0 0 6 432 1812 0 0 0 1 4 this 3 1997  
358 0 0 6 433 1812 0 0 0 1 4 this 3 1997  
359 0 0 6 434 1812 0 0 0 1 4 this 3 1997  
360 0 0 6 435 1812 0 0 0 1 4 this 3 1997  
361 0 0 6 436 1812 0 0 0 2 4 this 3 1997  7 low_bit 1 1812  
362 0 0 4 437 1942 0 0 0 1 4 this 3 1996  
363 0 0 6 438 1813 0 0 0 2 4 this 3 1997  5 other 1 1997  
364 0 0 4 439 1942 0 0 0 1 4 this 3 1996  
365 0 0 4 440 1942 0 0 0 2 4 this 3 1997  3 out 1 1946  
366 0 0 4 441 1942 0 0 0 3 4 this 3 1997  3 out 1 1946  12 spaces_every 1 1812  
367 0 0 4 442 1942 0 0 0 3 4 this 3 1997  3 out 1 1946  12 spaces_every 1 1812  
368 0 0 4 443 1942 0 0 0 3 4 this 3 1997  3 out 1 1946  12 indent_level 1 1812  
369 0 0 6 444 1813 0 0 0 2 4 this 3 1997  5 other 1 1997  
370 0 0 6 445 1813 0 0 0 2 4 this 3 1997  5 other 1 1997  
371 0 0 6 446 1813 0 0 0 2 4 this 3 1997  5 other 1 1997  
372 0 0 6 447 1812 0 0 0 2 4 this 3 1997  5 other 1 1997  
373 0 0 7 448 1996 1293 0 0 2 4 this 3 1997  5 other 1 1997  
374 0 0 7 449 1996 1293 0 0 2 4 this 3 1997  5 other 1 1997  
375 0 0 7 450 1996 1293 0 0 2 4 this 3 1997  5 other 1 1997  
376 0 0 7 451 1996 1293 0 0 1 4 this 3 1997  
377 0 0 7 452 1996 1293 0 0 2 4 this 3 1997  5 shift 1 1812  
378 0 0 7 453 1996 1293 0 0 2 4 this 3 1997  5 shift 1 1812  
379 0 0 6 454 1996 0 0 0 2 4 this 3 1996  5 other 1 1997  
380 0 0 6 455 1996 0 0 0 2 4 this 3 1996  5 other 1 1997  
381 0 0 6 456 1996 0 0 0 2 4 this 3 1996  5 other 1 1997  
382 0 0 6 457 1996 0 0 0 2 4 this 3 1996  5 shift 1 1812  
383 0 0 6 458 1996 0 0 0 2 4 this 3 1996  5 shift 1 1812  
384 0 0 4 459 1942 0 0 0 1 4 this 3 1996  
385 0 0 4 460 1942 0 0 0 1 4 this 3 1996  
386 0 0 7 461 1996 1293 0 0 1 4 this 3 1997  
387 0 0 7 462 1996 1293 0 0 1 4 this 3 1997  
388 0 0 7 463 1996 1293 0 0 1 4 this 3 1997  
389 0 0 7 463 1996 1293 0 0 2 4 this 3 1997  5 other 1 1997  
390 0 0 7 463 1996 1293 0 0 2 4 this 3 1997  5 index 1 1812  
391 0 0 7 464 1996 1293 0 0 1 4 this 3 1997  
392 0 0 7 464 1996 1293 0 0 2 4 this 3 1997  5 other 1 1997  
393 0 0 7 464 1996 1293 0 0 2 4 this 3 1997  5 index 1 1812  
394 0 0 6 465 1812 0 0 0 1 4 this 3 1997  
395 0 0 6 466 1813 0 0 0 1 4 this 3 1997  
396 0 0 7 467 1949 0 0 0 0 
397 0 0 7 473 2001 1351 0 10 /**
 *
 */ 0 
398 0 0 7 473 2001 1351 0 0 1 6 param0 0 2002  
399 0 0 7 473 2001 1351 0 10 /**
 *
 */ 1 10 init_value 1 2004  
400 0 0 7 473 2001 1351 0 10 /**
 *
 */ 1 4 from 1 2005  
401 0 0 7 474 2001 1351 0 69 /**
 * Returns a BitArray with an infinite array of bits, all on.
 */ 0 
402 0 0 7 475 2001 1351 0 53 /**
 * Returns a BitArray whose bits are all off.
 */ 0 
403 0 0 7 476 2001 1351 0 62 /**
 * Returns a BitArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1812  
404 0 0 7 477 2001 1351 0 61 /**
 * Returns a BitArray with only the indicated bit on.
 */ 1 5 index 1 1812  
405 0 0 7 478 2001 1351 0 76 /**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1812  4 size 1 1812  
406 0 0 6 479 1813 0 0 387 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The BitArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or BitArray interchangeably.
 */ 0 
407 0 0 6 480 1812 0 0 422 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The BitArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or BitArray interchangeably.
 */ 0 
408 0 0 6 481 1812 0 0 203 /**
 * Returns the number of bits stored per word internally.  This is of interest
 * only in that it limits the maximum number of bits that may be queried or
 * set at once by extract() and store().
 */ 0 
409 0 0 6 482 2007 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2002  
410 0 0 6 483 1813 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2002  5 index 1 1812  
411 0 0 4 484 1942 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2001  5 index 1 1812  
412 0 0 4 485 1942 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2001  5 index 1 1812  
413 0 0 4 486 1942 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2001  5 index 1 1812  5 value 1 1813  
414 0 0 6 487 1813 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2002  
415 0 0 6 488 1813 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2002  
416 0 0 6 489 1813 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2002  
417 0 0 6 490 2004 0 0 187 /**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */ 3 4 this 3 2002  7 low_bit 1 1812  4 size 1 1812  
418 0 0 4 491 1942 0 0 92 /**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */ 4 4 this 3 2001  5 value 1 2004  7 low_bit 1 1812  4 size 1 1812  
419 0 0 6 492 1813 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2002  7 low_bit 1 1812  4 size 1 1812  
420 0 0 6 493 1813 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2002  7 low_bit 1 1812  4 size 1 1812  
421 0 0 4 494 1942 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2001  7 low_bit 1 1812  4 size 1 1812  
422 0 0 4 495 1942 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2001  7 low_bit 1 1812  4 size 1 1812  
423 0 0 4 496 1942 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2001  5 value 1 1813  7 low_bit 1 1812  4 size 1 1812  
424 0 0 6 497 1812 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2002  
425 0 0 6 498 1812 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2002  
426 0 0 6 499 1812 0 0 101 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */ 1 4 this 3 2002  
427 0 0 6 500 1812 0 0 101 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */ 1 4 this 3 2002  
428 0 0 6 501 1812 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2002  
429 0 0 6 502 1812 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2002  
430 0 0 6 503 1812 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2002  7 low_bit 1 1812  
431 0 0 6 504 2007 0 0 75 /**
 * Returns the number of possibly-unique words stored in the array.
 */ 1 4 this 3 2002  
432 0 0 7 505 2009 0 0 175 /**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */ 2 4 this 3 2002  1 n 1 2007  
433 0 0 4 506 1942 0 0 113 /**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */ 3 4 this 3 2001  1 n 1 2007  5 value 1 2004  
434 0 0 4 507 1942 0 0 90 /**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2001  
435 0 0 6 508 1813 0 0 178 /**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2002  5 other 1 2002  
436 0 0 4 509 1942 0 0 49 /**
 * Sets all the bits in the BitArray off.
 */ 1 4 this 3 2001  
437 0 0 4 510 1942 0 0 193 /**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */ 2 4 this 3 2002  3 out 1 1946  
438 0 0 4 511 1942 0 0 83 /**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */ 3 4 this 3 2002  3 out 1 1946  12 spaces_every 1 1812  
439 0 0 4 512 1942 0 0 93 /**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */ 3 4 this 3 2002  3 out 1 1946  12 spaces_every 1 1812  
440 0 0 4 513 1942 0 0 99 /**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */ 3 4 this 3 2002  3 out 1 1946  12 indent_level 1 1812  
441 0 0 6 514 1813 0 0 0 2 4 this 3 2002  5 other 1 2002  
442 0 0 6 515 1813 0 0 0 2 4 this 3 2002  5 other 1 2002  
443 0 0 6 516 1813 0 0 0 2 4 this 3 2002  5 other 1 2002  
444 0 0 6 517 1812 0 0 233 /**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */ 2 4 this 3 2002  5 other 1 2002  
445 0 0 7 518 2001 1351 0 0 2 4 this 3 2002  5 other 1 2002  
446 0 0 7 519 2001 1351 0 0 2 4 this 3 2002  5 other 1 2002  
447 0 0 7 520 2001 1351 0 0 2 4 this 3 2002  5 other 1 2002  
448 0 0 7 521 2001 1351 0 0 1 4 this 3 2002  
449 0 0 7 522 2001 1351 0 0 2 4 this 3 2002  5 shift 1 1812  
450 0 0 7 523 2001 1351 0 0 2 4 this 3 2002  5 shift 1 1812  
451 0 0 6 524 2001 0 0 0 2 4 this 3 2001  5 other 1 2002  
452 0 0 6 525 2001 0 0 0 2 4 this 3 2001  5 other 1 2002  
453 0 0 6 526 2001 0 0 0 2 4 this 3 2001  5 other 1 2002  
454 0 0 6 527 2001 0 0 0 2 4 this 3 2001  5 shift 1 1812  
455 0 0 6 528 2001 0 0 0 2 4 this 3 2001  5 shift 1 1812  
456 0 0 7 529 1949 0 0 0 0 
457 0 0 7 532 2010 1371 0 259 // The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer! 0 
458 0 0 7 532 2010 1371 0 0 1 6 param0 0 2011  
459 0 0 7 532 2010 1371 0 154 /**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */ 1 5 index 1 1812  
460 0 0 7 532 2010 1371 0 341 /**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */ 1 4 name 1 1938  
461 0 0 6 533 1813 0 0 0 2 4 this 3 2011  5 other 1 2011  
462 0 0 6 534 1813 0 0 0 2 4 this 3 2011  5 other 1 2011  
463 0 0 6 535 1813 0 0 0 2 4 this 3 2011  5 other 1 2011  
464 0 0 6 536 1813 0 0 0 2 4 this 3 2011  5 other 1 2011  
465 0 0 6 537 1813 0 0 0 2 4 this 3 2011  5 other 1 2011  
466 0 0 6 538 1813 0 0 0 2 4 this 3 2011  5 other 1 2011  
467 0 0 6 539 1812 0 0 209 /**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */ 2 4 this 3 2011  5 other 1 2011  
468 0 0 6 540 2007 0 0 54 /**
 * Returns a hash code suitable for phash_map.
 */ 1 4 this 3 2011  
469 0 0 6 541 1938 0 0 42 /**
 * Returns the name of the button.
 */ 1 4 this 3 2011  
470 0 0 6 542 1813 0 0 121 /**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */ 1 4 this 3 2011  
471 0 0 6 543 1859 0 0 109 /**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */ 1 4 this 3 2011  
472 0 0 7 544 2010 1371 0 373 /**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */ 1 4 this 3 2011  
473 0 0 6 545 1813 0 0 263 /**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */ 2 4 this 3 2011  5 other 1 2011  
474 0 0 6 546 1812 0 0 363 /**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */ 1 4 this 3 2011  
475 0 0 4 547 1942 0 0 10 /**
 *
 */ 2 4 this 3 2011  3 out 1 1946  
476 0 0 7 548 2010 1371 0 92 /**
 * Returns a special zero-valued ButtonHandle that is used to indicate no
 * button.
 */ 0 
477 0 0 7 557 1949 0 0 0 0 
478 0 0 6 549 1813 0 0 0 1 4 this 3 2011  
479 0 0 7 565 2015 1378 0 0 1 6 param0 0 2013  
480 0 0 7 560 2010 1371 0 150 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */ 2 4 this 3 2015  4 name 1 1938  
481 0 0 7 561 2010 1371 0 144 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */ 2 4 this 3 2015  4 name 1 1938  
482 0 0 7 562 2010 1371 0 169 /**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */ 2 4 this 3 2013  16 ascii_equivalent 1 1859  
483 0 0 4 563 1942 0 0 10 /**
 *
 */ 2 4 this 3 2013  3 out 1 1946  
484 0 0 6 564 2015 0 0 67 /**
 * Returns the pointer to the global ButtonRegistry object.
 */ 0 
485 0 0 7 576 2016 1387 0 0 0 
486 0 0 7 576 2016 1387 0 0 1 6 param0 0 2017  
487 0 0 6 569 2007 0 0 76 /**
 * Returns the number of buttons that this button mapping specifies.
 */ 1 4 this 3 2017  
488 0 0 7 570 2010 1371 0 76 /**
 * Returns the underlying raw button associated with the nth button.
 */ 2 4 this 3 2017  1 i 1 2007  
489 0 0 7 571 2010 1371 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2017  3 raw 1 2010  
490 0 0 7 571 2010 1371 0 101 /**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */ 2 4 this 3 2017  1 i 1 2007  
491 0 0 7 571 2010 1371 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2017  8 raw_name 1 1938  
492 0 0 6 572 1938 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2017  3 raw 1 2010  
493 0 0 6 572 1938 0 0 127 /**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */ 2 4 this 3 2017  1 i 1 2007  
494 0 0 6 572 1938 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2017  8 raw_name 1 1938  
495 0 0 4 573 1942 0 0 10 /**
 *
 */ 2 4 this 3 2017  3 out 1 1946  
496 0 0 4 574 1942 0 0 10 /**
 *
 */ 3 4 this 3 2017  3 out 1 1946  12 indent_level 1 1812  
497 0 0 7 575 1949 0 0 0 0 
498 0 0 7 582 2021 1392 0 0 1 6 param0 0 2019  
499 0 0 4 579 1942 0 0 10 /**
 *
 */ 2 4 this 3 2019  3 out 1 1946  
500 0 0 7 580 2021 1392 0 0 1 8 function 1 1841  
501 0 0 7 581 1949 0 0 0 0 
502 0 0 6 585 1812 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2022  
503 0 0 4 586 1942 0 0 108 /**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 2022  
504 0 0 6 587 1813 0 0 202 /**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2022  
505 0 0 6 588 1813 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2022  
506 0 0 7 590 1949 0 0 0 0 
507 0 0 4 592 1942 0 0 10 /**
 *
 */ 2 4 this 3 2024  3 out 1 1946  
508 0 0 4 593 1942 0 0 159 /**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */ 1 4 this 3 2026  
509 0 0 7 594 1949 0 0 0 0 
510 0 0 7 597 2027 1392 0 10 /**
 *
 */ 1 8 function 1 1841  
511 0 0 7 597 2027 1392 0 0 1 6 param0 0 2028  
512 0 0 4 598 1942 0 0 0 2 4 this 3 2027  4 size 1 2007  
513 0 0 4 601 1942 0 0 126 /**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */ 2 4 this 3 2027  8 function 1 1841  
514 0 0 6 602 1841 0 0 64 /**
 * Returns the function that is called for the callback.
 */ 1 4 this 3 2027  
515 0 0 7 604 1949 0 0 0 0 
516 0 0 7 606 2030 1414 0 10 /**
 *
 */ 0 
517 0 0 6 607 1869 0 0 10 /**
 *
 */ 1 4 this 3 2031  
518 0 0 6 608 1869 0 0 10 /**
 *
 */ 1 4 this 3 2031  
519 0 0 4 613 1942 0 0 0 2 4 this 3 2030  5 value 1 1868  
520 0 0 4 612 1942 0 0 0 1 4 this 3 2031  
521 0 0 7 618 2033 0 0 10 /**
 *
 */ 0 
522 0 0 7 618 2033 0 0 10 /**
 *
 */ 1 4 copy 1 2034  
523 0 0 4 619 1942 0 0 1841 /**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */ 2 4 this 3 2033  4 mode 1 1872  
524 0 0 6 620 1872 0 0 66 /**
 * Returns the current mode of the clock.  See set_mode().
 */ 1 4 this 3 2034  
525 0 0 6 622 1811 0 0 350 /**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */ 2 4 this 3 2034  14 current_thread 1 2036  
526 0 0 6 623 1811 0 0 434 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */ 1 4 this 3 2034  
527 0 0 6 624 1811 0 0 440 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */ 1 4 this 3 2034  
528 0 0 4 625 1942 0 0 75 /**
 * Simultaneously resets both the time and the frame count to zero.
 */ 1 4 this 3 2033  
529 0 0 4 626 1942 0 0 316 /**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */ 2 4 this 3 2033  4 time 1 1811  
530 0 0 4 627 1942 0 0 215 /**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */ 3 4 this 3 2033  4 time 1 1811  14 current_thread 1 2036  
531 0 0 4 628 1942 0 0 132 /**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */ 3 4 this 3 2033  11 frame_count 1 1812  14 current_thread 1 2036  
532 0 0 6 629 1812 0 0 195 /**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */ 2 4 this 3 2034  14 current_thread 1 2036  
533 0 0 6 630 1811 0 0 245 /**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */ 2 4 this 3 2034  14 current_thread 1 2036  
534 0 0 6 635 1811 0 0 130 /**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */ 2 4 this 3 2034  14 current_thread 1 2036  
535 0 0 4 636 1942 0 0 291 /**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */ 2 4 this 3 2033  2 dt 1 1811  
536 0 0 4 637 1942 0 0 291 /**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */ 2 4 this 3 2033  10 frame_rate 1 1811  
537 0 0 6 639 1811 0 0 106 /**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */ 1 4 this 3 2034  
538 0 0 4 640 1942 0 0 511 /**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */ 2 4 this 3 2033  6 max_dt 1 1811  
539 0 0 6 642 1811 0 0 265 /**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 1 4 this 3 2034  
540 0 0 4 643 1942 0 0 262 /**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 2 4 this 3 2033  14 degrade_factor 1 1811  
541 0 0 4 645 1942 0 0 393 /**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */ 2 4 this 3 2033  4 time 1 1811  
542 0 0 6 646 1811 0 0 162 /**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */ 1 4 this 3 2034  
543 0 0 6 648 1811 0 0 214 /**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */ 2 4 this 3 2034  14 current_thread 1 2036  
544 0 0 6 649 1811 0 0 105 /**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */ 2 4 this 3 2034  14 current_thread 1 2036  
545 0 0 6 650 1811 0 0 539 /**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */ 2 4 this 3 2034  14 current_thread 1 2036  
546 0 0 4 653 1942 0 0 285 /**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */ 2 4 this 3 2033  14 current_thread 1 2036  
547 0 0 4 654 1942 0 0 417 /**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */ 2 4 this 3 2033  14 current_thread 1 2036  
548 0 0 6 655 1813 0 0 322 /**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */ 2 4 this 3 2033  14 current_thread 1 2036  
549 0 0 7 656 2033 0 0 159 /**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */ 0 
550 0 0 7 657 1949 0 0 0 0 
551 0 0 4 665 1942 0 0 62 /**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */ 1 4 this 3 2038  
552 0 0 6 666 1813 0 0 64 /**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */ 1 4 this 3 2038  
553 0 0 7 667 1949 0 0 0 0 
554 0 0 7 670 2040 0 0 10 /**
 *
 */ 0 
555 0 0 6 671 1813 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2040  4 file 1 2041  
556 0 0 6 671 1813 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2040  8 filename 1 1967  
557 0 0 6 671 1813 0 0 230 /**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2040  2 in 1 2044  8 filename 1 1967  
558 0 0 6 672 2044 0 0 61 /**
 * Returns the istream represented by the input file.
 */ 1 4 this 3 2040  
559 0 0 4 673 1942 0 0 98 /**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */ 1 4 this 3 2040  
560 0 0 7 676 2046 1464 0 0 0 
561 0 0 7 676 2046 1464 0 0 1 4 copy 1 2047  
562 0 0 6 677 2046 0 0 0 2 4 this 3 2046  4 copy 1 2047  
563 0 0 7 678 2046 1464 0 0 0 
564 0 0 7 679 2046 1464 0 0 0 
565 0 0 7 680 2046 1464 0 0 1 7 on_bits 1 1812  
566 0 0 7 681 2046 1464 0 0 1 5 index 1 1812  
567 0 0 7 682 2046 1464 0 0 2 7 low_bit 1 1812  4 size 1 1812  
568 0 0 6 684 1813 0 0 0 0 
569 0 0 6 685 1812 0 0 0 0 
570 0 0 6 686 1812 0 0 0 0 
571 0 0 6 687 1813 0 0 0 2 4 this 3 2047  5 index 1 1812  
572 0 0 4 688 1942 0 0 0 2 4 this 3 2046  5 index 1 1812  
573 0 0 4 689 1942 0 0 0 2 4 this 3 2046  5 index 1 1812  
574 0 0 4 690 1942 0 0 0 3 4 this 3 2046  5 index 1 1812  5 value 1 1813  
575 0 0 6 691 1813 0 0 0 1 4 this 3 2047  
576 0 0 6 692 1813 0 0 0 1 4 this 3 2047  
577 0 0 6 693 1994 0 0 0 3 4 this 3 2047  7 low_bit 1 1812  4 size 1 1812  
578 0 0 4 694 1942 0 0 0 4 4 this 3 2046  5 value 1 1994  7 low_bit 1 1812  4 size 1 1812  
579 0 0 6 695 1813 0 0 0 3 4 this 3 2047  7 low_bit 1 1812  4 size 1 1812  
580 0 0 6 696 1813 0 0 0 3 4 this 3 2047  7 low_bit 1 1812  4 size 1 1812  
581 0 0 4 697 1942 0 0 0 3 4 this 3 2046  7 low_bit 1 1812  4 size 1 1812  
582 0 0 4 698 1942 0 0 0 3 4 this 3 2046  7 low_bit 1 1812  4 size 1 1812  
583 0 0 4 699 1942 0 0 0 4 4 this 3 2046  5 value 1 1813  7 low_bit 1 1812  4 size 1 1812  
584 0 0 6 700 1812 0 0 0 1 4 this 3 2047  
585 0 0 6 701 1812 0 0 0 1 4 this 3 2047  
586 0 0 6 702 1812 0 0 0 1 4 this 3 2047  
587 0 0 6 703 1812 0 0 0 1 4 this 3 2047  
588 0 0 6 704 1812 0 0 0 1 4 this 3 2047  
589 0 0 6 705 1812 0 0 0 1 4 this 3 2047  
590 0 0 6 706 1812 0 0 0 2 4 this 3 2047  7 low_bit 1 1812  
591 0 0 4 707 1942 0 0 0 1 4 this 3 2046  
592 0 0 6 708 1813 0 0 0 2 4 this 3 2047  5 other 1 2047  
593 0 0 4 709 1942 0 0 0 1 4 this 3 2046  
594 0 0 4 710 1942 0 0 0 2 4 this 3 2047  3 out 1 1946  
595 0 0 4 711 1942 0 0 0 3 4 this 3 2047  3 out 1 1946  12 spaces_every 1 1812  
596 0 0 4 712 1942 0 0 0 3 4 this 3 2047  3 out 1 1946  12 spaces_every 1 1812  
597 0 0 4 713 1942 0 0 0 3 4 this 3 2047  3 out 1 1946  12 indent_level 1 1812  
598 0 0 6 714 1813 0 0 0 2 4 this 3 2047  5 other 1 2047  
599 0 0 6 715 1813 0 0 0 2 4 this 3 2047  5 other 1 2047  
600 0 0 6 716 1813 0 0 0 2 4 this 3 2047  5 other 1 2047  
601 0 0 6 717 1812 0 0 0 2 4 this 3 2047  5 other 1 2047  
602 0 0 7 718 2046 1464 0 0 2 4 this 3 2047  5 other 1 2047  
603 0 0 7 719 2046 1464 0 0 2 4 this 3 2047  5 other 1 2047  
604 0 0 7 720 2046 1464 0 0 2 4 this 3 2047  5 other 1 2047  
605 0 0 7 721 2046 1464 0 0 1 4 this 3 2047  
606 0 0 7 722 2046 1464 0 0 2 4 this 3 2047  5 shift 1 1812  
607 0 0 7 723 2046 1464 0 0 2 4 this 3 2047  5 shift 1 1812  
608 0 0 6 724 2046 0 0 0 2 4 this 3 2046  5 other 1 2047  
609 0 0 6 725 2046 0 0 0 2 4 this 3 2046  5 other 1 2047  
610 0 0 6 726 2046 0 0 0 2 4 this 3 2046  5 other 1 2047  
611 0 0 6 727 2046 0 0 0 2 4 this 3 2046  5 shift 1 1812  
612 0 0 6 728 2046 0 0 0 2 4 this 3 2046  5 shift 1 1812  
613 0 0 7 729 1949 0 0 0 0 
614 0 0 7 732 2049 1518 0 0 0 
615 0 0 7 732 2049 1518 0 0 1 4 copy 1 2050  
616 0 0 6 733 2049 0 0 0 2 4 this 3 2049  4 copy 1 2050  
617 0 0 7 734 2049 1518 0 0 0 
618 0 0 7 735 2049 1518 0 0 0 
619 0 0 7 736 2049 1518 0 0 1 7 on_bits 1 1812  
620 0 0 7 737 2049 1518 0 0 1 5 index 1 1812  
621 0 0 7 738 2049 1518 0 0 2 7 low_bit 1 1812  4 size 1 1812  
622 0 0 6 740 1813 0 0 0 0 
623 0 0 6 741 1812 0 0 0 0 
624 0 0 6 742 1812 0 0 0 0 
625 0 0 6 743 1813 0 0 0 2 4 this 3 2050  5 index 1 1812  
626 0 0 4 744 1942 0 0 0 2 4 this 3 2049  5 index 1 1812  
627 0 0 4 745 1942 0 0 0 2 4 this 3 2049  5 index 1 1812  
628 0 0 4 746 1942 0 0 0 3 4 this 3 2049  5 index 1 1812  5 value 1 1813  
629 0 0 6 747 1813 0 0 0 1 4 this 3 2050  
630 0 0 6 748 1813 0 0 0 1 4 this 3 2050  
631 0 0 6 749 1994 0 0 0 3 4 this 3 2050  7 low_bit 1 1812  4 size 1 1812  
632 0 0 4 750 1942 0 0 0 4 4 this 3 2049  5 value 1 1994  7 low_bit 1 1812  4 size 1 1812  
633 0 0 6 751 1813 0 0 0 3 4 this 3 2050  7 low_bit 1 1812  4 size 1 1812  
634 0 0 6 752 1813 0 0 0 3 4 this 3 2050  7 low_bit 1 1812  4 size 1 1812  
635 0 0 4 753 1942 0 0 0 3 4 this 3 2049  7 low_bit 1 1812  4 size 1 1812  
636 0 0 4 754 1942 0 0 0 3 4 this 3 2049  7 low_bit 1 1812  4 size 1 1812  
637 0 0 4 755 1942 0 0 0 4 4 this 3 2049  5 value 1 1813  7 low_bit 1 1812  4 size 1 1812  
638 0 0 6 756 1812 0 0 0 1 4 this 3 2050  
639 0 0 6 757 1812 0 0 0 1 4 this 3 2050  
640 0 0 6 758 1812 0 0 0 1 4 this 3 2050  
641 0 0 6 759 1812 0 0 0 1 4 this 3 2050  
642 0 0 6 760 1812 0 0 0 1 4 this 3 2050  
643 0 0 6 761 1812 0 0 0 1 4 this 3 2050  
644 0 0 6 762 1812 0 0 0 2 4 this 3 2050  7 low_bit 1 1812  
645 0 0 4 763 1942 0 0 0 1 4 this 3 2049  
646 0 0 6 764 1813 0 0 0 2 4 this 3 2050  5 other 1 2050  
647 0 0 4 765 1942 0 0 0 1 4 this 3 2049  
648 0 0 4 766 1942 0 0 0 2 4 this 3 2050  3 out 1 1946  
649 0 0 4 767 1942 0 0 0 3 4 this 3 2050  3 out 1 1946  12 spaces_every 1 1812  
650 0 0 4 768 1942 0 0 0 3 4 this 3 2050  3 out 1 1946  12 spaces_every 1 1812  
651 0 0 4 769 1942 0 0 0 3 4 this 3 2050  3 out 1 1946  12 indent_level 1 1812  
652 0 0 6 770 1813 0 0 0 2 4 this 3 2050  5 other 1 2050  
653 0 0 6 771 1813 0 0 0 2 4 this 3 2050  5 other 1 2050  
654 0 0 6 772 1813 0 0 0 2 4 this 3 2050  5 other 1 2050  
655 0 0 6 773 1812 0 0 0 2 4 this 3 2050  5 other 1 2050  
656 0 0 7 774 2049 1518 0 0 2 4 this 3 2050  5 other 1 2050  
657 0 0 7 775 2049 1518 0 0 2 4 this 3 2050  5 other 1 2050  
658 0 0 7 776 2049 1518 0 0 2 4 this 3 2050  5 other 1 2050  
659 0 0 7 777 2049 1518 0 0 1 4 this 3 2050  
660 0 0 7 778 2049 1518 0 0 2 4 this 3 2050  5 shift 1 1812  
661 0 0 7 779 2049 1518 0 0 2 4 this 3 2050  5 shift 1 1812  
662 0 0 6 780 2049 0 0 0 2 4 this 3 2049  5 other 1 2050  
663 0 0 6 781 2049 0 0 0 2 4 this 3 2049  5 other 1 2050  
664 0 0 6 782 2049 0 0 0 2 4 this 3 2049  5 other 1 2050  
665 0 0 6 783 2049 0 0 0 2 4 this 3 2049  5 shift 1 1812  
666 0 0 6 784 2049 0 0 0 2 4 this 3 2049  5 shift 1 1812  
667 0 0 7 785 1949 0 0 0 0 
668 0 0 7 841 2052 1618 0 0 0 
669 0 0 7 841 2052 1618 0 0 1 6 param0 0 2053  
670 0 0 7 789 2010 1371 0 144 /**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */ 1 16 ascii_equivalent 1 1859  
671 0 0 7 790 2010 1371 0 0 0 
672 0 0 7 791 2010 1371 0 0 0 
673 0 0 7 792 2010 1371 0 0 0 
674 0 0 7 793 2010 1371 0 0 0 
675 0 0 7 794 2010 1371 0 0 0 
676 0 0 7 795 2010 1371 0 0 0 
677 0 0 7 796 2010 1371 0 0 0 
678 0 0 7 797 2010 1371 0 0 0 
679 0 0 7 798 2010 1371 0 0 0 
680 0 0 7 799 2010 1371 0 0 0 
681 0 0 7 800 2010 1371 0 0 0 
682 0 0 7 801 2010 1371 0 0 0 
683 0 0 7 802 2010 1371 0 0 0 
684 0 0 7 803 2010 1371 0 0 0 
685 0 0 7 804 2010 1371 0 0 0 
686 0 0 7 805 2010 1371 0 0 0 
687 0 0 7 806 2010 1371 0 0 0 
688 0 0 7 807 2010 1371 0 59 // PC keyboards don't have these four buttons, but Macs do. 0 
689 0 0 7 808 2010 1371 0 0 0 
690 0 0 7 809 2010 1371 0 0 0 
691 0 0 7 810 2010 1371 0 0 0 
692 0 0 7 811 2010 1371 0 0 0 
693 0 0 7 812 2010 1371 0 0 0 
694 0 0 7 813 2010 1371 0 0 0 
695 0 0 7 814 2010 1371 0 0 0 
696 0 0 7 815 2010 1371 0 0 0 
697 0 0 7 816 2010 1371 0 0 0 
698 0 0 7 817 2010 1371 0 0 0 
699 0 0 7 818 2010 1371 0 0 0 
700 0 0 7 819 2010 1371 0 0 0 
701 0 0 7 820 2010 1371 0 27 // delete is a C++ keyword. 0 
702 0 0 7 821 2010 1371 0 27 // delete is a C++ keyword. 0 
703 0 0 7 822 2010 1371 0 0 0 
704 0 0 7 823 2010 1371 0 0 0 
705 0 0 7 824 2010 1371 0 0 0 
706 0 0 7 825 2010 1371 0 0 0 
707 0 0 7 826 2010 1371 0 0 0 
708 0 0 7 827 2010 1371 0 0 0 
709 0 0 7 828 2010 1371 0 0 0 
710 0 0 7 829 2010 1371 0 0 0 
711 0 0 7 830 2010 1371 0 0 0 
712 0 0 7 831 2010 1371 0 0 0 
713 0 0 7 832 2010 1371 0 0 0 
714 0 0 7 833 2010 1371 0 0 0 
715 0 0 7 834 2010 1371 0 0 0 
716 0 0 7 835 2010 1371 0 0 0 
717 0 0 7 836 2010 1371 0 0 0 
718 0 0 7 837 2010 1371 0 0 0 
719 0 0 7 838 2010 1371 0 0 0 
720 0 0 7 839 2010 1371 0 0 0 
721 0 0 7 840 2010 1371 0 0 0 
722 0 0 7 848 2055 1624 0 10 /**
 *
 */ 0 
723 0 0 7 848 2055 1624 0 10 /**
 *
 */ 1 4 copy 1 2056  
724 0 0 6 850 2055 0 0 0 2 4 this 3 2055  4 copy 1 2056  
725 0 0 6 851 1813 0 0 0 2 4 this 3 2056  5 other 1 2056  
726 0 0 6 852 1813 0 0 0 2 4 this 3 2056  5 other 1 2056  
727 0 0 6 853 1813 0 0 0 2 4 this 3 2056  5 other 1 2056  
728 0 0 7 854 2055 1624 0 0 2 4 this 3 2056  5 other 1 2056  
729 0 0 7 855 2055 1624 0 0 2 4 this 3 2056  5 other 1 2056  
730 0 0 6 856 2055 0 0 0 2 4 this 3 2055  5 other 1 2056  
731 0 0 6 857 2055 0 0 0 2 4 this 3 2055  5 other 1 2056  
732 0 0 4 858 1942 0 0 374 /**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */ 2 4 this 3 2055  5 other 1 2056  
733 0 0 6 859 1813 0 0 232 /**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */ 2 4 this 3 2056  5 other 1 2056  
734 0 0 6 860 1813 0 0 248 /**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */ 2 4 this 3 2055  6 button 1 2010  
735 0 0 6 861 1813 0 0 109 /**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */ 2 4 this 3 2056  6 button 1 2010  
736 0 0 6 862 1813 0 0 313 /**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */ 2 4 this 3 2055  6 button 1 2010  
737 0 0 6 863 1812 0 0 143 /**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */ 1 4 this 3 2056  
738 0 0 7 864 2010 1371 0 185 /**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */ 2 4 this 3 2056  5 index 1 1812  
739 0 0 6 867 1813 0 0 305 /**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2055  6 button 1 2010  
740 0 0 6 868 1813 0 0 306 /**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2055  6 button 1 2010  
741 0 0 4 869 1942 0 0 66 /**
 * Marks all monitored buttons as being in the "up" state.
 */ 1 4 this 3 2055  
742 0 0 6 870 1813 0 0 157 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */ 2 4 this 3 2056  6 button 1 2010  
743 0 0 6 870 1813 0 0 105 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */ 2 4 this 3 2056  5 index 1 1812  
744 0 0 6 871 1813 0 0 109 /**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */ 1 4 this 3 2056  
745 0 0 6 872 1938 0 0 150 /**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */ 1 4 this 3 2056  
746 0 0 4 873 1942 0 0 69 /**
 * Writes a one-line summary of the buttons known to be down.
 */ 2 4 this 3 2056  3 out 1 1946  
747 0 0 4 874 1942 0 0 123 /**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */ 2 4 this 3 2056  3 out 1 1946  
748 0 0 7 887 2058 1660 0 0 0 
749 0 0 7 887 2058 1660 0 0 1 6 param0 0 2059  
750 0 0 7 876 2010 1371 0 166 /**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */ 1 13 button_number 1 1812  
751 0 0 7 877 2010 1371 0 75 /**
 * Returns the ButtonHandle associated with the first mouse button.
 */ 0 
752 0 0 7 878 2010 1371 0 76 /**
 * Returns the ButtonHandle associated with the second mouse button.
 */ 0 
753 0 0 7 879 2010 1371 0 75 /**
 * Returns the ButtonHandle associated with the third mouse button.
 */ 0 
754 0 0 7 880 2010 1371 0 76 /**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */ 0 
755 0 0 7 881 2010 1371 0 75 /**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */ 0 
756 0 0 7 882 2010 1371 0 98 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */ 0 
757 0 0 7 883 2010 1371 0 100 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */ 0 
758 0 0 7 884 2010 1371 0 148 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
759 0 0 7 885 2010 1371 0 149 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
760 0 0 6 886 1813 0 0 117 /**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */ 1 6 button 1 2010  
761 0 0 7 890 2061 1667 0 10 /**
 *
 */ 0 
762 0 0 7 890 2061 1667 0 10 /**
 *
 */ 1 4 copy 1 2062  
763 0 0 6 891 2061 0 0 0 2 4 this 3 2061  4 copy 1 2062  
764 0 0 6 892 1811 0 0 10 /**
 *
 */ 1 4 this 3 2062  
765 0 0 6 893 1811 0 0 10 /**
 *
 */ 1 4 this 3 2062  
766 0 0 6 894 1813 0 0 10 /**
 *
 */ 1 4 this 3 2062  
767 0 0 4 895 1942 0 0 10 /**
 *
 */ 2 4 this 3 2062  3 out 1 1946  
768 0 0 6 901 1812 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2064  
769 0 0 4 902 1942 0 0 349 /**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 2064  
770 0 0 6 903 1813 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2064  
771 0 0 6 904 1813 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2064  
772 0 0 6 906 1812 0 0 293 /**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */ 1 4 this 3 2064  
773 0 0 7 907 1949 0 0 0 0 
774 0 0 7 909 2066 1726 0 10 /**
 *
 */ 0 
775 0 0 7 909 2066 1726 0 10 /**
 *
 */ 1 4 from 1 2002  
776 0 0 7 909 2066 1726 0 0 1 6 param0 0 2005  
777 0 0 7 910 2066 1726 0 72 /**
 * Returns a SparseArray with an infinite array of bits, all on.
 */ 0 
778 0 0 7 911 2066 1726 0 56 /**
 * Returns a SparseArray whose bits are all off.
 */ 0 
779 0 0 7 912 2066 1726 0 65 /**
 * Returns a SparseArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1812  
780 0 0 7 913 2066 1726 0 64 /**
 * Returns a SparseArray with only the indicated bit on.
 */ 1 5 index 1 1812  
781 0 0 7 914 2066 1726 0 79 /**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1812  4 size 1 1812  
782 0 0 6 915 1813 0 0 393 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */ 0 
783 0 0 6 916 1812 0 0 428 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */ 0 
784 0 0 6 917 1812 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2005  
785 0 0 6 918 1813 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2005  5 index 1 1812  
786 0 0 4 919 1942 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2066  5 index 1 1812  
787 0 0 4 920 1942 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2066  5 index 1 1812  
788 0 0 4 921 1942 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2066  5 index 1 1812  5 value 1 1813  
789 0 0 6 922 1813 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2005  
790 0 0 6 923 1813 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2005  
791 0 0 6 924 1813 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2005  
792 0 0 6 925 1813 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2005  7 low_bit 1 1812  4 size 1 1812  
793 0 0 6 926 1813 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2005  7 low_bit 1 1812  4 size 1 1812  
794 0 0 4 927 1942 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2066  7 low_bit 1 1812  4 size 1 1812  
795 0 0 4 928 1942 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2066  7 low_bit 1 1812  4 size 1 1812  
796 0 0 4 929 1942 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2066  5 value 1 1813  7 low_bit 1 1812  4 size 1 1812  
797 0 0 6 930 1812 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2005  
798 0 0 6 931 1812 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2005  
799 0 0 6 932 1812 0 0 146 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2005  
800 0 0 6 933 1812 0 0 146 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2005  
801 0 0 6 934 1812 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2005  
802 0 0 6 935 1812 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2005  
803 0 0 6 936 1812 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2005  7 low_bit 1 1812  
804 0 0 4 937 1942 0 0 93 /**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2066  
805 0 0 6 938 1813 0 0 181 /**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2005  5 other 1 2005  
806 0 0 4 939 1942 0 0 52 /**
 * Sets all the bits in the SparseArray off.
 */ 1 4 this 3 2066  
807 0 0 4 940 1942 0 0 10 /**
 *
 */ 2 4 this 3 2005  3 out 1 1946  
808 0 0 6 941 1813 0 0 0 2 4 this 3 2005  5 other 1 2005  
809 0 0 6 942 1813 0 0 0 2 4 this 3 2005  5 other 1 2005  
810 0 0 6 943 1813 0 0 0 2 4 this 3 2005  5 other 1 2005  
811 0 0 6 944 1812 0 0 242 /**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */ 2 4 this 3 2005  5 other 1 2005  
812 0 0 7 945 2066 1726 0 0 2 4 this 3 2005  5 other 1 2005  
813 0 0 7 946 2066 1726 0 0 2 4 this 3 2005  5 other 1 2005  
814 0 0 7 947 2066 1726 0 0 2 4 this 3 2005  5 other 1 2005  
815 0 0 7 948 2066 1726 0 0 1 4 this 3 2005  
816 0 0 7 949 2066 1726 0 0 2 4 this 3 2005  5 shift 1 1812  
817 0 0 7 950 2066 1726 0 0 2 4 this 3 2005  5 shift 1 1812  
818 0 0 6 951 2066 0 0 0 2 4 this 3 2066  5 other 1 2005  
819 0 0 6 952 2066 0 0 0 2 4 this 3 2066  5 other 1 2005  
820 0 0 6 953 2066 0 0 0 2 4 this 3 2066  5 other 1 2005  
821 0 0 6 954 2066 0 0 0 2 4 this 3 2066  5 shift 1 1812  
822 0 0 6 955 2066 0 0 0 2 4 this 3 2066  5 shift 1 1812  
823 0 0 6 956 1813 0 0 330 /**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */ 1 4 this 3 2005  
824 0 0 6 957 2007 0 0 237 /**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */ 1 4 this 3 2005  
825 0 0 6 958 1812 0 0 94 /**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2005  1 n 1 2007  
826 0 0 6 959 1812 0 0 104 /**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2005  1 n 1 2007  
827 0 0 7 960 1949 0 0 0 0 
828 0 0 7 963 1949 0 0 52 /**
 * Returns the type of the underlying value.
 */ 1 4 this 3 2067  
829 0 0 4 964 1942 0 0 0 2 4 this 3 2067  3 out 1 1946  
830 0 0 7 965 1949 0 0 0 0 
831 0 0 7 967 2071 998 0 10 /**
 *
 */ 1 5 value 1 2069  
832 0 0 7 968 1891 0 0 55 /**
 * Retrieves the value stored in the parameter.
 */ 1 4 this 3 2072  
833 0 0 7 971 1949 0 0 0 0 
834 0 0 7 973 2074 998 0 0 1 5 value 1 1938  
835 0 0 4 974 1942 0 0 0 2 4 this 3 2074  5 value 1 1938  
836 0 0 6 975 1938 0 0 0 1 4 this 3 2075  
837 0 0 7 979 1949 0 0 0 0 
838 0 0 7 982 2077 998 0 0 1 5 value 1 1938  
839 0 0 4 983 1942 0 0 0 2 4 this 3 2077  5 value 1 1938  
840 0 0 6 984 1938 0 0 0 1 4 this 3 2078  
841 0 0 7 986 1949 0 0 0 0 
842 0 0 7 989 2083 998 0 0 1 5 value 1 2080  
843 0 0 4 990 1942 0 0 0 2 4 this 3 2083  5 value 1 2080  
844 0 0 6 991 2080 0 0 0 1 4 this 3 2084  
845 0 0 7 993 1949 0 0 0 0 
846 0 0 7 996 2089 998 0 0 1 5 value 1 2086  
847 0 0 4 997 1942 0 0 0 2 4 this 3 2089  5 value 1 2086  
848 0 0 6 998 2086 0 0 0 1 4 this 3 2090  
849 0 0 7 1000 1949 0 0 0 0 
850 0 0 7 1003 2095 998 0 0 1 5 value 1 2092  
851 0 0 4 1004 1942 0 0 0 2 4 this 3 2095  5 value 1 2092  
852 0 0 6 1005 2092 0 0 0 1 4 this 3 2096  
853 0 0 7 1007 1949 0 0 0 0 
854 0 0 7 1010 2101 998 0 0 1 5 value 1 2098  
855 0 0 4 1011 1942 0 0 0 2 4 this 3 2101  5 value 1 2098  
856 0 0 6 1012 2098 0 0 0 1 4 this 3 2102  
857 0 0 7 1014 1949 0 0 0 0 
858 0 0 7 1017 2107 998 0 0 1 5 value 1 2104  
859 0 0 4 1018 1942 0 0 0 2 4 this 3 2107  5 value 1 2104  
860 0 0 6 1019 2104 0 0 0 1 4 this 3 2108  
861 0 0 7 1021 1949 0 0 0 0 
862 0 0 7 1024 2113 998 0 0 1 5 value 1 2110  
863 0 0 4 1025 1942 0 0 0 2 4 this 3 2113  5 value 1 2110  
864 0 0 6 1026 2110 0 0 0 1 4 this 3 2114  
865 0 0 7 1028 1949 0 0 0 0 
866 0 0 7 1031 2119 998 0 0 1 5 value 1 2116  
867 0 0 4 1032 1942 0 0 0 2 4 this 3 2119  5 value 1 2116  
868 0 0 6 1033 2116 0 0 0 1 4 this 3 2120  
869 0 0 7 1035 1949 0 0 0 0 
870 0 0 7 1038 2125 998 0 0 1 5 value 1 2122  
871 0 0 4 1039 1942 0 0 0 2 4 this 3 2125  5 value 1 2122  
872 0 0 6 1040 2122 0 0 0 1 4 this 3 2126  
873 0 0 7 1042 1949 0 0 0 0 
874 0 0 7 1045 2131 998 0 0 1 5 value 1 2128  
875 0 0 4 1046 1942 0 0 0 2 4 this 3 2131  5 value 1 2128  
876 0 0 6 1047 2128 0 0 0 1 4 this 3 2132  
877 0 0 7 1049 1949 0 0 0 0 
878 0 0 7 1052 2137 998 0 0 1 5 value 1 2134  
879 0 0 4 1053 1942 0 0 0 2 4 this 3 2137  5 value 1 2134  
880 0 0 6 1054 2134 0 0 0 1 4 this 3 2138  
881 0 0 7 1056 1949 0 0 0 0 
882 0 0 7 1059 2143 998 0 0 1 5 value 1 2140  
883 0 0 4 1060 1942 0 0 0 2 4 this 3 2143  5 value 1 2140  
884 0 0 6 1061 2140 0 0 0 1 4 this 3 2144  
885 0 0 7 1063 1949 0 0 0 0 
886 0 0 7 1066 2149 998 0 0 1 5 value 1 2146  
887 0 0 4 1067 1942 0 0 0 2 4 this 3 2149  5 value 1 2146  
888 0 0 6 1068 2146 0 0 0 1 4 this 3 2150  
889 0 0 7 1070 1949 0 0 0 0 
890 0 0 7 1073 2155 998 0 0 1 5 value 1 2152  
891 0 0 4 1074 1942 0 0 0 2 4 this 3 2155  5 value 1 2152  
892 0 0 6 1075 2152 0 0 0 1 4 this 3 2156  
893 0 0 7 1077 1949 0 0 0 0 
894 0 0 7 1085 1949 0 0 0 0 
895 0 0 7 1088 2160 1796 0 0 1 6 param0 0 2158  
896 0 0 7 1088 2160 1796 0 56 /**
 * Create a free id pool in the range [min:max].
 */ 2 3 min 1 1994  3 max 1 1994  
897 0 0 6 1090 1994 0 0 134 /**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */ 1 4 this 3 2160  
898 0 0 4 1091 1942 0 0 518 /**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */ 2 4 this 3 2160  2 id 1 1994  
899 0 0 4 1092 1942 0 0 112 /**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */ 2 4 this 3 2160  5 index 1 1994  
900 0 0 6 1093 2161 0 0 117 /**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */ 1 4 this 3 2158  
901 0 0 4 1094 1942 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2158  3 out 1 1946  
902 0 0 4 1095 1942 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2158  3 out 1 1946  
903 0 0 6 660 1874 0 0 0 1 3 str 1 1938  
904 0 0 6 661 1938 0 0 0 1 2 cs 1 1874  
905 0 0 6 662 2163 0 0 0 0 
906 0 0 6 663 2163 0 0 0 0 
907 0 0 6 843 2165 0 0 602 /**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */ 1 8 filename 1 1967  
908 0 0 6 844 2165 0 0 396 /**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */ 2 4 name 1 1938  4 data 1 1938  
909 0 0 6 845 1813 0 0 0 1 4 page 1 2165  
910 0 0 4 846 1942 0 0 0 1 4 hash 1 2167  
911 0 0 6 1096 1841 0 0 203 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */ 2 10 this_class 1 1841  4 data 1 1938  
912 0 0 6 1097 1841 0 0 398 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */ 3 9 unpickler 1 1841  10 this_class 1 1841  4 data 1 1938  
364
1805 29 ConstPointerToArray< ushort > 0 141313 29 ConstPointerToArray< ushort > 29 ConstPointerToArray< ushort > 0 0 0 1 916 926 0 9 917 918 919 920 921 922 923 924 925 0 0 1 0 1806 0 0 0 0 0

1806 28 PointerToArrayBase< ushort > 0 26625 28 PointerToArrayBase< ushort > 28 PointerToArrayBase< ushort > 0 0 0 0 915 0 0 0 0 1 0 1807 0 0 0 0 0

1807 49 PointerToBase< ReferenceCountedVector< ushort > > 0 43009 49 PointerToBase< ReferenceCountedVector< ushort > > 49 PointerToBase< ReferenceCountedVector< ushort > > 0 0 0 0 0 0 2 913 914 0 0 1 0 1808 0 0 0 0 0

1808 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1809 24 PointerToArray< ushort > 0 141313 24 PointerToArray< ushort > 24 PointerToArray< ushort > 0 0 0 1 927 944 0 16 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 0 0 1 0 1806 0 0 0 0 0

1810 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 945 9 2169 2170 2171 2172 2173 2174 2175 2176 2177 17 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 0 0 0 0 0 226
/**
 * This is the fundamental interface for things that have a play/loop/stop
 * type interface for frame-based animation, such as animated characters.
 * This is the base class for AnimControl and other, similar classes.
 */

1811 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1812 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1813 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1814 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0
0 8 ATS_down 8 ATS_down 0
1 6 ATS_up 6 ATS_up 0
2 7 ATS_pad 7 ATS_pad 0
3 15 ATS_unspecified 15 ATS_unspecified 0
4 0 0

1815 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 963 983 1 2178 19 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 0 0 0 0 0 761
/**
 * This is a sequence number that increments monotonically.  It can be used to
 * track cache updates, or serve as a kind of timestamp for any changing
 * properties.
 *
 * A special class is used instead of simply an int, so we can elegantly
 * handle such things as wraparound and special cases.  There are two special
 * cases.  Firstly, a sequence number is 'initial' when it is first created.
 * This sequence is older than any other sequence number.  Secondly, a
 * sequence number may be explicitly set to 'old'.  This is older than any
 * other sequence number except 'initial'.  Finally, we have the explicit
 * number 'fresh', which is newer than any other sequence number.  All other
 * sequences are numeric and are monotonically increasing.
 */

1816 7 Integer 0 2367488 21 AtomicAdjust::Integer 21 AtomicAdjust::Integer 1817 0 1818 0 0 0 0 0 0 0 0 0 0

1817 12 AtomicAdjust 0 1024 12 AtomicAdjust 12 AtomicAdjust 0 0 0 0 0 0 0 0 0 0 0 0 0

1818 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1819 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 8 984 985 986 987 988 989 990 991 0 0 1 0 1820 0 0 0 0 135
/**
 * Base class for objects that can be written to and read from Bam files.
 *
 * See also TypedObject for detailed instructions.
 */

1820 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1821 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 998 0 2 996 997 0 0 2 3 1819 992 993 3 1822 994 995 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1822 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1823 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1003 5 2179 2180 2181 2182 2183 19 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 0 0 2 3 1821 999 1000 3 1824 1001 1002 0 0 231
/**
 * An instance of this class is written to the front of a Bam or Txo file to
 * make the file a cached instance of some other loadable resource.  This
 * record contains information needed to test the validity of the cache.
 */

1824 14 LinkedListNode 0 1050625 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 468
/**
 * This just stores the pointers to implement a doubly-linked list of some
 * kind of object.  There are occasions when a hand-rolled linked list is more
 * appropriate than an STL container.
 *
 * Typically, each node of the linked list, as well as the root of the list,
 * will inherit from this class.
 *
 * Note that this class is not inherently thread-safe; derived classes are
 * responsible for protecting any calls into it within mutexes, if necessary.
 */

1825 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1826 0 0 0 0 0 0 0 0 0 0

1826 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1827 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1818 0 0 0 0 0 0 0 0 0 0

1828 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1819 0 0 0 0 0 0 0 0 0 0

1829 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1023 1024 9 2184 2185 2186 2187 2188 2189 2190 2191 2192 26 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 0 0 0 0 0 615
/**
 * This class maintains a cache of Bam and/or Txo objects generated from model
 * files and texture images (as well as possibly other kinds of loadable
 * objects that can be stored in bam file format).
 *
 * This class also maintains a persistent index that lists all of the cached
 * objects (see BamCacheIndex). We go through some considerable effort to make
 * sure this index gets saved correctly to disk, even in the presence of
 * multiple different processes writing to the same index, and without relying
 * too heavily on low-level os-provided file locks (which work poorly with C++
 * iostreams).
 */

1830 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 1 1051 1052 0 0 0 0 0 0 3 1831 1832 1833 104
/**
 * This class exists just to provide scoping for the enums shared by BamReader
 * and BamWriter.
 */

1831 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1830 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0
0 15 BE_littleendian 25 BamEnums::BE_littleendian 0
1 9 BE_native 19 BamEnums::BE_native 0
1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only two
// possible values, either BE_bigendian or BE_littleendian; but through a
// preprocessor trick we also add BE_native, which is the same numerically
// as whichever value the hardware supports natively.

1832 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1830 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 0
0 7 BOC_pop 17 BamEnums::BOC_pop 0
1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 0
2 10 BOC_remove 20 BamEnums::BOC_remove 0
3 13 BOC_file_data 23 BamEnums::BOC_file_data 0
4 0 569
/*
 * This is the code written along with each object.  It is used to control
 * object scoping.  A BOC_push includes an object definition, and will always
 * be eventually paired with a BOC_pop (which does not).  A BOC_adjunct
 * includes an object definition but does not push the level; it is associated
 * with the current level.  BOC_remove lists object ID's that have been
 * deallocated on the sender end.  BOC_file_data may appear at any level and
 * indicates the following datagram contains auxiliary file data that may be
 * referenced by a later object.
 */

1833 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1830 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0
0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 0
1 12 BTM_relative 22 BamEnums::BTM_relative 0
2 12 BTM_basename 22 BamEnums::BTM_basename 0
3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 0
4 0 73
// This enum is used to control how textures are written to a bam stream.

1834 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1053 1064 4 2193 2194 2195 2196 10 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 0 0 0 0 2 1835 1836 65
/**
 * Specifies parameters that may be passed to the loader.
 */

1835 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1834 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 0
1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 0
2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 0
4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 0
8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 22
// skeleton + channels
12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 20
// disallow BamCache
16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 21
// disallow ModelPool
32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 19
// no_disk + no_ram
48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 23
// fail if not in cache
64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 35
// returned pointer might be shared
128 0 33
// Flags for loading model files.

1836 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1834 0 0 0 0 0 0 0 0 0 8 10 TF_preload 25 LoaderOptions::TF_preload 30
// Texture will have RAM image
4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 37
// Texture will have simple RAM image
8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 40
// If texture is Nx1, make a 1-d texture
16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 30
// Consider generating mipmaps
32 12 TF_multiview 27 LoaderOptions::TF_multiview 36
// Load a multiview texture in pages
64 10 TF_integer 25 LoaderOptions::TF_integer 35
// Load as an integer (RGB) texture
128 8 TF_float 23 LoaderOptions::TF_float 43
// Load as a floating-point (depth) texture
256 20 TF_allow_compression 35 LoaderOptions::TF_allow_compression 33
// Consider compressing RAM image
512 0 35
// Flags for loading texture files.

1837 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1065 1066 6 2197 2198 2199 2200 2201 2202 20 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 0 0 1 0 1830 0 0 0 0 1311
/**
 * This is the fundamental interface for extracting binary objects from a Bam
 * file, as generated by a BamWriter.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects
 * within the Bam file; the BamReader automatically manages these (with help
 * from code within each class) and restores the pointers correctly.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramGenerator of some kind, which is simply a
 * linear source of Datagrams.  It is probably from a disk file, but it might
 * conceivably be streamed directly from a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1838 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1839 0 0 0 0 0 0 0 0 0 0

1839 17 DatagramGenerator 0 2049 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1840 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1834 0 0 0 0 0 0 0 0 0 0

1841 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1842 0 0 0 0 0 0 0 0 0 0

1842 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1843 0 0 0 0 0 0 0 0 0 0

1843 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1844 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1087 1088 6 2203 2204 2205 2206 2207 2208 16 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 0 0 1 0 1830 0 0 0 0 1376
/**
 * This is the fundamental interface for writing binary objects to a Bam file,
 * to be extracted later by a BamReader.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects; the
 * BamWriter automatically manages these (with help from code within each
 * class) and writes all referenced objects to the file in such a way that the
 * pointers may be correctly restored later.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramSink of some kind, which simply accepts a
 * linear stream of Datagrams.  It is probably written to a disk file, but it
 * might conceivably be streamed directly to a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1845 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1846 0 0 0 0 0 0 0 0 0 0

1846 12 DatagramSink 0 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1847 23 BitMask< uint16_t, 16 > 0 141313 23 BitMask< uint16_t, 16 > 23 BitMask< uint16_t, 16 > 0 0 0 1 1105 1167 0 61 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 0 0 0 0 0 0

1848 9 BitMask16 0 2105345 9 BitMask16 9 BitMask16 0 0 1847 0 0 0 0 0 0 0 0 0 0

1849 23 BitMask< uint32_t, 32 > 0 141313 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 1 1168 1230 0 61 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 0 0 0 0 0 0

1850 9 BitMask32 0 2105345 9 BitMask32 9 BitMask32 0 0 1849 0 0 0 0 0 0 0 0 0 0

1851 23 BitMask< uint64_t, 64 > 0 141313 23 BitMask< uint64_t, 64 > 23 BitMask< uint64_t, 64 > 0 0 0 1 1231 1293 0 61 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 0 0 0 0 0 0

1852 9 BitMask64 0 2105345 9 BitMask64 9 BitMask64 0 0 1851 0 0 0 0 0 0 0 0 0 0

1853 13 BitMaskNative 0 1 13 BitMaskNative 13 BitMaskNative 0 0 0 0 0 0 0 0 0 0 0 0 0

1854 8 BitArray 0 141313 8 BitArray 8 BitArray 0 0 0 1 1294 1351 0 56 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 0 0 0 0 1 1855 210
/**
 * A dynamic array with an unlimited number of bits.
 *
 * This is similar to a BitMask, except it appears to contain an infinite
 * number of bits.  You can use it very much as you would use a BitMask.
 */

1855 0 0 794624 10 BitArray:: 0 1854 0 0 0 0 0 0 0 0 0 1 17 num_bits_per_word 27 BitArray::num_bits_per_word 0
32 0 0

1856 12 ButtonHandle 0 141313 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1352 1371 4 2209 2210 2211 2212 17 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1370 0 1 1369 0 0 0 162
/**
 * A ButtonHandle represents a single button from any device, including
 * keyboard buttons and mouse buttons (but see KeyboardButton and
 * MouseButton).
 */

1857 6 string 0 2105344 11 std::string 11 std::string 0 0 1858 0 0 0 0 0 0 0 0 0 0

1858 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1859 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1860 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 1 1377 1378 0 5 1372 1373 1374 1375 1376 0 0 0 0 0 188
/**
 * The ButtonRegistry class maintains all the assigned ButtonHandles in a
 * given system.  There should be only one ButtonRegistry class during the
 * lifetime of the application.
 */

1861 9 ButtonMap 0 141313 9 ButtonMap 9 ButtonMap 0 0 0 1 1386 1387 0 7 1379 1380 1381 1382 1383 1384 1385 0 0 1 0 1862 0 0 0 0 328
/**
 * This class represents a map containing all of the buttons of a (keyboard)
 * device, though it can also be used as a generic mapping between
 * ButtonHandles.  It maps an underlying 'raw' button to a 'virtual' button,
 * which may optionally be associated with an appropriate platform-specific
 * name for the button.
 */

1862 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1863 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 1 1391 1392 0 3 1388 1389 1390 0 0 1 0 1862 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1864 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 1 2213 5 1393 1394 1395 1396 1397 0 0 1 0 1821 0 0 0 0 722
/**
 * This is a special extension to ReferenceCount that includes dual reference
 * counts: the standard reference count number, which includes all references
 * to the object, and a separate number (the cache reference count) that
 * counts the number of references to the object just within its cache alone.
 * When get_ref_count() == get_cache_ref_count(), the object is not referenced
 * outside the cache.
 *
 * The cache refs must be explicitly maintained; there is no PointerTo<> class
 * to maintain the cache reference counts automatically.  The cache reference
 * count is automatically included in the overall reference count: calling
 * cache_ref() and cache_unref() automatically calls ref() and unref().
 */

1865 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1401 0 3 1398 1399 1400 0 0 1 0 1820 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1866 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1402 1392 1 2214 6 1403 1404 1405 1406 1407 1408 0 0 1 0 1863 0 0 0 0 158
/**
 * This is a specialization on CallbackObject to allow a callback to directly
 * call an arbitarary Python function.  Powerful!  But use with caution.
 */

1867 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1409 1414 1 2215 2 1410 1411 0 0 0 0 0 0

1868 9 ulong [2] 0 4202496 9 ulong [2] 9 ulong [2] 0 0 1869 2 0 0 0 0 0 0 0 0 0 0

1869 5 ulong 0 2105344 5 ulong 5 ulong 0 0 1870 0 0 0 0 0 0 0 0 0 0

1870 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1871 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1415 0 11 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 28 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 0 0 1 0 1822 0 0 0 1 1872 1000
/**
 * A ClockObject keeps track of elapsed real time and discrete time.  In
 * normal mode, get_frame_time() returns the time as of the last time tick()
 * was called.  This is the "discrete" time, and is usually used to get the
 * time as of, for instance, the beginning of the current frame.
 *
 * In other modes, as set by set_mode() or the clock-mode config variable,
 * get_frame_time() may return other values to simulate different timing
 * effects, for instance to perform non-real-time animation.  See set_mode().
 *
 * In all modes, get_real_time() always returns the elapsed real time in
 * seconds since the ClockObject was constructed, or since it was last reset.
 *
 * You can create your own ClockObject whenever you want to have your own
 * local timer.  There is also a default, global ClockObject intended to
 * represent global time for the application; this is normally set up to tick
 * every frame so that its get_frame_time() will return the time for the
 * current frame.
 */

1872 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1871 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0
0 15 M_non_real_time 28 ClockObject::M_non_real_time 0
1 8 M_forced 21 ClockObject::M_forced 0
2 9 M_degrade 22 ClockObject::M_degrade 0
3 7 M_slave 20 ClockObject::M_slave 0
4 9 M_limited 22 ClockObject::M_limited 0
5 9 M_integer 22 ClockObject::M_integer 0
6 17 M_integer_limited 30 ClockObject::M_integer_limited 0
7 0 0

1873 11 CollideMask 0 2105345 11 CollideMask 11 CollideMask 0 0 1850 0 0 0 0 0 0 0 0 0 0

1874 10 ColorSpace 0 532481 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that a color
// space has not been specified.
0 9 CS_linear 9 CS_linear 389
// CS_linear is not a color space per se, but represents the working color
// space of graphics APIs, which is linearized.  Since the conversion from
// sRGB to linear is defined, one could posit that it has the ITU-R BT.709
// primaries, but this isn't meaningful as modern graphics APIs do not
// perform color management.  All colors in Panda3D are linear unless
// otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as used by
// the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding color
// values in the -0.5...7.4999 range.
3 0 0

1875 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1451 0 3 1448 1449 1450 0 0 1 0 1864 0 0 0 0 169
/**
 * This base class provides basic reference counting, but also can be used
 * with a CopyOnWritePointer to provide get_read_pointer() and
 * get_write_pointer().
 */

1876 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1452 0 0 4 1453 1454 1455 1456 0 0 1 0 1839 0 0 0 0 130
/**
 * This class can be used to read a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

1877 30 DoubleBitMask< BitMaskNative > 0 26625 30 DoubleBitMask< BitMaskNative > 30 DoubleBitMask< BitMaskNative > 0 0 0 1 1457 1464 0 52 1458 1459 1460 1461 1462 1463 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 0 0 0 0 0 0

1878 19 DoubleBitMaskNative 0 2105345 19 DoubleBitMaskNative 19 DoubleBitMaskNative 0 0 1877 0 0 0 0 0 0 0 0 0 0

1879 36 DoubleBitMask< DoubleBitMaskNative > 0 26625 36 DoubleBitMask< DoubleBitMaskNative > 36 DoubleBitMask< DoubleBitMaskNative > 0 0 0 1 1511 1518 0 52 1512 1513 1514 1515 1516 1517 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 0 0 0 0 0 0

1880 17 QuadBitMaskNative 0 2105345 17 QuadBitMaskNative 17 QuadBitMaskNative 0 0 1879 0 0 0 0 0 0 0 0 0 0

1881 8 DrawMask 0 2105345 8 DrawMask 8 DrawMask 0 0 1850 0 0 0 0 0 0 0 0 0 0

1882 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 1 1617 1618 0 52 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard keyboard keys.
 */

1883 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1623 1624 1 2227 23 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1 2247 0 0 0 0 135
/**
 * This class monitors the state of a number of individual buttons and tracks
 * whether each button is known to be down or up.
 */

1884 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 1 1659 1660 0 11 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard mouse buttons.
 */

1885 9 MouseData 0 141313 9 MouseData 9 MouseData 0 0 0 1 1661 1667 3 2228 2229 2230 5 1662 1663 1664 1665 1666 0 0 0 0 0 124
/**
 * Holds the data that might be generated by a 2-d pointer input device, such
 * as the mouse in the GraphicsWindow.
 */

1886 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1668 1669 1670 1671 1672 1673 0 0 1 0 1864 0 0 0 1 1887 1495
/**
 * This class further specializes CachedTypedWritableReferenceCount to also
 * add a node_ref_count, for the purposes of counting the number of times the
 * object is referenced by a "node", presumably a PandaNode.
 *
 * This essentially combines the functionality of NodeReferenceCount and
 * CachedTypedWritableReferenceCount, so that a derivative of this object
 * actually has three counters: the standard reference count, the "cache"
 * reference count, and the "node" reference count.  Rather than multiply
 * inheriting from the two reference count classes, we inherit only from
 * CachedTypedWritableReferenceCount and simply duplicate the functionality of
 * NodeReferenceCount, to avoid all of the problems associated with multiple
 * inheritance.
 *
 * The intended design is to use this as a base class for RenderState and
 * TransformState, both of which are held by PandaNodes, and also have caches
 * which are independently maintained.  By keeping track of how many nodes
 * hold a pointer to a particular object, we can classify each object into
 * node-referenced, cache-referenced, or other, which is primarily useful for
 * PStats reporting.
 *
 * As with CachedTypedWritableReferenceCount's cache_ref() and cache_unref(),
 * the new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  In this case, however,
 * there does exist a NodePointerTo<> class to maintain the node_ref counters
 * automatically.
 */

1887 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 1886 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 0
1 7 R_cache 33 NodeCachedReferenceCount::R_cache 0
2 0 0

1888 11 SparseArray 0 141313 11 SparseArray 11 SparseArray 0 0 0 1 1674 1726 0 51 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 0 0 0 0 0 736
/**
 * This class records a set of integers, where each integer is either present
 * or not present in the set.
 *
 * It is similar in principle and in interface to a BitArray (which can be
 * thought of as a set of integers, one integer corresponding to each
 * different bit position), but the SparseArray is implemented as a list of
 * min/max subrange lists, rather than as a bitmask.
 *
 * This makes it particularly efficient for storing sets which consist of
 * large sections of consecutively included or consecutively excluded
 * elements, with arbitrarily large integers, but particularly inefficient for
 * doing boolean operations such as & or |.
 *
 * Also, unlike BitArray, the SparseArray can store negative integers.
 */

1889 14 ParamValueBase 0 75777 14 ParamValueBase 14 ParamValueBase 0 0 0 0 998 0 3 1727 1728 1729 0 0 1 0 1821 0 0 0 0 141
/**
 * A non-template base class of ParamValue (below), which serves mainly to
 * define the placeholder for the virtual output function.
 */

1890 18 ParamTypedRefCount 0 75777 18 ParamTypedRefCount 18 ParamTypedRefCount 0 0 0 1 1730 998 1 2231 2 1731 1732 0 0 1 0 1889 0 0 0 0 143
/**
 * A class object for storing specifically objects of type
 * TypedReferenceCount, which is different than TypedWritableReferenceCount.
 */

1891 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1862 0 0 0 0 0 0 0 0 0 0

1892 20 ParamValue< string > 0 75777 25 ParamValue< std::string > 25 ParamValue< std::string > 0 0 0 1 1733 998 1 2232 3 1734 1735 1736 0 0 1 0 1889 0 0 0 0 0

1893 10 Type const 0 8832 10 Type const 10 Type const 0 0 0 0 0 0 0 0 0 0 0 0 0

1894 11 ParamString 0 2105345 11 ParamString 11 ParamString 0 0 1892 0 0 0 0 0 0 0 0 0 0

1895 21 ParamValue< wstring > 0 75777 26 ParamValue< std::wstring > 26 ParamValue< std::wstring > 0 0 0 1 1737 998 1 2233 3 1738 1739 1740 0 0 1 0 1889 0 0 0 0 0

1896 12 ParamWstring 0 2105345 12 ParamWstring 12 ParamWstring 0 0 1895 0 0 0 0 0 0 0 0 0 0

1897 24 ParamValue< LVecBase2d > 0 75777 24 ParamValue< LVecBase2d > 24 ParamValue< LVecBase2d > 0 0 0 1 1741 998 1 2234 3 1742 1743 1744 0 0 1 0 1889 0 0 0 0 0

1898 14 ParamVecBase2d 0 2105345 14 ParamVecBase2d 14 ParamVecBase2d 0 0 1897 0 0 0 0 0 0 0 0 0 0

1899 24 ParamValue< LVecBase2f > 0 75777 24 ParamValue< LVecBase2f > 24 ParamValue< LVecBase2f > 0 0 0 1 1745 998 1 2235 3 1746 1747 1748 0 0 1 0 1889 0 0 0 0 0

1900 14 ParamVecBase2f 0 2105345 14 ParamVecBase2f 14 ParamVecBase2f 0 0 1899 0 0 0 0 0 0 0 0 0 0

1901 24 ParamValue< LVecBase2i > 0 75777 24 ParamValue< LVecBase2i > 24 ParamValue< LVecBase2i > 0 0 0 1 1749 998 1 2236 3 1750 1751 1752 0 0 1 0 1889 0 0 0 0 0

1902 14 ParamVecBase2i 0 2105345 14 ParamVecBase2i 14 ParamVecBase2i 0 0 1901 0 0 0 0 0 0 0 0 0 0

1903 24 ParamValue< LVecBase3d > 0 75777 24 ParamValue< LVecBase3d > 24 ParamValue< LVecBase3d > 0 0 0 1 1753 998 1 2237 3 1754 1755 1756 0 0 1 0 1889 0 0 0 0 0

1904 14 ParamVecBase3d 0 2105345 14 ParamVecBase3d 14 ParamVecBase3d 0 0 1903 0 0 0 0 0 0 0 0 0 0

1905 24 ParamValue< LVecBase3f > 0 75777 24 ParamValue< LVecBase3f > 24 ParamValue< LVecBase3f > 0 0 0 1 1757 998 1 2238 3 1758 1759 1760 0 0 1 0 1889 0 0 0 0 0

1906 14 ParamVecBase3f 0 2105345 14 ParamVecBase3f 14 ParamVecBase3f 0 0 1905 0 0 0 0 0 0 0 0 0 0

1907 24 ParamValue< LVecBase3i > 0 75777 24 ParamValue< LVecBase3i > 24 ParamValue< LVecBase3i > 0 0 0 1 1761 998 1 2239 3 1762 1763 1764 0 0 1 0 1889 0 0 0 0 0

1908 14 ParamVecBase3i 0 2105345 14 ParamVecBase3i 14 ParamVecBase3i 0 0 1907 0 0 0 0 0 0 0 0 0 0

1909 24 ParamValue< LVecBase4d > 0 75777 24 ParamValue< LVecBase4d > 24 ParamValue< LVecBase4d > 0 0 0 1 1765 998 1 2240 3 1766 1767 1768 0 0 1 0 1889 0 0 0 0 0

1910 14 ParamVecBase4d 0 2105345 14 ParamVecBase4d 14 ParamVecBase4d 0 0 1909 0 0 0 0 0 0 0 0 0 0

1911 24 ParamValue< LVecBase4f > 0 75777 24 ParamValue< LVecBase4f > 24 ParamValue< LVecBase4f > 0 0 0 1 1769 998 1 2241 3 1770 1771 1772 0 0 1 0 1889 0 0 0 0 0

1912 14 ParamVecBase4f 0 2105345 14 ParamVecBase4f 14 ParamVecBase4f 0 0 1911 0 0 0 0 0 0 0 0 0 0

1913 24 ParamValue< LVecBase4i > 0 75777 24 ParamValue< LVecBase4i > 24 ParamValue< LVecBase4i > 0 0 0 1 1773 998 1 2242 3 1774 1775 1776 0 0 1 0 1889 0 0 0 0 0

1914 14 ParamVecBase4i 0 2105345 14 ParamVecBase4i 14 ParamVecBase4i 0 0 1913 0 0 0 0 0 0 0 0 0 0

1915 23 ParamValue< LMatrix3d > 0 75777 23 ParamValue< LMatrix3d > 23 ParamValue< LMatrix3d > 0 0 0 1 1777 998 1 2243 3 1778 1779 1780 0 0 1 0 1889 0 0 0 0 0

1916 13 ParamMatrix3d 0 2105345 13 ParamMatrix3d 13 ParamMatrix3d 0 0 1915 0 0 0 0 0 0 0 0 0 0

1917 23 ParamValue< LMatrix3f > 0 75777 23 ParamValue< LMatrix3f > 23 ParamValue< LMatrix3f > 0 0 0 1 1781 998 1 2244 3 1782 1783 1784 0 0 1 0 1889 0 0 0 0 0

1918 13 ParamMatrix3f 0 2105345 13 ParamMatrix3f 13 ParamMatrix3f 0 0 1917 0 0 0 0 0 0 0 0 0 0

1919 23 ParamValue< LMatrix4d > 0 75777 23 ParamValue< LMatrix4d > 23 ParamValue< LMatrix4d > 0 0 0 1 1785 998 1 2245 3 1786 1787 1788 0 0 1 0 1889 0 0 0 0 0

1920 13 ParamMatrix4d 0 2105345 13 ParamMatrix4d 13 ParamMatrix4d 0 0 1919 0 0 0 0 0 0 0 0 0 0

1921 23 ParamValue< LMatrix4f > 0 75777 23 ParamValue< LMatrix4f > 23 ParamValue< LMatrix4f > 0 0 0 1 1789 998 1 2246 3 1790 1791 1792 0 0 1 0 1889 0 0 0 0 0

1922 13 ParamMatrix4f 0 2105345 13 ParamMatrix4f 13 ParamMatrix4f 0 0 1921 0 0 0 0 0 0 0 0 0 0

1923 13 ParamVecBase2 0 2105345 13 ParamVecBase2 13 ParamVecBase2 0 0 1900 0 0 0 0 0 0 0 0 0 0

1924 13 ParamVecBase3 0 2105345 13 ParamVecBase3 13 ParamVecBase3 0 0 1906 0 0 0 0 0 0 0 0 0 0

1925 13 ParamVecBase4 0 2105345 13 ParamVecBase4 13 ParamVecBase4 0 0 1912 0 0 0 0 0 0 0 0 0 0

1926 12 ParamMatrix3 0 2105345 12 ParamMatrix3 12 ParamMatrix3 0 0 1918 0 0 0 0 0 0 0 0 0 0

1927 12 ParamMatrix4 0 2105345 12 ParamMatrix4 12 ParamMatrix4 0 0 1922 0 0 0 0 0 0 0 0 0 0

1928 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1794 0 1 1793 0 0 1 0 1819 0 0 0 0 379
/**
 * Defined as a fix to allow creating Configurable and Writable objects.
 * Otherwise the compiler gets confused since both TypedWritable and
 * Configurable inherit from TypedObject.
 *
 * An object that has data or parameters that are set less frequently (at
 * least occasionally) than every frame.  We can cache the configuration info
 * by by using the "dirty" flag.
 */

1929 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1795 1796 0 6 1797 1798 1799 1800 1801 1802 0 0 0 0 0 812
/**
 * Manage a set of ID values from min to max inclusive.  The ID numbers that
 * are freed will be allocated (reused) in the same order.  I.e.  the oldest
 * ID numbers will be allocated.
 *
 * This implementation will use 4 bytes per id number, plus a few bytes of
 * management data.  e.g.  10,000 ID numbers will use 40KB.
 *
 * Also be advised that ID -1 and -2 are used internally by the allocator.  If
 * allocate returns IndexEnd (-1) then the allocator is out of free ID
 * numbers.
 *
 * There are other implementations that can better leverage runs of used or
 * unused IDs or use bit arrays for the IDs.  But, it takes extra work to
 * track the age of freed IDs, which is required for what we wanted.  If you
 * would like to kick around other implementation ideas, please contact
 * Schuyler.
 */

1930 10 PortalMask 0 2105345 10 PortalMask 10 PortalMask 0 0 1850 0 0 0 0 0 0 0 0 0 0

1931 37 ConstPointerToArray< ushort > const * 0 8576 37 ConstPointerToArray< ushort > const * 37 ConstPointerToArray< ushort > const * 0 0 1932 0 0 0 0 0 0 0 0 0 0

1932 35 ConstPointerToArray< ushort > const 0 8832 35 ConstPointerToArray< ushort > const 35 ConstPointerToArray< ushort > const 0 0 1805 0 0 0 0 0 0 0 0 0 0

1933 31 ConstPointerToArray< ushort > * 0 8576 31 ConstPointerToArray< ushort > * 31 ConstPointerToArray< ushort > * 0 0 1805 0 0 0 0 0 0 0 0 0 0

1934 32 PointerToArray< ushort > const * 0 8576 32 PointerToArray< ushort > const * 32 PointerToArray< ushort > const * 0 0 1935 0 0 0 0 0 0 0 0 0 0

1935 30 PointerToArray< ushort > const 0 8832 30 PointerToArray< ushort > const 30 PointerToArray< ushort > const 0 0 1809 0 0 0 0 0 0 0 0 0 0

1936 6 ushort 0 2105344 6 ushort 6 ushort 0 0 1937 0 0 0 0 0 0 0 0 0 0

1937 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1938 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1939 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1940 0 0 0 0 0 0 0 0 0 0

1940 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1941 0 0 0 0 0 0 0 0 0 0

1941 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1942 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1943 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 8576 51 PointerToBase< ReferenceCountedVector< ushort > > * 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 0 1807 0 0 0 0 0 0 0 0 0 0

1944 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< ushort > > const * 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 0 1945 0 0 0 0 0 0 0 0 0 0

1945 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 8832 55 PointerToBase< ReferenceCountedVector< ushort > > const 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 0 1807 0 0 0 0 0 0 0 0 0 0

1946 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1947 0 0 0 0 0 0 0 0 0 0

1947 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1948 26 PointerToArray< ushort > * 0 8576 26 PointerToArray< ushort > * 26 PointerToArray< ushort > * 0 0 1809 0 0 0 0 0 0 0 0 0 0

1949 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1950 0 0 0 0 0 0 0 0 0 0

1950 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1951 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1810 0 0 0 0 0 0 0 0 0 0

1952 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 1953 0 0 0 0 0 0 0 0 0 0

1953 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1810 0 0 0 0 0 0 0 0 0 0

1954 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1815 0 0 0 0 0 0 0 0 0 0

1955 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 1956 0 0 0 0 0 0 0 0 0 0

1956 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1815 0 0 0 0 0 0 0 0 0 0

1957 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1958 0 0 0 0 0 0 0 0 0 0

1958 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 0

1959 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1837 0 0 0 0 0 0 0 0 0 0

1960 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 1961 0 0 0 0 0 0 0 0 0 0

1961 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1819 0 0 0 0 0 0 0 0 0 0

1962 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1821 0 0 0 0 0 0 0 0 0 0

1963 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1822 0 0 0 0 0 0 0 0 0 0

1964 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 1965 0 0 0 0 0 0 0 0 0 0

1965 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1823 0 0 0 0 0 0 0 0 0 0

1966 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1823 0 0 0 0 0 0 0 0 0 0

1967 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1825 0 0 0 0 0 0 0 0 0 0

1968 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1969 0 0 0 0 0 0 0 0 0 0

1969 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 1970 0 0 0 0 0 0 0 0 0 0

1970 11 VirtualFile 0 2048 11 VirtualFile 11 VirtualFile 0 0 0 0 0 0 0 0 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

1971 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1829 0 0 0 0 0 0 0 0 0 0

1972 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 1973 0 0 0 0 0 0 0 0 0 0

1973 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1829 0 0 0 0 0 0 0 0 0 0

1974 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1826 0 0 0 0 0 0 0 0 0 0

1975 10 BamEnums * 0 8576 10 BamEnums * 10 BamEnums * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1976 16 BamEnums const * 0 8576 16 BamEnums const * 16 BamEnums const * 0 0 1977 0 0 0 0 0 0 0 0 0 0

1977 14 BamEnums const 0 8832 14 BamEnums const 14 BamEnums const 0 0 1830 0 0 0 0 0 0 0 0 0 0

1978 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1840 0 0 0 0 0 0 0 0 0 0

1979 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1834 0 0 0 0 0 0 0 0 0 0

1980 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 1981 0 0 0 0 0 0 0 0 0 0

1981 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1837 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on the
// bamReader (via set_aux_data() and get_aux_data()) for any particular
// objects during the bam reading process.

1982 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 1983 0 0 0 0 0 0 0 0 0 0

1983 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1837 0 0 0 0 0 0 0 0 0 0

1984 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 1985 0 0 0 0 0 0 0 0 0 0

1985 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1844 0 0 0 0 0 0 0 0 0 0

1986 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1844 0 0 0 0 0 0 0 0 0 0

1987 25 BitMask< uint16_t, 16 > * 0 8576 25 BitMask< uint16_t, 16 > * 25 BitMask< uint16_t, 16 > * 0 0 1847 0 0 0 0 0 0 0 0 0 0

1988 31 BitMask< uint16_t, 16 > const * 0 8576 31 BitMask< uint16_t, 16 > const * 31 BitMask< uint16_t, 16 > const * 0 0 1989 0 0 0 0 0 0 0 0 0 0

1989 29 BitMask< uint16_t, 16 > const 0 8832 29 BitMask< uint16_t, 16 > const 29 BitMask< uint16_t, 16 > const 0 0 1847 0 0 0 0 0 0 0 0 0 0

1990 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 1937 0 0 0 0 0 0 0 0 0 0

1991 25 BitMask< uint32_t, 32 > * 0 8576 25 BitMask< uint32_t, 32 > * 25 BitMask< uint32_t, 32 > * 0 0 1849 0 0 0 0 0 0 0 0 0 0

1992 31 BitMask< uint32_t, 32 > const * 0 8576 31 BitMask< uint32_t, 32 > const * 31 BitMask< uint32_t, 32 > const * 0 0 1993 0 0 0 0 0 0 0 0 0 0

1993 29 BitMask< uint32_t, 32 > const 0 8832 29 BitMask< uint32_t, 32 > const 29 BitMask< uint32_t, 32 > const 0 0 1849 0 0 0 0 0 0 0 0 0 0

1994 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 1995 0 0 0 0 0 0 0 0 0 0

1995 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1996 25 BitMask< uint64_t, 64 > * 0 8576 25 BitMask< uint64_t, 64 > * 25 BitMask< uint64_t, 64 > * 0 0 1851 0 0 0 0 0 0 0 0 0 0

1997 31 BitMask< uint64_t, 64 > const * 0 8576 31 BitMask< uint64_t, 64 > const * 31 BitMask< uint64_t, 64 > const * 0 0 1998 0 0 0 0 0 0 0 0 0 0

1998 29 BitMask< uint64_t, 64 > const 0 8832 29 BitMask< uint64_t, 64 > const 29 BitMask< uint64_t, 64 > const 0 0 1851 0 0 0 0 0 0 0 0 0 0

1999 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 2000 0 0 0 0 0 0 0 0 0 0

2000 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2001 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1854 0 0 0 0 0 0 0 0 0 0

2002 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 2003 0 0 0 0 0 0 0 0 0 0

2003 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1854 0 0 0 0 0 0 0 0 0 0

2004 8 WordType 0 2367488 18 BitArray::WordType 18 BitArray::WordType 1854 0 1994 0 0 0 0 0 0 0 0 0 0

2005 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 2006 0 0 0 0 0 0 0 0 0 0

2006 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 1888 0 0 0 0 0 0 0 0 0 0

2007 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1870 0 0 0 0 0 0 0 0 0 0

2008 8 MaskType 0 2367488 18 BitArray::MaskType 18 BitArray::MaskType 1854 0 1853 0 0 0 0 0 0 0 0 0 0

2009 10 MaskType * 0 8576 20 BitArray::MaskType * 20 BitArray::MaskType * 0 0 2008 0 0 0 0 0 0 0 0 0 0

2010 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1856 0 0 0 0 0 0 0 0 0 0

2011 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 2012 0 0 0 0 0 0 0 0 0 0

2012 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1856 0 0 0 0 0 0 0 0 0 0

2013 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 2014 0 0 0 0 0 0 0 0 0 0

2014 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1860 0 0 0 0 0 0 0 0 0 0

2015 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1860 0 0 0 0 0 0 0 0 0 0

2016 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1861 0 0 0 0 0 0 0 0 0 0

2017 17 ButtonMap const * 0 8576 17 ButtonMap const * 17 ButtonMap const * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2018 15 ButtonMap const 0 8832 15 ButtonMap const 15 ButtonMap const 0 0 1861 0 0 0 0 0 0 0 0 0 0

2019 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2020 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1863 0 0 0 0 0 0 0 0 0 0

2021 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1863 0 0 0 0 0 0 0 0 0 0

2022 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 2023 0 0 0 0 0 0 0 0 0 0

2023 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1864 0 0 0 0 0 0 0 0 0 0

2024 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 2025 0 0 0 0 0 0 0 0 0 0

2025 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1865 0 0 0 0 0 0 0 0 0 0

2026 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1865 0 0 0 0 0 0 0 0 0 0

2027 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1866 0 0 0 0 0 0 0 0 0 0

2028 28 PythonCallbackObject const * 0 8576 28 PythonCallbackObject const * 28 PythonCallbackObject const * 0 0 2029 0 0 0 0 0 0 0 0 0 0

2029 26 PythonCallbackObject const 0 8832 26 PythonCallbackObject const 26 PythonCallbackObject const 0 0 1866 0 0 0 0 0 0 0 0 0 0

2030 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1867 0 0 0 0 0 0 0 0 0 0

2031 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 2032 0 0 0 0 0 0 0 0 0 0

2032 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1867 0 0 0 0 0 0 0 0 0 0

2033 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1871 0 0 0 0 0 0 0 0 0 0

2034 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 2035 0 0 0 0 0 0 0 0 0 0

2035 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1871 0 0 0 0 0 0 0 0 0 0

2036 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 2037 0 0 0 0 0 0 0 0 0 0

2037 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 396
/**
 * A thread; that is, a lightweight process.  This is an abstract base class;
 * to use it, you must subclass from it and redefine thread_main().
 *
 * The thread itself will keep a reference count on the Thread object while it
 * is running; when the thread returns from its root function, the Thread
 * object will automatically be destructed if no other pointers are
 * referencing it.
 */

2038 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2039 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1875 0 0 0 0 0 0 0 0 0 0

2040 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 1876 0 0 0 0 0 0 0 0 0 0

2041 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 2042 0 0 0 0 0 0 0 0 0 0

2042 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2043 0 0 0 0 0 0 0 0 0 0

2043 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

2044 9 istream * 0 8576 9 istream * 9 istream * 0 0 2045 0 0 0 0 0 0 0 0 0 0

2045 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2046 32 DoubleBitMask< BitMaskNative > * 0 8576 32 DoubleBitMask< BitMaskNative > * 32 DoubleBitMask< BitMaskNative > * 0 0 1877 0 0 0 0 0 0 0 0 0 0

2047 38 DoubleBitMask< BitMaskNative > const * 0 8576 38 DoubleBitMask< BitMaskNative > const * 38 DoubleBitMask< BitMaskNative > const * 0 0 2048 0 0 0 0 0 0 0 0 0 0

2048 36 DoubleBitMask< BitMaskNative > const 0 8832 36 DoubleBitMask< BitMaskNative > const 36 DoubleBitMask< BitMaskNative > const 0 0 1877 0 0 0 0 0 0 0 0 0 0

2049 38 DoubleBitMask< DoubleBitMaskNative > * 0 8576 38 DoubleBitMask< DoubleBitMaskNative > * 38 DoubleBitMask< DoubleBitMaskNative > * 0 0 1879 0 0 0 0 0 0 0 0 0 0

2050 44 DoubleBitMask< DoubleBitMaskNative > const * 0 8576 44 DoubleBitMask< DoubleBitMaskNative > const * 44 DoubleBitMask< DoubleBitMaskNative > const * 0 0 2051 0 0 0 0 0 0 0 0 0 0

2051 42 DoubleBitMask< DoubleBitMaskNative > const 0 8832 42 DoubleBitMask< DoubleBitMaskNative > const 42 DoubleBitMask< DoubleBitMaskNative > const 0 0 1879 0 0 0 0 0 0 0 0 0 0

2052 16 KeyboardButton * 0 8576 16 KeyboardButton * 16 KeyboardButton * 0 0 1882 0 0 0 0 0 0 0 0 0 0

2053 22 KeyboardButton const * 0 8576 22 KeyboardButton const * 22 KeyboardButton const * 0 0 2054 0 0 0 0 0 0 0 0 0 0

2054 20 KeyboardButton const 0 8832 20 KeyboardButton const 20 KeyboardButton const 0 0 1882 0 0 0 0 0 0 0 0 0 0

2055 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1883 0 0 0 0 0 0 0 0 0 0

2056 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 2057 0 0 0 0 0 0 0 0 0 0

2057 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1883 0 0 0 0 0 0 0 0 0 0

2058 13 MouseButton * 0 8576 13 MouseButton * 13 MouseButton * 0 0 1884 0 0 0 0 0 0 0 0 0 0

2059 19 MouseButton const * 0 8576 19 MouseButton const * 19 MouseButton const * 0 0 2060 0 0 0 0 0 0 0 0 0 0

2060 17 MouseButton const 0 8832 17 MouseButton const 17 MouseButton const 0 0 1884 0 0 0 0 0 0 0 0 0 0

2061 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1885 0 0 0 0 0 0 0 0 0 0

2062 17 MouseData const * 0 8576 17 MouseData const * 17 MouseData const * 0 0 2063 0 0 0 0 0 0 0 0 0 0

2063 15 MouseData const 0 8832 15 MouseData const 15 MouseData const 0 0 1885 0 0 0 0 0 0 0 0 0 0

2064 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 2065 0 0 0 0 0 0 0 0 0 0

2065 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 1886 0 0 0 0 0 0 0 0 0 0

2066 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 1888 0 0 0 0 0 0 0 0 0 0

2067 22 ParamValueBase const * 0 8576 22 ParamValueBase const * 22 ParamValueBase const * 0 0 2068 0 0 0 0 0 0 0 0 0 0

2068 20 ParamValueBase const 0 8832 20 ParamValueBase const 20 ParamValueBase const 0 0 1889 0 0 0 0 0 0 0 0 0 0

2069 27 TypedReferenceCount const * 0 8576 27 TypedReferenceCount const * 27 TypedReferenceCount const * 0 0 2070 0 0 0 0 0 0 0 0 0 0

2070 25 TypedReferenceCount const 0 8832 25 TypedReferenceCount const 25 TypedReferenceCount const 0 0 1862 0 0 0 0 0 0 0 0 0 0

2071 20 ParamTypedRefCount * 0 8576 20 ParamTypedRefCount * 20 ParamTypedRefCount * 0 0 1890 0 0 0 0 0 0 0 0 0 0

2072 26 ParamTypedRefCount const * 0 8576 26 ParamTypedRefCount const * 26 ParamTypedRefCount const * 0 0 2073 0 0 0 0 0 0 0 0 0 0

2073 24 ParamTypedRefCount const 0 8832 24 ParamTypedRefCount const 24 ParamTypedRefCount const 0 0 1890 0 0 0 0 0 0 0 0 0 0

2074 22 ParamValue< string > * 0 8576 27 ParamValue< std::string > * 27 ParamValue< std::string > * 0 0 1892 0 0 0 0 0 0 0 0 0 0

2075 28 ParamValue< string > const * 0 8576 33 ParamValue< std::string > const * 33 ParamValue< std::string > const * 0 0 2076 0 0 0 0 0 0 0 0 0 0

2076 26 ParamValue< string > const 0 8832 31 ParamValue< std::string > const 31 ParamValue< std::string > const 0 0 1892 0 0 0 0 0 0 0 0 0 0

2077 23 ParamValue< wstring > * 0 8576 28 ParamValue< std::wstring > * 28 ParamValue< std::wstring > * 0 0 1895 0 0 0 0 0 0 0 0 0 0

2078 29 ParamValue< wstring > const * 0 8576 34 ParamValue< std::wstring > const * 34 ParamValue< std::wstring > const * 0 0 2079 0 0 0 0 0 0 0 0 0 0

2079 27 ParamValue< wstring > const 0 8832 32 ParamValue< std::wstring > const 32 ParamValue< std::wstring > const 0 0 1895 0 0 0 0 0 0 0 0 0 0

2080 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2081 0 0 0 0 0 0 0 0 0 0

2081 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2082 0 0 0 0 0 0 0 0 0 0

2082 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2083 26 ParamValue< LVecBase2d > * 0 8576 26 ParamValue< LVecBase2d > * 26 ParamValue< LVecBase2d > * 0 0 1897 0 0 0 0 0 0 0 0 0 0

2084 32 ParamValue< LVecBase2d > const * 0 8576 32 ParamValue< LVecBase2d > const * 32 ParamValue< LVecBase2d > const * 0 0 2085 0 0 0 0 0 0 0 0 0 0

2085 30 ParamValue< LVecBase2d > const 0 8832 30 ParamValue< LVecBase2d > const 30 ParamValue< LVecBase2d > const 0 0 1897 0 0 0 0 0 0 0 0 0 0

2086 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2087 0 0 0 0 0 0 0 0 0 0

2087 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2088 0 0 0 0 0 0 0 0 0 0

2088 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2089 26 ParamValue< LVecBase2f > * 0 8576 26 ParamValue< LVecBase2f > * 26 ParamValue< LVecBase2f > * 0 0 1899 0 0 0 0 0 0 0 0 0 0

2090 32 ParamValue< LVecBase2f > const * 0 8576 32 ParamValue< LVecBase2f > const * 32 ParamValue< LVecBase2f > const * 0 0 2091 0 0 0 0 0 0 0 0 0 0

2091 30 ParamValue< LVecBase2f > const 0 8832 30 ParamValue< LVecBase2f > const 30 ParamValue< LVecBase2f > const 0 0 1899 0 0 0 0 0 0 0 0 0 0

2092 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 2093 0 0 0 0 0 0 0 0 0 0

2093 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 2094 0 0 0 0 0 0 0 0 0 0

2094 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2095 26 ParamValue< LVecBase2i > * 0 8576 26 ParamValue< LVecBase2i > * 26 ParamValue< LVecBase2i > * 0 0 1901 0 0 0 0 0 0 0 0 0 0

2096 32 ParamValue< LVecBase2i > const * 0 8576 32 ParamValue< LVecBase2i > const * 32 ParamValue< LVecBase2i > const * 0 0 2097 0 0 0 0 0 0 0 0 0 0

2097 30 ParamValue< LVecBase2i > const 0 8832 30 ParamValue< LVecBase2i > const 30 ParamValue< LVecBase2i > const 0 0 1901 0 0 0 0 0 0 0 0 0 0

2098 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2099 0 0 0 0 0 0 0 0 0 0

2099 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2100 0 0 0 0 0 0 0 0 0 0

2100 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2101 26 ParamValue< LVecBase3d > * 0 8576 26 ParamValue< LVecBase3d > * 26 ParamValue< LVecBase3d > * 0 0 1903 0 0 0 0 0 0 0 0 0 0

2102 32 ParamValue< LVecBase3d > const * 0 8576 32 ParamValue< LVecBase3d > const * 32 ParamValue< LVecBase3d > const * 0 0 2103 0 0 0 0 0 0 0 0 0 0

2103 30 ParamValue< LVecBase3d > const 0 8832 30 ParamValue< LVecBase3d > const 30 ParamValue< LVecBase3d > const 0 0 1903 0 0 0 0 0 0 0 0 0 0

2104 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2105 0 0 0 0 0 0 0 0 0 0

2105 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2106 0 0 0 0 0 0 0 0 0 0

2106 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2107 26 ParamValue< LVecBase3f > * 0 8576 26 ParamValue< LVecBase3f > * 26 ParamValue< LVecBase3f > * 0 0 1905 0 0 0 0 0 0 0 0 0 0

2108 32 ParamValue< LVecBase3f > const * 0 8576 32 ParamValue< LVecBase3f > const * 32 ParamValue< LVecBase3f > const * 0 0 2109 0 0 0 0 0 0 0 0 0 0

2109 30 ParamValue< LVecBase3f > const 0 8832 30 ParamValue< LVecBase3f > const 30 ParamValue< LVecBase3f > const 0 0 1905 0 0 0 0 0 0 0 0 0 0

2110 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 2111 0 0 0 0 0 0 0 0 0 0

2111 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 2112 0 0 0 0 0 0 0 0 0 0

2112 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2113 26 ParamValue< LVecBase3i > * 0 8576 26 ParamValue< LVecBase3i > * 26 ParamValue< LVecBase3i > * 0 0 1907 0 0 0 0 0 0 0 0 0 0

2114 32 ParamValue< LVecBase3i > const * 0 8576 32 ParamValue< LVecBase3i > const * 32 ParamValue< LVecBase3i > const * 0 0 2115 0 0 0 0 0 0 0 0 0 0

2115 30 ParamValue< LVecBase3i > const 0 8832 30 ParamValue< LVecBase3i > const 30 ParamValue< LVecBase3i > const 0 0 1907 0 0 0 0 0 0 0 0 0 0

2116 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2117 0 0 0 0 0 0 0 0 0 0

2117 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2118 0 0 0 0 0 0 0 0 0 0

2118 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2119 26 ParamValue< LVecBase4d > * 0 8576 26 ParamValue< LVecBase4d > * 26 ParamValue< LVecBase4d > * 0 0 1909 0 0 0 0 0 0 0 0 0 0

2120 32 ParamValue< LVecBase4d > const * 0 8576 32 ParamValue< LVecBase4d > const * 32 ParamValue< LVecBase4d > const * 0 0 2121 0 0 0 0 0 0 0 0 0 0

2121 30 ParamValue< LVecBase4d > const 0 8832 30 ParamValue< LVecBase4d > const 30 ParamValue< LVecBase4d > const 0 0 1909 0 0 0 0 0 0 0 0 0 0

2122 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2123 0 0 0 0 0 0 0 0 0 0

2123 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2124 0 0 0 0 0 0 0 0 0 0

2124 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2125 26 ParamValue< LVecBase4f > * 0 8576 26 ParamValue< LVecBase4f > * 26 ParamValue< LVecBase4f > * 0 0 1911 0 0 0 0 0 0 0 0 0 0

2126 32 ParamValue< LVecBase4f > const * 0 8576 32 ParamValue< LVecBase4f > const * 32 ParamValue< LVecBase4f > const * 0 0 2127 0 0 0 0 0 0 0 0 0 0

2127 30 ParamValue< LVecBase4f > const 0 8832 30 ParamValue< LVecBase4f > const 30 ParamValue< LVecBase4f > const 0 0 1911 0 0 0 0 0 0 0 0 0 0

2128 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 2129 0 0 0 0 0 0 0 0 0 0

2129 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 2130 0 0 0 0 0 0 0 0 0 0

2130 10 LVecBase4i 0 2048 10 LVecBase4i 10 LVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2131 26 ParamValue< LVecBase4i > * 0 8576 26 ParamValue< LVecBase4i > * 26 ParamValue< LVecBase4i > * 0 0 1913 0 0 0 0 0 0 0 0 0 0

2132 32 ParamValue< LVecBase4i > const * 0 8576 32 ParamValue< LVecBase4i > const * 32 ParamValue< LVecBase4i > const * 0 0 2133 0 0 0 0 0 0 0 0 0 0

2133 30 ParamValue< LVecBase4i > const 0 8832 30 ParamValue< LVecBase4i > const 30 ParamValue< LVecBase4i > const 0 0 1913 0 0 0 0 0 0 0 0 0 0

2134 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2135 0 0 0 0 0 0 0 0 0 0

2135 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2136 0 0 0 0 0 0 0 0 0 0

2136 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2137 25 ParamValue< LMatrix3d > * 0 8576 25 ParamValue< LMatrix3d > * 25 ParamValue< LMatrix3d > * 0 0 1915 0 0 0 0 0 0 0 0 0 0

2138 31 ParamValue< LMatrix3d > const * 0 8576 31 ParamValue< LMatrix3d > const * 31 ParamValue< LMatrix3d > const * 0 0 2139 0 0 0 0 0 0 0 0 0 0

2139 29 ParamValue< LMatrix3d > const 0 8832 29 ParamValue< LMatrix3d > const 29 ParamValue< LMatrix3d > const 0 0 1915 0 0 0 0 0 0 0 0 0 0

2140 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2141 0 0 0 0 0 0 0 0 0 0

2141 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2142 0 0 0 0 0 0 0 0 0 0

2142 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2143 25 ParamValue< LMatrix3f > * 0 8576 25 ParamValue< LMatrix3f > * 25 ParamValue< LMatrix3f > * 0 0 1917 0 0 0 0 0 0 0 0 0 0

2144 31 ParamValue< LMatrix3f > const * 0 8576 31 ParamValue< LMatrix3f > const * 31 ParamValue< LMatrix3f > const * 0 0 2145 0 0 0 0 0 0 0 0 0 0

2145 29 ParamValue< LMatrix3f > const 0 8832 29 ParamValue< LMatrix3f > const 29 ParamValue< LMatrix3f > const 0 0 1917 0 0 0 0 0 0 0 0 0 0

2146 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2147 0 0 0 0 0 0 0 0 0 0

2147 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2148 0 0 0 0 0 0 0 0 0 0

2148 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2149 25 ParamValue< LMatrix4d > * 0 8576 25 ParamValue< LMatrix4d > * 25 ParamValue< LMatrix4d > * 0 0 1919 0 0 0 0 0 0 0 0 0 0

2150 31 ParamValue< LMatrix4d > const * 0 8576 31 ParamValue< LMatrix4d > const * 31 ParamValue< LMatrix4d > const * 0 0 2151 0 0 0 0 0 0 0 0 0 0

2151 29 ParamValue< LMatrix4d > const 0 8832 29 ParamValue< LMatrix4d > const 29 ParamValue< LMatrix4d > const 0 0 1919 0 0 0 0 0 0 0 0 0 0

2152 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2153 0 0 0 0 0 0 0 0 0 0

2153 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2154 0 0 0 0 0 0 0 0 0 0

2154 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2155 25 ParamValue< LMatrix4f > * 0 8576 25 ParamValue< LMatrix4f > * 25 ParamValue< LMatrix4f > * 0 0 1921 0 0 0 0 0 0 0 0 0 0

2156 31 ParamValue< LMatrix4f > const * 0 8576 31 ParamValue< LMatrix4f > const * 31 ParamValue< LMatrix4f > const * 0 0 2157 0 0 0 0 0 0 0 0 0 0

2157 29 ParamValue< LMatrix4f > const 0 8832 29 ParamValue< LMatrix4f > const 29 ParamValue< LMatrix4f > const 0 0 1921 0 0 0 0 0 0 0 0 0 0

2158 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 2159 0 0 0 0 0 0 0 0 0 0

2159 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 1929 0 0 0 0 0 0 0 0 0 0

2160 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 1929 0 0 0 0 0 0 0 0 0 0

2161 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2162 0 0 0 0 0 0 0 0 0 0

2162 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2163 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2164 0 0 0 0 0 0 0 0 0 0

2164 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

2165 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2166 0 0 0 0 0 0 0 0 0 0

2166 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

2167 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2168 0 0 0 0 0 0 0 0 0 0

2168 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 0

0
78
2169 9 play_rate 0 6 1811 952 951 0 0 0 0 24 AnimInterface::play_rate 0

2170 10 frame_rate 0 2 1811 953 0 0 0 0 0 25 AnimInterface::frame_rate 0

2171 10 num_frames 0 2 1812 954 0 0 0 0 0 25 AnimInterface::num_frames 0

2172 5 frame 0 2 1812 955 0 0 0 0 0 20 AnimInterface::frame 0

2173 10 next_frame 0 2 1812 956 0 0 0 0 0 25 AnimInterface::next_frame 0

2174 4 frac 0 2 1811 957 0 0 0 0 0 19 AnimInterface::frac 0

2175 10 full_frame 0 2 1812 958 0 0 0 0 0 25 AnimInterface::full_frame 0

2176 11 full_fframe 0 2 1811 959 0 0 0 0 0 26 AnimInterface::full_fframe 0

2177 7 playing 0 2 1813 960 0 0 0 0 0 22 AnimInterface::playing 0

2178 3 seq 0 2 1816 981 0 0 0 0 0 14 UpdateSeq::seq 0

2179 15 source_pathname 0 2 1825 1006 0 0 0 0 0 31 BamCacheRecord::source_pathname 0

2180 14 cache_filename 0 2 1825 1007 0 0 0 0 0 30 BamCacheRecord::cache_filename 0

2181 16 source_timestamp 0 2 1827 1008 0 0 0 0 0 32 BamCacheRecord::source_timestamp 0

2182 13 recorded_time 0 2 1827 1009 0 0 0 0 0 29 BamCacheRecord::recorded_time 0

2183 4 data 0 30 1828 1017 1019 1015 1016 0 0 20 BamCacheRecord::data 0

2184 6 active 0 6 1813 1026 1025 0 0 0 0 16 BamCache::active 0

2185 12 cache_models 0 6 1813 1028 1027 0 0 0 0 22 BamCache::cache_models 0

2186 14 cache_textures 0 6 1813 1030 1029 0 0 0 0 24 BamCache::cache_textures 0

2187 25 cache_compressed_textures 0 6 1813 1032 1031 0 0 0 0 35 BamCache::cache_compressed_textures 0

2188 22 cache_compiled_shaders 0 6 1813 1034 1033 0 0 0 0 32 BamCache::cache_compiled_shaders 0

2189 4 root 0 6 1826 1036 1035 0 0 0 0 14 BamCache::root 0

2190 10 flush_time 0 6 1812 1038 1037 0 0 0 0 20 BamCache::flush_time 0

2191 16 cache_max_kbytes 0 6 1812 1040 1039 0 0 0 0 26 BamCache::cache_max_kbytes 0

2192 9 read_only 0 6 1813 1042 1041 0 0 0 0 19 BamCache::read_only 0

2193 5 flags 0 6 1812 1056 1055 0 0 0 0 20 LoaderOptions::flags 0

2194 13 texture_flags 0 6 1812 1058 1057 0 0 0 0 28 LoaderOptions::texture_flags 0

2195 17 texture_num_views 0 6 1812 1060 1059 0 0 0 0 32 LoaderOptions::texture_num_views 0

2196 18 auto_texture_scale 0 6 1814 1062 1061 0 0 0 0 33 LoaderOptions::auto_texture_scale 0

2197 6 source 0 6 1838 1068 1067 0 0 0 0 17 BamReader::source 0

2198 8 filename 0 2 1825 1072 0 0 0 0 0 19 BamReader::filename 0

2199 14 loader_options 0 6 1840 1073 1074 0 0 0 0 25 BamReader::loader_options 0

2200 12 file_version 0 2 1841 1085 0 0 0 0 0 23 BamReader::file_version 0

2201 11 file_endian 0 2 1831 1081 0 0 0 0 0 22 BamReader::file_endian 0

2202 20 file_stdfloat_double 0 2 1813 1082 0 0 0 0 0 31 BamReader::file_stdfloat_double 0

2203 6 target 0 6 1845 1090 1089 0 0 0 0 17 BamWriter::target 0

2204 8 filename 0 2 1825 1092 0 0 0 0 0 19 BamWriter::filename 0

2205 11 file_endian 0 2 1831 1099 0 0 0 0 0 22 BamWriter::file_endian 0

2206 20 file_stdfloat_double 0 2 1813 1100 0 0 0 0 0 31 BamWriter::file_stdfloat_double 0

2207 17 file_texture_mode 0 2 1833 1101 0 0 0 0 0 28 BamWriter::file_texture_mode 0

2208 9 root_node 0 6 1828 1103 1104 0 0 0 0 20 BamWriter::root_node 0

2209 5 index 0 2 1812 1366 0 0 0 0 0 19 ButtonHandle::index 0

2210 4 name 0 2 1857 1361 0 0 0 0 0 18 ButtonHandle::name 0

2211 16 ascii_equivalent 0 10 1859 1363 0 1362 0 0 0 30 ButtonHandle::ascii_equivalent 0

2212 5 alias 0 2 1856 1364 0 0 0 0 0 19 ButtonHandle::alias 0

2213 15 cache_ref_count 0 2 1812 1393 0 0 0 0 0 50 CachedTypedWritableReferenceCount::cache_ref_count 0

2214 8 function 0 6 1841 1407 1406 0 0 0 0 30 PythonCallbackObject::function 0

2215 2 tv 0 6 1868 1412 1413 0 0 0 0 11 TimeVal::tv 0

2216 4 mode 0 6 1872 1417 1416 0 0 0 0 17 ClockObject::mode 0

2217 10 frame_time 0 6 1811 1418 1423 0 0 0 0 23 ClockObject::frame_time 0

2218 9 real_time 0 6 1811 1419 1422 0 0 0 0 22 ClockObject::real_time 0

2219 9 long_time 0 2 1811 1420 0 0 0 0 0 22 ClockObject::long_time 0

2220 11 frame_count 0 6 1812 1425 1424 0 0 0 0 24 ClockObject::frame_count 0

2221 2 dt 0 6 1811 1427 1428 0 0 0 0 15 ClockObject::dt 0

2222 6 max_dt 0 6 1811 1430 1431 0 0 0 0 19 ClockObject::max_dt 0

2223 14 degrade_factor 0 6 1811 1432 1433 0 0 0 0 27 ClockObject::degrade_factor 0

2224 27 average_frame_rate_interval 0 6 1811 1435 1434 0 0 0 0 40 ClockObject::average_frame_rate_interval 0

2225 18 average_frame_rate 0 2 1811 1436 0 0 0 0 0 31 ClockObject::average_frame_rate 0

2226 18 max_frame_duration 0 2 1811 1437 0 0 0 0 0 31 ClockObject::max_frame_duration 0

2227 7 buttons 0 66 1856 1639 0 0 0 0 1638 24 ModifierButtons::buttons 0

2228 1 x 0 2 1811 1663 0 0 0 0 0 12 MouseData::x 0

2229 1 y 0 2 1811 1664 0 0 0 0 0 12 MouseData::y 0

2230 9 in_window 0 2 1813 1665 0 0 0 0 0 20 MouseData::in_window 0

2231 5 value 0 2 1891 1731 0 0 0 0 0 25 ParamTypedRefCount::value 0

2232 5 value 0 6 1893 1735 1734 0 0 0 0 27 ParamValue< string >::value 0

2233 5 value 0 6 1893 1739 1738 0 0 0 0 28 ParamValue< wstring >::value 0

2234 5 value 0 6 1893 1743 1742 0 0 0 0 31 ParamValue< LVecBase2d >::value 0

2235 5 value 0 6 1893 1747 1746 0 0 0 0 31 ParamValue< LVecBase2f >::value 0

2236 5 value 0 6 1893 1751 1750 0 0 0 0 31 ParamValue< LVecBase2i >::value 0

2237 5 value 0 6 1893 1755 1754 0 0 0 0 31 ParamValue< LVecBase3d >::value 0

2238 5 value 0 6 1893 1759 1758 0 0 0 0 31 ParamValue< LVecBase3f >::value 0

2239 5 value 0 6 1893 1763 1762 0 0 0 0 31 ParamValue< LVecBase3i >::value 0

2240 5 value 0 6 1893 1767 1766 0 0 0 0 31 ParamValue< LVecBase4d >::value 0

2241 5 value 0 6 1893 1771 1770 0 0 0 0 31 ParamValue< LVecBase4f >::value 0

2242 5 value 0 6 1893 1775 1774 0 0 0 0 31 ParamValue< LVecBase4i >::value 0

2243 5 value 0 6 1893 1779 1778 0 0 0 0 30 ParamValue< LMatrix3d >::value 0

2244 5 value 0 6 1893 1783 1782 0 0 0 0 30 ParamValue< LMatrix3f >::value 0

2245 5 value 0 6 1893 1787 1786 0 0 0 0 30 ParamValue< LMatrix4d >::value 0

2246 5 value 0 6 1893 1791 1790 0 0 0 0 30 ParamValue< LMatrix4f >::value 0

1
2247 11 get_buttons 0 1638 1639 28 ModifierButtons::get_buttons 0

