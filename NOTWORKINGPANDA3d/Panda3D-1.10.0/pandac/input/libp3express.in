1494874280
3 2
12 libp3express 4 vDgf 12 panda3d.core 
1300
1343 7 is_null 0 4 2647 22 PointerToVoid::is_null 0 1 15 130
/**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */
50
constexpr bool PointerToVoid::is_null(void) const;

1344 8 get_hash 0 4 2647 23 PointerToVoid::get_hash 0 1 16 10
/**
 *
 */
55
inline std::size_t PointerToVoid::get_hash(void) const;

1345 14 ~PointerToVoid 0 4 2647 29 PointerToVoid::~PointerToVoid 0 0 0
36
PointerToVoid::~PointerToVoid(void);

1346 5 clear 0 4 2646 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 13 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

1347 6 output 0 4 2646 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 14 0
83
void PointerToBase< ReferenceCountedVector< double > >::output(ostream &out) const;

1348 19 ~PointerToArrayBase 0 4 2645 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

1349 19 ConstPointerToArray 0 4 2644 50 ConstPointerToArray< double >::ConstPointerToArray 0 3 1 2 3 0
284
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);
ConstPointerToArray< double >::ConstPointerToArray(PyObject *self, PyObject *source);

1350 4 size 0 4 2644 35 ConstPointerToArray< double >::size 0 1 4 0
73
inline unsigned long int ConstPointerToArray< double >::size(void) const;

1351 11 get_element 0 4 2644 42 ConstPointerToArray< double >::get_element 0 1 5 0
91
inline double const &ConstPointerToArray< double >::get_element(unsigned long int n) const;

1352 11 __getitem__ 0 4 2644 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
84
double const &ConstPointerToArray< double >::__getitem__(unsigned long int n) const;

1353 8 get_data 0 4 2644 39 ConstPointerToArray< double >::get_data 0 1 7 0
85
inline std::basic_string< char > ConstPointerToArray< double >::get_data(void) const;

1354 11 get_subdata 0 4 2644 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
128
inline std::basic_string< char > ConstPointerToArray< double >::get_subdata(unsigned long int n, unsigned long int count) const;

1355 13 get_ref_count 0 4 2644 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

1356 18 get_node_ref_count 0 4 2644 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

1357 13 __getbuffer__ 0 4 2644 44 ConstPointerToArray< double >::__getbuffer__ 0 1 11 0
99
int ConstPointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1358 17 __releasebuffer__ 0 4 2644 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 12 0
93
void ConstPointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1359 20 ~ConstPointerToArray 0 4 2644 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

1360 5 clear 0 4 2652 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 29 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

1361 6 output 0 4 2652 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 30 0
82
void PointerToBase< ReferenceCountedVector< float > >::output(ostream &out) const;

1362 19 ~PointerToArrayBase 0 4 2651 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

1363 19 ConstPointerToArray 0 4 2650 49 ConstPointerToArray< float >::ConstPointerToArray 0 3 17 18 19 0
279
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);
ConstPointerToArray< float >::ConstPointerToArray(PyObject *self, PyObject *source);

1364 4 size 0 4 2650 34 ConstPointerToArray< float >::size 0 1 20 0
72
inline unsigned long int ConstPointerToArray< float >::size(void) const;

1365 11 get_element 0 4 2650 41 ConstPointerToArray< float >::get_element 0 1 21 0
89
inline float const &ConstPointerToArray< float >::get_element(unsigned long int n) const;

1366 11 __getitem__ 0 4 2650 41 ConstPointerToArray< float >::__getitem__ 0 1 22 0
82
float const &ConstPointerToArray< float >::__getitem__(unsigned long int n) const;

1367 8 get_data 0 4 2650 38 ConstPointerToArray< float >::get_data 0 1 23 0
84
inline std::basic_string< char > ConstPointerToArray< float >::get_data(void) const;

1368 11 get_subdata 0 4 2650 41 ConstPointerToArray< float >::get_subdata 0 1 24 0
127
inline std::basic_string< char > ConstPointerToArray< float >::get_subdata(unsigned long int n, unsigned long int count) const;

1369 13 get_ref_count 0 4 2650 43 ConstPointerToArray< float >::get_ref_count 0 1 25 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

1370 18 get_node_ref_count 0 4 2650 48 ConstPointerToArray< float >::get_node_ref_count 0 1 26 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

1371 13 __getbuffer__ 0 4 2650 43 ConstPointerToArray< float >::__getbuffer__ 0 1 27 0
98
int ConstPointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1372 17 __releasebuffer__ 0 4 2650 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 28 0
92
void ConstPointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1373 20 ~ConstPointerToArray 0 4 2650 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

1374 5 clear 0 4 2656 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 43 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

1375 6 output 0 4 2656 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 44 0
80
void PointerToBase< ReferenceCountedVector< int > >::output(ostream &out) const;

1376 19 ~PointerToArrayBase 0 4 2655 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

1377 19 ConstPointerToArray 0 4 2654 47 ConstPointerToArray< int >::ConstPointerToArray 0 3 31 32 33 0
269
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);
ConstPointerToArray< int >::ConstPointerToArray(PyObject *self, PyObject *source);

1378 4 size 0 4 2654 32 ConstPointerToArray< int >::size 0 1 34 0
70
inline unsigned long int ConstPointerToArray< int >::size(void) const;

1379 11 get_element 0 4 2654 39 ConstPointerToArray< int >::get_element 0 1 35 0
85
inline int const &ConstPointerToArray< int >::get_element(unsigned long int n) const;

1380 11 __getitem__ 0 4 2654 39 ConstPointerToArray< int >::__getitem__ 0 1 36 0
78
int const &ConstPointerToArray< int >::__getitem__(unsigned long int n) const;

1381 8 get_data 0 4 2654 36 ConstPointerToArray< int >::get_data 0 1 37 0
82
inline std::basic_string< char > ConstPointerToArray< int >::get_data(void) const;

1382 11 get_subdata 0 4 2654 39 ConstPointerToArray< int >::get_subdata 0 1 38 0
125
inline std::basic_string< char > ConstPointerToArray< int >::get_subdata(unsigned long int n, unsigned long int count) const;

1383 13 get_ref_count 0 4 2654 41 ConstPointerToArray< int >::get_ref_count 0 1 39 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

1384 18 get_node_ref_count 0 4 2654 46 ConstPointerToArray< int >::get_node_ref_count 0 1 40 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

1385 13 __getbuffer__ 0 4 2654 41 ConstPointerToArray< int >::__getbuffer__ 0 1 41 0
96
int ConstPointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1386 17 __releasebuffer__ 0 4 2654 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 42 0
90
void ConstPointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1387 20 ~ConstPointerToArray 0 4 2654 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

1388 5 clear 0 4 2660 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 57 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

1389 6 output 0 4 2660 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 58 0
90
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(ostream &out) const;

1390 19 ~PointerToArrayBase 0 4 2659 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

1391 19 ConstPointerToArray 0 4 2658 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 3 45 46 47 0
319
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);
ConstPointerToArray< unsigned char >::ConstPointerToArray(PyObject *self, PyObject *source);

1392 4 size 0 4 2658 42 ConstPointerToArray< unsigned char >::size 0 1 48 0
80
inline unsigned long int ConstPointerToArray< unsigned char >::size(void) const;

1393 11 get_element 0 4 2658 49 ConstPointerToArray< unsigned char >::get_element 0 1 49 0
105
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(unsigned long int n) const;

1394 11 __getitem__ 0 4 2658 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 50 0
98
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(unsigned long int n) const;

1395 8 get_data 0 4 2658 46 ConstPointerToArray< unsigned char >::get_data 0 1 51 0
92
inline std::basic_string< char > ConstPointerToArray< unsigned char >::get_data(void) const;

1396 11 get_subdata 0 4 2658 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 52 0
135
inline std::basic_string< char > ConstPointerToArray< unsigned char >::get_subdata(unsigned long int n, unsigned long int count) const;

1397 13 get_ref_count 0 4 2658 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 53 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

1398 18 get_node_ref_count 0 4 2658 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 54 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

1399 13 __getbuffer__ 0 4 2658 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 55 0
106
int ConstPointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1400 17 __releasebuffer__ 0 4 2658 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 56 0
100
void ConstPointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1401 20 ~ConstPointerToArray 0 4 2658 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

1402 11 ConfigFlags 0 4 2662 24 ConfigFlags::ConfigFlags 0 2 82 83 0
112
inline ConfigFlags::ConfigFlags(void) = default;
inline ConfigFlags::ConfigFlags(ConfigFlags const &) = default;

1403 12 ~ConfigFlags 0 4 2662 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

1404 8 get_page 0 4 2661 27 ConfigDeclaration::get_page 0 1 59 67
/**
 * Returns the page on which this declaration can be found.
 */
59
inline ConfigPage *ConfigDeclaration::get_page(void) const;

1405 12 get_variable 0 4 2661 31 ConfigDeclaration::get_variable 0 1 60 148
/**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */
71
inline ConfigVariableCore *ConfigDeclaration::get_variable(void) const;

1406 16 get_default_page 0 4 2666 28 ConfigPage::get_default_page 0 1 84 0
54
static ConfigPage *ConfigPage::get_default_page(void);

1407 14 get_local_page 0 4 2666 26 ConfigPage::get_local_page 0 1 85 0
52
static ConfigPage *ConfigPage::get_local_page(void);

1408 8 get_name 0 4 2666 20 ConfigPage::get_name 0 1 86 115
/**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */
59
inline std::string const &ConfigPage::get_name(void) const;

1409 10 is_special 0 4 2666 22 ConfigPage::is_special 0 1 87 248
/**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */
47
inline bool ConfigPage::is_special(void) const;

1410 11 is_implicit 0 4 2666 23 ConfigPage::is_implicit 0 1 88 180
/**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */
48
inline bool ConfigPage::is_implicit(void) const;

1411 8 set_sort 0 4 2666 20 ConfigPage::set_sort 0 1 89 0
36
void ConfigPage::set_sort(int sort);

1412 8 get_sort 0 4 2666 20 ConfigPage::get_sort 0 1 90 93
/**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */
44
inline int ConfigPage::get_sort(void) const;

1413 12 get_page_seq 0 4 2666 24 ConfigPage::get_page_seq 0 1 91 413
/**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */
48
inline int ConfigPage::get_page_seq(void) const;

1414 15 get_trust_level 0 4 2666 27 ConfigPage::get_trust_level 0 1 92 302
/**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */
51
inline int ConfigPage::get_trust_level(void) const;

1415 15 set_trust_level 0 4 2666 27 ConfigPage::set_trust_level 0 1 93 195
/**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */
57
inline void ConfigPage::set_trust_level(int trust_level);

1416 13 get_signature 0 4 2666 25 ConfigPage::get_signature 0 1 94 153
/**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */
64
inline std::string const &ConfigPage::get_signature(void) const;

1417 5 clear 0 4 2666 17 ConfigPage::clear 0 1 95 0
29
void ConfigPage::clear(void);

1418 8 read_prc 0 4 2666 20 ConfigPage::read_prc 0 1 96 0
39
bool ConfigPage::read_prc(istream &in);

1419 18 read_encrypted_prc 0 4 2666 30 ConfigPage::read_encrypted_prc 0 1 97 0
78
bool ConfigPage::read_encrypted_prc(istream &in, std::string const &password);

1420 16 make_declaration 0 4 2666 28 ConfigPage::make_declaration 0 2 98 99 0
208
ConfigDeclaration *ConfigPage::make_declaration(std::string const &variable, std::string const &value);
ConfigDeclaration *ConfigPage::make_declaration(ConfigVariableCore *variable, std::string const &value);

1421 18 delete_declaration 0 4 2666 30 ConfigPage::delete_declaration 0 1 100 0
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

1422 20 get_num_declarations 0 4 2666 32 ConfigPage::get_num_declarations 0 1 101 0
57
std::size_t ConfigPage::get_num_declarations(void) const;

1423 15 get_declaration 0 4 2666 27 ConfigPage::get_declaration 0 1 102 0
74
ConfigDeclaration const *ConfigPage::get_declaration(std::size_t n) const;

1424 18 modify_declaration 0 4 2666 30 ConfigPage::modify_declaration 0 1 103 0
65
ConfigDeclaration *ConfigPage::modify_declaration(std::size_t n);

1425 17 get_variable_name 0 4 2666 29 ConfigPage::get_variable_name 0 1 104 0
63
std::string ConfigPage::get_variable_name(std::size_t n) const;

1426 16 get_string_value 0 4 2666 28 ConfigPage::get_string_value 0 1 105 0
62
std::string ConfigPage::get_string_value(std::size_t n) const;

1427 16 is_variable_used 0 4 2666 28 ConfigPage::is_variable_used 0 1 106 0
55
bool ConfigPage::is_variable_used(std::size_t n) const;

1428 6 output 0 4 2666 18 ConfigPage::output 0 1 107 0
44
void ConfigPage::output(ostream &out) const;

1429 22 output_brief_signature 0 4 2666 34 ConfigPage::output_brief_signature 0 1 108 0
60
void ConfigPage::output_brief_signature(ostream &out) const;

1430 5 write 0 4 2666 17 ConfigPage::write 0 1 109 0
43
void ConfigPage::write(ostream &out) const;

1431 8 get_name 0 4 2674 28 ConfigVariableCore::get_name 0 1 110 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableCore::get_name(void) const;

1432 7 is_used 0 4 2674 27 ConfigVariableCore::is_used 0 1 111 118
/**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */
52
inline bool ConfigVariableCore::is_used(void) const;

1433 14 get_value_type 0 4 2674 34 ConfigVariableCore::get_value_type 0 1 112 125
/**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */
77
inline ConfigFlags::ValueType ConfigVariableCore::get_value_type(void) const;

1434 15 get_description 0 4 2674 35 ConfigVariableCore::get_description 0 1 113 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableCore::get_description(void) const;

1435 9 get_flags 0 4 2674 29 ConfigVariableCore::get_flags 0 1 114 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableCore::get_flags(void) const;

1436 9 is_closed 0 4 2674 29 ConfigVariableCore::is_closed 0 1 115 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableCore::is_closed(void) const;

1437 15 get_trust_level 0 4 2674 35 ConfigVariableCore::get_trust_level 0 1 116 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableCore::get_trust_level(void) const;

1438 10 is_dynamic 0 4 2674 30 ConfigVariableCore::is_dynamic 0 1 117 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableCore::is_dynamic(void) const;

1439 17 get_default_value 0 4 2674 37 ConfigVariableCore::get_default_value 0 1 118 137
/**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */
82
inline ConfigDeclaration const *ConfigVariableCore::get_default_value(void) const;

1440 14 set_value_type 0 4 2674 34 ConfigVariableCore::set_value_type 0 1 119 0
75
void ConfigVariableCore::set_value_type(ConfigFlags::ValueType value_type);

1441 9 set_flags 0 4 2674 29 ConfigVariableCore::set_flags 0 1 120 0
46
void ConfigVariableCore::set_flags(int flags);

1442 15 set_description 0 4 2674 35 ConfigVariableCore::set_description 0 1 121 0
73
void ConfigVariableCore::set_description(std::string const &description);

1443 17 set_default_value 0 4 2674 37 ConfigVariableCore::set_default_value 0 1 122 0
77
void ConfigVariableCore::set_default_value(std::string const &default_value);

1444 8 set_used 0 4 2674 28 ConfigVariableCore::set_used 0 1 123 75
/**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */
47
inline void ConfigVariableCore::set_used(void);

1445 16 make_local_value 0 4 2674 36 ConfigVariableCore::make_local_value 0 1 124 0
62
ConfigDeclaration *ConfigVariableCore::make_local_value(void);

1446 17 clear_local_value 0 4 2674 37 ConfigVariableCore::clear_local_value 0 1 125 0
49
bool ConfigVariableCore::clear_local_value(void);

1447 15 has_local_value 0 4 2674 35 ConfigVariableCore::has_local_value 0 1 126 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableCore::has_local_value(void) const;

1448 9 has_value 0 4 2674 29 ConfigVariableCore::has_value 0 1 127 0
47
bool ConfigVariableCore::has_value(void) const;

1449 20 get_num_declarations 0 4 2674 40 ConfigVariableCore::get_num_declarations 0 1 128 0
65
std::size_t ConfigVariableCore::get_num_declarations(void) const;

1450 15 get_declaration 0 4 2674 35 ConfigVariableCore::get_declaration 0 1 129 0
82
ConfigDeclaration const *ConfigVariableCore::get_declaration(std::size_t n) const;

1451 18 get_num_references 0 4 2674 38 ConfigVariableCore::get_num_references 0 1 130 157
/**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */
70
inline std::size_t ConfigVariableCore::get_num_references(void) const;

1452 13 get_reference 0 4 2674 33 ConfigVariableCore::get_reference 0 1 131 335
/**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */
87
inline ConfigDeclaration const *ConfigVariableCore::get_reference(std::size_t n) const;

1453 26 get_num_trusted_references 0 4 2674 46 ConfigVariableCore::get_num_trusted_references 0 1 132 115
/**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */
78
inline std::size_t ConfigVariableCore::get_num_trusted_references(void) const;

1454 21 get_trusted_reference 0 4 2674 41 ConfigVariableCore::get_trusted_reference 0 1 133 428
/**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */
95
inline ConfigDeclaration const *ConfigVariableCore::get_trusted_reference(std::size_t n) const;

1455 25 get_num_unique_references 0 4 2674 45 ConfigVariableCore::get_num_unique_references 0 1 134 107
/**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */
77
inline std::size_t ConfigVariableCore::get_num_unique_references(void) const;

1456 20 get_unique_reference 0 4 2674 40 ConfigVariableCore::get_unique_reference 0 1 135 157
/**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */
94
inline ConfigDeclaration const *ConfigVariableCore::get_unique_reference(std::size_t n) const;

1457 6 output 0 4 2674 26 ConfigVariableCore::output 0 1 136 0
52
void ConfigVariableCore::output(ostream &out) const;

1458 5 write 0 4 2674 25 ConfigVariableCore::write 0 1 137 0
51
void ConfigVariableCore::write(ostream &out) const;

1459 16 get_string_value 0 4 2661 35 ConfigDeclaration::get_string_value 0 1 61 186
/**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */
74
inline std::string const &ConfigDeclaration::get_string_value(void) const;

1460 16 set_string_value 0 4 2661 35 ConfigDeclaration::set_string_value 0 1 62 55
/**
 * Changes the value assigned to this variable.
 */
74
inline void ConfigDeclaration::set_string_value(std::string const &value);

1461 13 get_num_words 0 4 2661 32 ConfigDeclaration::get_num_words 0 1 63 156
/**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */
64
inline std::size_t ConfigDeclaration::get_num_words(void) const;

1462 15 has_string_word 0 4 2661 34 ConfigDeclaration::has_string_word 0 1 64 184
/**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */
68
inline bool ConfigDeclaration::has_string_word(std::size_t n) const;

1463 13 has_bool_word 0 4 2661 32 ConfigDeclaration::has_bool_word 0 1 65 97
/**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */
66
inline bool ConfigDeclaration::has_bool_word(std::size_t n) const;

1464 12 has_int_word 0 4 2661 31 ConfigDeclaration::has_int_word 0 1 66 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
65
inline bool ConfigDeclaration::has_int_word(std::size_t n) const;

1465 14 has_int64_word 0 4 2661 33 ConfigDeclaration::has_int64_word 0 1 67 95
/**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */
67
inline bool ConfigDeclaration::has_int64_word(std::size_t n) const;

1466 15 has_double_word 0 4 2661 34 ConfigDeclaration::has_double_word 0 1 68 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
68
inline bool ConfigDeclaration::has_double_word(std::size_t n) const;

1467 15 get_string_word 0 4 2661 34 ConfigDeclaration::get_string_word 0 1 69 153
/**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */
75
inline std::string ConfigDeclaration::get_string_word(std::size_t n) const;

1468 13 get_bool_word 0 4 2661 32 ConfigDeclaration::get_bool_word 0 1 70 145
/**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */
66
inline bool ConfigDeclaration::get_bool_word(std::size_t n) const;

1469 12 get_int_word 0 4 2661 31 ConfigDeclaration::get_int_word 0 1 71 140
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */
64
inline int ConfigDeclaration::get_int_word(std::size_t n) const;

1470 14 get_int64_word 0 4 2661 33 ConfigDeclaration::get_int64_word 0 1 72 140
/**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */
70
inline int64_t ConfigDeclaration::get_int64_word(std::size_t n) const;

1471 15 get_double_word 0 4 2661 34 ConfigDeclaration::get_double_word 0 1 73 143
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */
70
inline double ConfigDeclaration::get_double_word(std::size_t n) const;

1472 15 set_string_word 0 4 2661 34 ConfigDeclaration::set_string_word 0 1 74 0
81
void ConfigDeclaration::set_string_word(std::size_t n, std::string const &value);

1473 13 set_bool_word 0 4 2661 32 ConfigDeclaration::set_bool_word 0 1 75 0
65
void ConfigDeclaration::set_bool_word(std::size_t n, bool value);

1474 12 set_int_word 0 4 2661 31 ConfigDeclaration::set_int_word 0 1 76 0
63
void ConfigDeclaration::set_int_word(std::size_t n, int value);

1475 14 set_int64_word 0 4 2661 33 ConfigDeclaration::set_int64_word 0 1 77 0
69
void ConfigDeclaration::set_int64_word(std::size_t n, int64_t value);

1476 15 set_double_word 0 4 2661 34 ConfigDeclaration::set_double_word 0 1 78 0
69
void ConfigDeclaration::set_double_word(std::size_t n, double value);

1477 12 get_decl_seq 0 4 2661 31 ConfigDeclaration::get_decl_seq 0 1 79 254
/**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */
55
inline int ConfigDeclaration::get_decl_seq(void) const;

1478 6 output 0 4 2661 25 ConfigDeclaration::output 0 1 80 0
51
void ConfigDeclaration::output(ostream &out) const;

1479 5 write 0 4 2661 24 ConfigDeclaration::write 0 1 81 0
50
void ConfigDeclaration::write(ostream &out) const;

1480 21 loaded_implicit_pages 0 4 2677 40 ConfigPageManager::loaded_implicit_pages 0 1 138 155
/**
 * Returns true if the implicit *.prc files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

1481 19 load_implicit_pages 0 4 2677 38 ConfigPageManager::load_implicit_pages 0 1 139 250
/**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */
57
inline void ConfigPageManager::load_implicit_pages(void);

1482 21 reload_implicit_pages 0 4 2677 40 ConfigPageManager::reload_implicit_pages 0 1 140 0
52
void ConfigPageManager::reload_implicit_pages(void);

1483 15 get_search_path 0 4 2677 34 ConfigPageManager::get_search_path 0 1 141 274
/**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

1484 20 get_num_prc_patterns 0 4 2677 39 ConfigPageManager::get_num_prc_patterns 0 1 142 270
/**
 * Returns the number of patterns, like "*.prc", that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is "*.prc", but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */
71
inline std::size_t ConfigPageManager::get_num_prc_patterns(void) const;

1485 15 get_prc_pattern 0 4 2677 34 ConfigPageManager::get_prc_pattern 0 1 143 131
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */
75
inline std::string ConfigPageManager::get_prc_pattern(std::size_t n) const;

1486 30 get_num_prc_encrypted_patterns 0 4 2677 49 ConfigPageManager::get_num_prc_encrypted_patterns 0 1 144 170
/**
 * Returns the number of patterns, like "*.pre", that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */
81
inline std::size_t ConfigPageManager::get_num_prc_encrypted_patterns(void) const;

1487 25 get_prc_encrypted_pattern 0 4 2677 44 ConfigPageManager::get_prc_encrypted_pattern 0 1 145 151
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */
85
inline std::string ConfigPageManager::get_prc_encrypted_pattern(std::size_t n) const;

1488 31 get_num_prc_executable_patterns 0 4 2677 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 146 232
/**
 * Returns the number of patterns, like "*.exe", that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */
82
inline std::size_t ConfigPageManager::get_num_prc_executable_patterns(void) const;

1489 26 get_prc_executable_pattern 0 4 2677 45 ConfigPageManager::get_prc_executable_pattern 0 1 147 159
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */
86
inline std::string ConfigPageManager::get_prc_executable_pattern(std::size_t n) const;

1490 18 make_explicit_page 0 4 2677 37 ConfigPageManager::make_explicit_page 0 1 148 0
75
ConfigPage *ConfigPageManager::make_explicit_page(std::string const &name);

1491 20 delete_explicit_page 0 4 2677 39 ConfigPageManager::delete_explicit_page 0 1 149 0
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

1492 22 get_num_implicit_pages 0 4 2677 41 ConfigPageManager::get_num_implicit_pages 0 1 150 174
/**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */
73
inline std::size_t ConfigPageManager::get_num_implicit_pages(void) const;

1493 17 get_implicit_page 0 4 2677 36 ConfigPageManager::get_implicit_page 0 1 151 94
/**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_implicit_page(std::size_t n) const;

1494 22 get_num_explicit_pages 0 4 2677 41 ConfigPageManager::get_num_explicit_pages 0 1 152 214
/**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */
73
inline std::size_t ConfigPageManager::get_num_explicit_pages(void) const;

1495 17 get_explicit_page 0 4 2677 36 ConfigPageManager::get_explicit_page 0 1 153 94
/**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_explicit_page(std::size_t n) const;

1496 6 output 0 4 2677 25 ConfigPageManager::output 0 1 154 0
51
void ConfigPageManager::output(ostream &out) const;

1497 5 write 0 4 2677 24 ConfigPageManager::write 0 1 155 0
50
void ConfigPageManager::write(ostream &out) const;

1498 14 get_global_ptr 0 4 2677 33 ConfigPageManager::get_global_ptr 0 1 156 0
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

1499 8 get_name 0 4 2679 28 ConfigVariableBase::get_name 0 1 163 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableBase::get_name(void) const;

1500 14 get_value_type 0 4 2679 34 ConfigVariableBase::get_value_type 0 1 164 132
/**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

1501 15 get_description 0 4 2679 35 ConfigVariableBase::get_description 0 1 165 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableBase::get_description(void) const;

1502 9 get_flags 0 4 2679 29 ConfigVariableBase::get_flags 0 1 166 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableBase::get_flags(void) const;

1503 9 is_closed 0 4 2679 29 ConfigVariableBase::is_closed 0 1 167 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableBase::is_closed(void) const;

1504 15 get_trust_level 0 4 2679 35 ConfigVariableBase::get_trust_level 0 1 168 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableBase::get_trust_level(void) const;

1505 10 is_dynamic 0 4 2679 30 ConfigVariableBase::is_dynamic 0 1 169 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableBase::is_dynamic(void) const;

1506 17 clear_local_value 0 4 2679 37 ConfigVariableBase::clear_local_value 0 1 170 240
/**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */
56
inline bool ConfigVariableBase::clear_local_value(void);

1507 15 has_local_value 0 4 2679 35 ConfigVariableBase::has_local_value 0 1 171 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableBase::has_local_value(void) const;

1508 9 has_value 0 4 2679 29 ConfigVariableBase::has_value 0 1 172 149
/**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */
54
inline bool ConfigVariableBase::has_value(void) const;

1509 6 output 0 4 2679 26 ConfigVariableBase::output 0 1 173 10
/**
 *
 */
59
inline void ConfigVariableBase::output(ostream &out) const;

1510 5 write 0 4 2679 25 ConfigVariableBase::write 0 1 174 10
/**
 *
 */
58
inline void ConfigVariableBase::write(ostream &out) const;

1511 14 ConfigVariable 0 4 2678 30 ConfigVariable::ConfigVariable 0 2 157 158 458
/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */
136
inline ConfigVariable::ConfigVariable(std::string const &name);
inline ConfigVariable::ConfigVariable(ConfigVariable const &) = default;

1512 15 ~ConfigVariable 0 4 2678 31 ConfigVariable::~ConfigVariable 0 0 10
/**
 *
 */
45
inline ConfigVariable::~ConfigVariable(void);

1513 16 get_string_value 0 4 2678 32 ConfigVariable::get_string_value 0 1 159 77
/**
 * Returns the toplevel value of the variable, formatted as a string.
 */
71
inline std::string const &ConfigVariable::get_string_value(void) const;

1514 16 set_string_value 0 4 2678 32 ConfigVariable::set_string_value 0 1 160 177
/**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */
71
inline void ConfigVariable::set_string_value(std::string const &value);

1515 11 clear_value 0 4 2678 27 ConfigVariable::clear_value 0 1 161 129
/**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */
46
inline void ConfigVariable::clear_value(void);

1516 13 get_num_words 0 4 2678 29 ConfigVariable::get_num_words 0 1 162 153
/**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */
61
inline std::size_t ConfigVariable::get_num_words(void) const;

1517 18 ConfigVariableBool 0 4 2680 38 ConfigVariableBool::ConfigVariableBool 0 4 175 176 177 178 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
470
inline ConfigVariableBool::ConfigVariableBool(std::string const &name);
inline ConfigVariableBool::ConfigVariableBool(std::string const &name, bool default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(ConfigVariableBool const &) = default;

1518 10 operator = 0 4 2680 30 ConfigVariableBool::operator = 0 1 179 0
55
inline void ConfigVariableBool::operator =(bool value);

1519 22 operator typecast bool 0 132 2680 42 ConfigVariableBool::operator typecast bool 0 1 187 0
67
inline bool ConfigVariableBool::operator typecast bool(void) const;

1520 4 size 0 4 2680 24 ConfigVariableBool::size 0 1 180 62
/**
 * Returns the number of unique words in the variable.
 */
56
inline std::size_t ConfigVariableBool::size(void) const;

1521 11 operator [] 0 4 2680 31 ConfigVariableBool::operator [] 0 1 181 0
65
inline bool ConfigVariableBool::operator [](std::size_t n) const;

1522 9 set_value 0 4 2680 29 ConfigVariableBool::set_value 0 1 182 48
/**
 * Reassigns the variable's local value.
 */
54
inline void ConfigVariableBool::set_value(bool value);

1523 9 get_value 0 4 2680 29 ConfigVariableBool::get_value 0 1 183 40
/**
 * Returns the variable's value.
 */
54
inline bool ConfigVariableBool::get_value(void) const;

1524 17 get_default_value 0 4 2680 37 ConfigVariableBool::get_default_value 0 1 184 48
/**
 * Returns the variable's default value.
 */
62
inline bool ConfigVariableBool::get_default_value(void) const;

1525 8 get_word 0 4 2680 28 ConfigVariableBool::get_word 0 1 185 44
/**
 * Returns the variable's nth value.
 */
62
inline bool ConfigVariableBool::get_word(std::size_t n) const;

1526 8 set_word 0 4 2680 28 ConfigVariableBool::set_word 0 1 186 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
68
inline void ConfigVariableBool::set_word(std::size_t n, bool value);

1527 19 ~ConfigVariableBool 0 4 2680 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

1528 20 ConfigVariableDouble 0 4 2681 42 ConfigVariableDouble::ConfigVariableDouble 0 4 188 189 190 191 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
490
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name);
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name, double default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(ConfigVariableDouble const &) = default;

1529 10 operator = 0 4 2681 32 ConfigVariableDouble::operator = 0 1 192 0
59
inline void ConfigVariableDouble::operator =(double value);

1530 24 operator typecast double 0 132 2681 46 ConfigVariableDouble::operator typecast double 0 1 200 0
73
inline double ConfigVariableDouble::operator typecast double(void) const;

1531 4 size 0 4 2681 26 ConfigVariableDouble::size 0 1 193 62
/**
 * Returns the number of unique words in the variable.
 */
58
inline std::size_t ConfigVariableDouble::size(void) const;

1532 11 operator [] 0 4 2681 33 ConfigVariableDouble::operator [] 0 1 194 0
69
inline double ConfigVariableDouble::operator [](std::size_t n) const;

1533 9 set_value 0 4 2681 31 ConfigVariableDouble::set_value 0 1 195 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableDouble::set_value(double value);

1534 9 get_value 0 4 2681 31 ConfigVariableDouble::get_value 0 1 196 40
/**
 * Returns the variable's value.
 */
58
inline double ConfigVariableDouble::get_value(void) const;

1535 17 get_default_value 0 4 2681 39 ConfigVariableDouble::get_default_value 0 1 197 48
/**
 * Returns the variable's default value.
 */
66
inline double ConfigVariableDouble::get_default_value(void) const;

1536 8 get_word 0 4 2681 30 ConfigVariableDouble::get_word 0 1 198 44
/**
 * Returns the variable's nth value.
 */
66
inline double ConfigVariableDouble::get_word(std::size_t n) const;

1537 8 set_word 0 4 2681 30 ConfigVariableDouble::set_word 0 1 199 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableDouble::set_word(std::size_t n, double value);

1538 21 ~ConfigVariableDouble 0 4 2681 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

1539 22 ConfigVariableFilename 0 4 2683 46 ConfigVariableFilename::ConfigVariableFilename 0 3 201 202 203 22
/**
 *
 */

/**
 *
 */
345
inline ConfigVariableFilename::ConfigVariableFilename(std::string const &name);
inline ConfigVariableFilename::ConfigVariableFilename(std::string const &name, Filename const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableFilename::ConfigVariableFilename(ConfigVariableFilename const &) = default;

1540 10 operator = 0 4 2683 34 ConfigVariableFilename::operator = 0 1 204 0
70
inline void ConfigVariableFilename::operator =(Filename const &value);

1541 17 operator typecast 0 132 2683 41 ConfigVariableFilename::operator typecast 0 1 223 0
77
inline Filename const &ConfigVariableFilename::operator typecast(void) const;

1542 5 c_str 0 4 2683 29 ConfigVariableFilename::c_str 0 1 205 88
// These methods help the ConfigVariableFilename act like a Filename object.

/**
 *
 */
61
inline char const *ConfigVariableFilename::c_str(void) const;

1543 5 empty 0 4 2683 29 ConfigVariableFilename::empty 0 1 206 10
/**
 *
 */
54
inline bool ConfigVariableFilename::empty(void) const;

1544 6 length 0 4 2683 30 ConfigVariableFilename::length 0 1 207 10
/**
 *
 */
62
inline std::size_t ConfigVariableFilename::length(void) const;

1545 11 operator [] 0 4 2683 35 ConfigVariableFilename::operator [] 0 1 208 0
69
inline char ConfigVariableFilename::operator [](std::size_t n) const;

1546 12 get_fullpath 0 4 2683 36 ConfigVariableFilename::get_fullpath 0 1 209 183
/**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */
68
inline std::string ConfigVariableFilename::get_fullpath(void) const;

1547 11 get_dirname 0 4 2683 35 ConfigVariableFilename::get_dirname 0 1 210 139
/**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */
67
inline std::string ConfigVariableFilename::get_dirname(void) const;

1548 12 get_basename 0 4 2683 36 ConfigVariableFilename::get_basename 0 1 211 145
/**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */
68
inline std::string ConfigVariableFilename::get_basename(void) const;

1549 25 get_fullpath_wo_extension 0 4 2683 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 212 96
/**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */
81
inline std::string ConfigVariableFilename::get_fullpath_wo_extension(void) const;

1550 25 get_basename_wo_extension 0 4 2683 49 ConfigVariableFilename::get_basename_wo_extension 0 1 213 81
/**
 * Returns the basename part of the filename, without the file extension.
 */
81
inline std::string ConfigVariableFilename::get_basename_wo_extension(void) const;

1551 13 get_extension 0 4 2683 37 ConfigVariableFilename::get_extension 0 1 214 140
/**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */
69
inline std::string ConfigVariableFilename::get_extension(void) const;

1552 11 operator == 0 4 2683 35 ConfigVariableFilename::operator == 0 1 215 34
// Comparison operators are handy.
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

1553 11 operator != 0 4 2683 35 ConfigVariableFilename::operator != 0 1 216 0
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

1554 10 operator < 0 4 2683 34 ConfigVariableFilename::operator < 0 1 217 0
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

1555 9 set_value 0 4 2683 33 ConfigVariableFilename::set_value 0 1 218 48
/**
 * Reassigns the variable's local value.
 */
69
inline void ConfigVariableFilename::set_value(Filename const &value);

1556 9 get_value 0 4 2683 33 ConfigVariableFilename::get_value 0 1 219 40
/**
 * Returns the variable's value.
 */
62
inline Filename ConfigVariableFilename::get_value(void) const;

1557 17 get_default_value 0 4 2683 41 ConfigVariableFilename::get_default_value 0 1 220 48
/**
 * Returns the variable's default value.
 */
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

1558 8 Filename 0 4 2684 18 Filename::Filename 0 3 224 225 226 85
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 * Creates an empty Filename.
 */
139
inline Filename::Filename(void);
Filename::Filename(Filename const &dirname, Filename const &basename);
Filename::Filename(PyObject *path);

1559 10 __reduce__ 0 4 2684 20 Filename::__reduce__ 0 1 227 0
53
PyObject *Filename::__reduce__(PyObject *self) const;

1560 13 text_filename 0 4 2684 23 Filename::text_filename 0 2 228 229 192
// Static constructors to explicitly create a filename that refers to a text
// or binary file.  This is in lieu of calling set_text() or set_binary() or
// set_type().

/**
 *
 */

/**
 *
 */
150
static inline Filename Filename::text_filename(Filename const &filename);
static inline Filename Filename::text_filename(std::string const &filename);

1561 15 binary_filename 0 4 2684 25 Filename::binary_filename 0 2 230 231 22
/**
 *
 */

/**
 *
 */
154
static inline Filename Filename::binary_filename(Filename const &filename);
static inline Filename Filename::binary_filename(std::string const &filename);

1562 12 dso_filename 0 4 2684 22 Filename::dso_filename 0 1 232 10
/**
 *
 */
75
static inline Filename Filename::dso_filename(std::string const &filename);

1563 19 executable_filename 0 4 2684 29 Filename::executable_filename 0 1 233 10
/**
 *
 */
82
static inline Filename Filename::executable_filename(std::string const &filename);

1564 16 pattern_filename 0 4 2684 26 Filename::pattern_filename 0 1 234 101
/**
 * Constructs a filename that represents a sequence of numbered files.  See
 * set_pattern().
 */
79
static inline Filename Filename::pattern_filename(std::string const &filename);

1565 16 from_os_specific 0 4 2684 26 Filename::from_os_specific 0 1 235 0
120
static Filename Filename::from_os_specific(std::string const &os_specific, Filename::Type type = ::Filename::T_general);

1566 18 from_os_specific_w 0 4 2684 28 Filename::from_os_specific_w 0 1 236 0
123
static Filename Filename::from_os_specific_w(std::wstring const &os_specific, Filename::Type type = ::Filename::T_general);

1567 11 expand_from 0 4 2684 21 Filename::expand_from 0 1 237 0
115
static Filename Filename::expand_from(std::string const &user_string, Filename::Type type = ::Filename::T_general);

1568 9 temporary 0 4 2684 19 Filename::temporary 0 1 238 0
174
static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix = string(), Filename::Type type = ::Filename::T_general);

1569 18 get_home_directory 0 4 2684 28 Filename::get_home_directory 0 1 239 0
58
static Filename const &Filename::get_home_directory(void);

1570 18 get_temp_directory 0 4 2684 28 Filename::get_temp_directory 0 1 240 0
58
static Filename const &Filename::get_temp_directory(void);

1571 26 get_user_appdata_directory 0 4 2684 36 Filename::get_user_appdata_directory 0 1 241 0
66
static Filename const &Filename::get_user_appdata_directory(void);

1572 28 get_common_appdata_directory 0 4 2684 38 Filename::get_common_appdata_directory 0 1 242 0
68
static Filename const &Filename::get_common_appdata_directory(void);

1573 10 operator = 0 4 2684 20 Filename::operator = 0 4 243 244 245 246 84
// Assignment is via the = operator.

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
258
inline Filename &Filename::operator =(std::string const &filename);
inline Filename &Filename::operator =(std::wstring const &filename);
inline Filename &Filename::operator =(char const *filename);
inline Filename &Filename::operator =(Filename const &copy);

1574 17 operator typecast 0 132 2684 27 Filename::operator typecast 0 1 339 60
// And retrieval is by any of the classic string operations.
66
inline std::string const &Filename::operator typecast(void) const;

1575 5 c_str 0 4 2684 15 Filename::c_str 0 1 247 10
/**
 *
 */
47
inline char const *Filename::c_str(void) const;

1576 5 empty 0 4 2684 15 Filename::empty 0 1 248 10
/**
 *
 */
40
inline bool Filename::empty(void) const;

1577 6 length 0 4 2684 16 Filename::length 0 1 249 10
/**
 *
 */
48
inline std::size_t Filename::length(void) const;

1578 11 operator [] 0 4 2684 21 Filename::operator [] 0 1 250 0
55
inline char Filename::operator [](std::size_t n) const;

1579 8 __repr__ 0 4 2684 18 Filename::__repr__ 0 1 251 0
41
PyObject *Filename::__repr__(void) const;

1580 10 __fspath__ 0 4 2684 20 Filename::__fspath__ 0 1 252 0
43
PyObject *Filename::__fspath__(void) const;

1581 6 substr 0 4 2684 16 Filename::substr 0 2 253 254 22
/**
 *
 */

/**
 *
 */
140
inline std::string Filename::substr(std::size_t begin) const;
inline std::string Filename::substr(std::size_t begin, std::size_t end) const;

1582 11 operator += 0 4 2684 21 Filename::operator += 0 1 255 0
60
inline void Filename::operator +=(std::string const &other);

1583 10 operator + 0 4 2684 20 Filename::operator + 0 1 256 0
69
inline Filename Filename::operator +(std::string const &other) const;

1584 10 operator / 0 4 2684 20 Filename::operator / 0 1 257 0
66
inline Filename Filename::operator /(Filename const &other) const;

1585 12 get_fullpath 0 4 2684 22 Filename::get_fullpath 0 1 258 174
// Or, you can use any of these.

/**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator.
 */
54
inline std::string Filename::get_fullpath(void) const;

1586 14 get_fullpath_w 0 4 2684 24 Filename::get_fullpath_w 0 1 259 66
/**
 * Returns the entire filename as a wide-character string.
 */
57
inline std::wstring Filename::get_fullpath_w(void) const;

1587 11 get_dirname 0 4 2684 21 Filename::get_dirname 0 1 260 139
/**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */
53
inline std::string Filename::get_dirname(void) const;

1588 12 get_basename 0 4 2684 22 Filename::get_basename 0 1 261 145
/**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */
54
inline std::string Filename::get_basename(void) const;

1589 25 get_fullpath_wo_extension 0 4 2684 35 Filename::get_fullpath_wo_extension 0 1 262 96
/**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */
67
inline std::string Filename::get_fullpath_wo_extension(void) const;

1590 25 get_basename_wo_extension 0 4 2684 35 Filename::get_basename_wo_extension 0 1 263 81
/**
 * Returns the basename part of the filename, without the file extension.
 */
67
inline std::string Filename::get_basename_wo_extension(void) const;

1591 13 get_extension 0 4 2684 23 Filename::get_extension 0 1 264 140
/**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */
55
inline std::string Filename::get_extension(void) const;

1592 12 set_fullpath 0 4 2684 22 Filename::set_fullpath 0 1 265 68
// You can also use any of these to reassign pieces of the filename.
50
void Filename::set_fullpath(std::string const &s);

1593 11 set_dirname 0 4 2684 21 Filename::set_dirname 0 1 266 0
49
void Filename::set_dirname(std::string const &s);

1594 12 set_basename 0 4 2684 22 Filename::set_basename 0 1 267 0
50
void Filename::set_basename(std::string const &s);

1595 25 set_fullpath_wo_extension 0 4 2684 35 Filename::set_fullpath_wo_extension 0 1 268 0
63
void Filename::set_fullpath_wo_extension(std::string const &s);

1596 25 set_basename_wo_extension 0 4 2684 35 Filename::set_basename_wo_extension 0 1 269 0
63
void Filename::set_basename_wo_extension(std::string const &s);

1597 13 set_extension 0 4 2684 23 Filename::set_extension 0 1 270 0
51
void Filename::set_extension(std::string const &s);

1598 10 set_binary 0 4 2684 20 Filename::set_binary 0 1 271 429
// Setting these flags appropriately is helpful when opening or searching
// for a file; it helps the Filename resolve OS-specific conventions (for
// instance, that dynamic library names should perhaps be changed from .so
// to .dll).

/**
 * Indicates that the filename represents a binary file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */
39
inline void Filename::set_binary(void);

1599 8 set_text 0 4 2684 18 Filename::set_text 0 1 272 190
/**
 * Indicates that the filename represents a text file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */
37
inline void Filename::set_text(void);

1600 9 is_binary 0 4 2684 19 Filename::is_binary 0 1 273 256
/**
 * Returns true if the Filename has been indicated to represent a binary file
 * via a previous call to set_binary().  It is possible that neither
 * is_binary() nor is_text() will be true, if neither set_binary() nor
 * set_text() was ever called.
 */
44
inline bool Filename::is_binary(void) const;

1601 7 is_text 0 4 2684 17 Filename::is_text 0 1 274 252
/**
 * Returns true if the Filename has been indicated to represent a text file
 * via a previous call to set_text().  It is possible that neither is_binary()
 * nor is_text() will be true, if neither set_binary() nor set_text() was ever
 * called.
 */
42
inline bool Filename::is_text(void) const;

1602 17 is_binary_or_text 0 4 2684 27 Filename::is_binary_or_text 0 1 275 198
/**
 * Returns true either is_binary() or is_text() is true; that is, that the
 * filename has been specified as either binary or text.  If this is false,
 * the filename has not been specified.
 */
52
inline bool Filename::is_binary_or_text(void) const;

1603 8 set_type 0 4 2684 18 Filename::set_type 0 1 276 350
/**
 * Sets the type of the file represented by the filename.  This is useful for
 * to_os_specific(), resolve_filename(), test_existence(), and all such real-
 * world access functions.  It helps the Filename know how to map the internal
 * filename to the OS-specific filename (for instance, maybe executables
 * should have an .exe extension).
 */
52
inline void Filename::set_type(Filename::Type type);

1604 8 get_type 0 4 2684 18 Filename::get_type 0 1 277 104
/**
 * Returns the type of the file represented by the filename, as previously set
 * by set_type().
 */
53
inline Filename::Type Filename::get_type(void) const;

1605 11 set_pattern 0 4 2684 21 Filename::set_pattern 0 1 278 688
/**
 * Sets the flag indicating whether this is a filename pattern.  When this is
 * true, the filename is understood to be a placeholder for a numbered
 * sequence of filename, such as an image sequence.  In this case, a sequence
 * of one or more hash characters ("#") should appear in the filename string;
 * these characters will be filled in with the corresponding number (or more)
 * of digits representing the sequence number.  Sequence numbers always begin
 * counting at 0.
 *
 * When this is true, methods like has_hash() and get_hash_to_end() and
 * get_filename_index() may be called.  Methods like is_exists() will
 * implicitly test for existance of filename sequence 0.
 */
48
inline void Filename::set_pattern(bool pattern);

1606 11 get_pattern 0 4 2684 21 Filename::get_pattern 0 1 279 97
/**
 * Returns the flag indicating whether this is a filename pattern.  See
 * set_pattern().
 */
46
inline bool Filename::get_pattern(void) const;

1607 8 has_hash 0 4 2684 18 Filename::has_hash 0 1 280 354
/**
 * Returns true if the filename is indicated to be a filename pattern (that
 * is, set_pattern(true) was called), and the filename pattern did include a
 * sequence of hash marks, or false if it was not a filename pattern or did
 * not include hash marks.  If this is true, then get_filename_index() will
 * return a different filename each time.
 */
43
inline bool Filename::has_hash(void) const;

1608 18 get_filename_index 0 4 2684 28 Filename::get_filename_index 0 1 281 0
55
Filename Filename::get_filename_index(int index) const;

1609 15 get_hash_to_end 0 4 2684 25 Filename::get_hash_to_end 0 1 282 130
/**
 * Returns the part of the filename beginning at the hash sequence (if any),
 * and continuing to the end of the filename.
 */
57
inline std::string Filename::get_hash_to_end(void) const;

1610 15 set_hash_to_end 0 4 2684 25 Filename::set_hash_to_end 0 1 283 0
53
void Filename::set_hash_to_end(std::string const &s);

1611 18 extract_components 0 4 2684 28 Filename::extract_components 0 1 284 0
67
void Filename::extract_components(vector_string &components) const;

1612 11 standardize 0 4 2684 21 Filename::standardize 0 1 285 0
33
void Filename::standardize(void);

1613 8 is_local 0 4 2684 18 Filename::is_local 0 1 286 146
/**
 * Returns true if the filename is local, e.g.  does not begin with a slash,
 * or false if the filename is fully specified from the root.
 */
43
inline bool Filename::is_local(void) const;

1614 18 is_fully_qualified 0 4 2684 28 Filename::is_fully_qualified 0 1 287 444
/**
 * Returns true if the filename is fully qualified, e.g.  begins with a slash.
 * This is almost, but not quite, the same thing as !is_local().  It's not
 * exactly the same because a special case is made for filenames that begin
 * with a single dot followed by a slash--these are considered to be fully
 * qualified (they are explicitly relative to the current directory, and do
 * not refer to a filename on a search path somewhere).
 */
53
inline bool Filename::is_fully_qualified(void) const;

1615 13 make_absolute 0 4 2684 23 Filename::make_absolute 0 2 288 289 0
98
void Filename::make_absolute(void);
void Filename::make_absolute(Filename const &start_directory);

1616 14 make_canonical 0 4 2684 24 Filename::make_canonical 0 1 290 0
36
bool Filename::make_canonical(void);

1617 14 make_true_case 0 4 2684 24 Filename::make_true_case 0 1 291 0
36
bool Filename::make_true_case(void);

1618 14 to_os_specific 0 4 2684 24 Filename::to_os_specific 0 1 292 0
49
std::string Filename::to_os_specific(void) const;

1619 16 to_os_specific_w 0 4 2684 26 Filename::to_os_specific_w 0 1 293 0
52
std::wstring Filename::to_os_specific_w(void) const;

1620 13 to_os_generic 0 4 2684 23 Filename::to_os_generic 0 1 294 0
48
std::string Filename::to_os_generic(void) const;

1621 16 to_os_short_name 0 4 2684 26 Filename::to_os_short_name 0 1 295 0
51
std::string Filename::to_os_short_name(void) const;

1622 15 to_os_long_name 0 4 2684 25 Filename::to_os_long_name 0 1 296 0
50
std::string Filename::to_os_long_name(void) const;

1623 6 exists 0 4 2684 16 Filename::exists 0 1 297 0
34
bool Filename::exists(void) const;

1624 15 is_regular_file 0 4 2684 25 Filename::is_regular_file 0 1 298 0
43
bool Filename::is_regular_file(void) const;

1625 11 is_writable 0 4 2684 21 Filename::is_writable 0 1 299 0
39
bool Filename::is_writable(void) const;

1626 12 is_directory 0 4 2684 22 Filename::is_directory 0 1 300 0
40
bool Filename::is_directory(void) const;

1627 13 is_executable 0 4 2684 23 Filename::is_executable 0 1 301 0
41
bool Filename::is_executable(void) const;

1628 18 compare_timestamps 0 4 2684 28 Filename::compare_timestamps 0 1 302 0
129
int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old = true, bool other_missing_is_old = true) const;

1629 13 get_timestamp 0 4 2684 23 Filename::get_timestamp 0 1 303 0
43
time_t Filename::get_timestamp(void) const;

1630 20 get_access_timestamp 0 4 2684 30 Filename::get_access_timestamp 0 1 304 0
50
time_t Filename::get_access_timestamp(void) const;

1631 13 get_file_size 0 4 2684 23 Filename::get_file_size 0 1 305 0
47
streamsize Filename::get_file_size(void) const;

1632 16 resolve_filename 0 4 2684 26 Filename::resolve_filename 0 1 306 0
112
bool Filename::resolve_filename(DSearchPath const &searchpath, std::string const &default_extension = string());

1633 16 make_relative_to 0 4 2684 26 Filename::make_relative_to 0 1 307 0
79
bool Filename::make_relative_to(Filename directory, bool allow_backups = true);

1634 18 find_on_searchpath 0 4 2684 28 Filename::find_on_searchpath 0 1 308 0
64
int Filename::find_on_searchpath(DSearchPath const &searchpath);

1635 14 scan_directory 0 4 2684 24 Filename::scan_directory 0 2 309 310 0
109
bool Filename::scan_directory(vector_string &contents) const;
PyObject *Filename::scan_directory(void) const;

1636 9 open_read 0 4 2684 19 Filename::open_read 0 2 311 312 0
100
bool Filename::open_read(ifstream &stream) const;
bool Filename::open_read(pifstream &stream) const;

1637 10 open_write 0 4 2684 20 Filename::open_write 0 2 313 314 0
146
bool Filename::open_write(ofstream &stream, bool truncate = true) const;
bool Filename::open_write(pofstream &stream, bool truncate = true) const;

1638 11 open_append 0 4 2684 21 Filename::open_append 0 2 315 316 0
104
bool Filename::open_append(ofstream &stream) const;
bool Filename::open_append(pofstream &stream) const;

1639 15 open_read_write 0 4 2684 25 Filename::open_read_write 0 2 317 318 0
156
bool Filename::open_read_write(fstream &stream, bool truncate = false) const;
bool Filename::open_read_write(pfstream &stream, bool truncate = false) const;

1640 16 open_read_append 0 4 2684 26 Filename::open_read_append 0 2 319 320 0
112
bool Filename::open_read_append(fstream &stream) const;
bool Filename::open_read_append(pfstream &stream) const;

1641 5 chdir 0 4 2684 15 Filename::chdir 0 1 321 0
33
bool Filename::chdir(void) const;

1642 5 touch 0 4 2684 15 Filename::touch 0 1 322 0
33
bool Filename::touch(void) const;

1643 6 unlink 0 4 2684 16 Filename::unlink 0 1 323 0
34
bool Filename::unlink(void) const;

1644 9 rename_to 0 4 2684 19 Filename::rename_to 0 1 324 0
54
bool Filename::rename_to(Filename const &other) const;

1645 7 copy_to 0 4 2684 17 Filename::copy_to 0 1 325 0
52
bool Filename::copy_to(Filename const &other) const;

1646 8 make_dir 0 4 2684 18 Filename::make_dir 0 1 326 0
36
bool Filename::make_dir(void) const;

1647 5 mkdir 0 4 2684 15 Filename::mkdir 0 1 327 0
33
bool Filename::mkdir(void) const;

1648 5 rmdir 0 4 2684 15 Filename::rmdir 0 1 328 0
33
bool Filename::rmdir(void) const;

1649 11 operator == 0 4 2684 21 Filename::operator == 0 1 329 34
// Comparison operators are handy.
66
inline bool Filename::operator ==(std::string const &other) const;

1650 11 operator != 0 4 2684 21 Filename::operator != 0 1 330 0
66
inline bool Filename::operator !=(std::string const &other) const;

1651 10 operator < 0 4 2684 20 Filename::operator < 0 1 331 0
65
inline bool Filename::operator <(std::string const &other) const;

1652 10 compare_to 0 4 2684 20 Filename::compare_to 0 1 332 10
/**
 *
 */
61
inline int Filename::compare_to(Filename const &other) const;

1653 11 __nonzero__ 0 4 2684 21 Filename::__nonzero__ 0 1 333 349
/**
 * Returns true if the Filename is valid (not empty), or false if it is an
 * empty string.
 *
 * This implements the Python equivalent to operator bool.  Defining an actual
 * operator bool method for C++ use would work too, but it seems to cause too
 * many ambiguities for the C++ compiler, so we use this Python-only approach
 * instead.
 */
46
inline bool Filename::__nonzero__(void) const;

1654 8 get_hash 0 4 2684 18 Filename::get_hash 0 1 334 0
35
int Filename::get_hash(void) const;

1655 6 output 0 4 2684 16 Filename::output 0 1 335 10
/**
 *
 */
49
inline void Filename::output(ostream &out) const;

1656 23 set_filesystem_encoding 0 4 2684 33 Filename::set_filesystem_encoding 0 1 336 266
/**
 * Specifies the default encoding to be used for all subsequent Filenames.
 * This is used to represent wide-character (Unicode) filenames internally.
 * On non-Windows-based systems, the encoded filename is also passed to the
 * underlying operating system.
 */
85
static inline void Filename::set_filesystem_encoding(TextEncoder::Encoding encoding);

1657 23 get_filesystem_encoding 0 4 2684 33 Filename::get_filesystem_encoding 0 1 337 125
/**
 * Specifies the default encoding to be used for all subsequent Filenames
 * objects.  See set_filesystem_encoding().
 */
76
static inline TextEncoder::Encoding Filename::get_filesystem_encoding(void);

1658 14 get_class_type 0 4 2684 24 Filename::get_class_type 0 1 338 0
49
static TypeHandle Filename::get_class_type(void);

1659 9 ~Filename 0 4 2684 19 Filename::~Filename 0 0 0
26
Filename::~Filename(void);

1660 8 get_word 0 4 2683 32 ConfigVariableFilename::get_word 0 1 221 44
/**
 * Returns the variable's nth value.
 */
70
inline Filename ConfigVariableFilename::get_word(std::size_t n) const;

1661 8 set_word 0 4 2683 32 ConfigVariableFilename::set_word 0 1 222 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
83
inline void ConfigVariableFilename::set_word(std::size_t n, Filename const &value);

1662 23 ~ConfigVariableFilename 0 4 2683 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

1663 17 ConfigVariableInt 0 4 2686 36 ConfigVariableInt::ConfigVariableInt 0 4 340 341 342 343 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
460
inline ConfigVariableInt::ConfigVariableInt(std::string const &name);
inline ConfigVariableInt::ConfigVariableInt(std::string const &name, int default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(ConfigVariableInt const &) = default;

1664 10 operator = 0 4 2686 29 ConfigVariableInt::operator = 0 1 344 0
53
inline void ConfigVariableInt::operator =(int value);

1665 21 operator typecast int 0 132 2686 40 ConfigVariableInt::operator typecast int 0 1 352 0
64
inline int ConfigVariableInt::operator typecast int(void) const;

1666 4 size 0 4 2686 23 ConfigVariableInt::size 0 1 345 62
/**
 * Returns the number of unique words in the variable.
 */
55
inline std::size_t ConfigVariableInt::size(void) const;

1667 11 operator [] 0 4 2686 30 ConfigVariableInt::operator [] 0 1 346 0
63
inline int ConfigVariableInt::operator [](std::size_t n) const;

1668 9 set_value 0 4 2686 28 ConfigVariableInt::set_value 0 1 347 48
/**
 * Reassigns the variable's local value.
 */
52
inline void ConfigVariableInt::set_value(int value);

1669 9 get_value 0 4 2686 28 ConfigVariableInt::get_value 0 1 348 40
/**
 * Returns the variable's value.
 */
52
inline int ConfigVariableInt::get_value(void) const;

1670 17 get_default_value 0 4 2686 36 ConfigVariableInt::get_default_value 0 1 349 48
/**
 * Returns the variable's default value.
 */
60
inline int ConfigVariableInt::get_default_value(void) const;

1671 8 get_word 0 4 2686 27 ConfigVariableInt::get_word 0 1 350 44
/**
 * Returns the variable's nth value.
 */
60
inline int ConfigVariableInt::get_word(std::size_t n) const;

1672 8 set_word 0 4 2686 27 ConfigVariableInt::set_word 0 1 351 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
66
inline void ConfigVariableInt::set_word(std::size_t n, int value);

1673 18 ~ConfigVariableInt 0 4 2686 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

1674 19 ConfigVariableInt64 0 4 2687 40 ConfigVariableInt64::ConfigVariableInt64 0 4 353 354 355 356 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
482
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name);
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name, int64_t default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(ConfigVariableInt64 const &) = default;

1675 10 operator = 0 4 2687 31 ConfigVariableInt64::operator = 0 1 357 0
59
inline void ConfigVariableInt64::operator =(int64_t value);

1676 25 operator typecast int64_t 0 132 2687 46 ConfigVariableInt64::operator typecast int64_t 0 1 365 0
74
inline int64_t ConfigVariableInt64::operator typecast int64_t(void) const;

1677 4 size 0 4 2687 25 ConfigVariableInt64::size 0 1 358 62
/**
 * Returns the number of unique words in the variable.
 */
57
inline std::size_t ConfigVariableInt64::size(void) const;

1678 11 operator [] 0 4 2687 32 ConfigVariableInt64::operator [] 0 1 359 0
69
inline int64_t ConfigVariableInt64::operator [](std::size_t n) const;

1679 9 set_value 0 4 2687 30 ConfigVariableInt64::set_value 0 1 360 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableInt64::set_value(int64_t value);

1680 9 get_value 0 4 2687 30 ConfigVariableInt64::get_value 0 1 361 40
/**
 * Returns the variable's value.
 */
58
inline int64_t ConfigVariableInt64::get_value(void) const;

1681 17 get_default_value 0 4 2687 38 ConfigVariableInt64::get_default_value 0 1 362 48
/**
 * Returns the variable's default value.
 */
66
inline int64_t ConfigVariableInt64::get_default_value(void) const;

1682 8 get_word 0 4 2687 29 ConfigVariableInt64::get_word 0 1 363 44
/**
 * Returns the variable's nth value.
 */
66
inline int64_t ConfigVariableInt64::get_word(std::size_t n) const;

1683 8 set_word 0 4 2687 29 ConfigVariableInt64::set_word 0 1 364 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableInt64::set_word(std::size_t n, int64_t value);

1684 20 ~ConfigVariableInt64 0 4 2687 41 ConfigVariableInt64::~ConfigVariableInt64 0 0 0
48
ConfigVariableInt64::~ConfigVariableInt64(void);

1685 18 ConfigVariableList 0 4 2690 38 ConfigVariableList::ConfigVariableList 0 2 366 367 10
/**
 *
 */
214
inline ConfigVariableList::ConfigVariableList(std::string const &name, std::string const &description = string(), int flags = 0);
inline ConfigVariableList::ConfigVariableList(ConfigVariableList const &) = default;

1686 19 ~ConfigVariableList 0 4 2690 39 ConfigVariableList::~ConfigVariableList 0 0 10
/**
 *
 */
53
inline ConfigVariableList::~ConfigVariableList(void);

1687 14 get_num_values 0 4 2690 34 ConfigVariableList::get_num_values 0 1 368 56
/**
 * Returns the number of values in the variable.
 */
66
inline std::size_t ConfigVariableList::get_num_values(void) const;

1688 16 get_string_value 0 4 2690 36 ConfigVariableList::get_string_value 0 1 369 49
/**
 * Returns the nth value of the variable.
 */
77
inline std::string ConfigVariableList::get_string_value(std::size_t n) const;

1689 21 get_num_unique_values 0 4 2690 41 ConfigVariableList::get_num_unique_values 0 1 370 63
/**
 * Returns the number of unique values in the variable.
 */
73
inline std::size_t ConfigVariableList::get_num_unique_values(void) const;

1690 16 get_unique_value 0 4 2690 36 ConfigVariableList::get_unique_value 0 1 371 56
/**
 * Returns the nth unique value of the variable.
 */
77
inline std::string ConfigVariableList::get_unique_value(std::size_t n) const;

1691 4 size 0 4 2690 24 ConfigVariableList::size 0 1 372 63
/**
 * Returns the number of unique values of the variable.
 */
56
inline std::size_t ConfigVariableList::size(void) const;

1692 11 operator [] 0 4 2690 31 ConfigVariableList::operator [] 0 1 373 0
72
inline std::string ConfigVariableList::operator [](std::size_t n) const;

1693 6 output 0 4 2690 26 ConfigVariableList::output 0 1 374 0
52
void ConfigVariableList::output(ostream &out) const;

1694 5 write 0 4 2690 25 ConfigVariableList::write 0 1 375 0
51
void ConfigVariableList::write(ostream &out) const;

1695 13 make_variable 0 4 2691 36 ConfigVariableManager::make_variable 0 1 376 0
82
ConfigVariableCore *ConfigVariableManager::make_variable(std::string const &name);

1696 22 make_variable_template 0 4 2691 45 ConfigVariableManager::make_variable_template 0 1 377 0
215
ConfigVariableCore *ConfigVariableManager::make_variable_template(std::string const &pattern, ConfigFlags::ValueType type, std::string const &default_value, std::string const &description = string(), int flags = 0);

1697 17 get_num_variables 0 4 2691 40 ConfigVariableManager::get_num_variables 0 1 378 81
/**
 * Returns the current number of active ConfigVariableCores in the world.
 */
72
inline std::size_t ConfigVariableManager::get_num_variables(void) const;

1698 12 get_variable 0 4 2691 35 ConfigVariableManager::get_variable 0 1 379 66
/**
 * Returns the nth active ConfigVariableCore in the world.
 */
84
inline ConfigVariableCore *ConfigVariableManager::get_variable(std::size_t n) const;

1699 17 get_variable_name 0 4 2691 40 ConfigVariableManager::get_variable_name 0 1 380 0
74
std::string ConfigVariableManager::get_variable_name(std::size_t n) const;

1700 16 is_variable_used 0 4 2691 39 ConfigVariableManager::is_variable_used 0 1 381 0
66
bool ConfigVariableManager::is_variable_used(std::size_t n) const;

1701 6 output 0 4 2691 29 ConfigVariableManager::output 0 1 382 0
55
void ConfigVariableManager::output(ostream &out) const;

1702 5 write 0 4 2691 28 ConfigVariableManager::write 0 1 383 0
54
void ConfigVariableManager::write(ostream &out) const;

1703 19 write_prc_variables 0 4 2691 42 ConfigVariableManager::write_prc_variables 0 1 384 0
68
void ConfigVariableManager::write_prc_variables(ostream &out) const;

1704 21 list_unused_variables 0 4 2691 44 ConfigVariableManager::list_unused_variables 0 1 385 0
62
void ConfigVariableManager::list_unused_variables(void) const;

1705 14 list_variables 0 4 2691 37 ConfigVariableManager::list_variables 0 1 386 0
55
void ConfigVariableManager::list_variables(void) const;

1706 22 list_dynamic_variables 0 4 2691 45 ConfigVariableManager::list_dynamic_variables 0 1 387 0
63
void ConfigVariableManager::list_dynamic_variables(void) const;

1707 14 get_global_ptr 0 4 2691 37 ConfigVariableManager::get_global_ptr 0 1 388 0
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

1708 24 ConfigVariableSearchPath 0 4 2692 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 4 389 390 391 392 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
574
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &description = string(), int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, DSearchPath const &default_value, std::string const &description, int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &default_value, std::string const &description, int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(ConfigVariableSearchPath const &) = default;

1709 25 ~ConfigVariableSearchPath 0 4 2692 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 10
/**
 *
 */
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

1710 17 operator typecast 0 132 2692 43 ConfigVariableSearchPath::operator typecast 0 1 410 0
82
inline DSearchPath const &ConfigVariableSearchPath::operator typecast(void) const;

1711 9 get_value 0 4 2692 35 ConfigVariableSearchPath::get_value 0 1 393 10
/**
 *
 */
74
inline DSearchPath const &ConfigVariableSearchPath::get_value(void) const;

1712 17 get_default_value 0 4 2692 43 ConfigVariableSearchPath::get_default_value 0 1 394 10
/**
 *
 */
82
inline DSearchPath const &ConfigVariableSearchPath::get_default_value(void) const;

1713 7 Results 0 4 2695 29 DSearchPath::Results::Results 0 2 431 432 0
101
DSearchPath::Results::Results(void);
DSearchPath::Results::Results(DSearchPath::Results const &copy);

1714 10 operator = 0 4 2695 32 DSearchPath::Results::operator = 0 1 433 0
72
void DSearchPath::Results::operator =(DSearchPath::Results const &copy);

1715 8 ~Results 0 4 2695 30 DSearchPath::Results::~Results 0 0 0
37
DSearchPath::Results::~Results(void);

1716 5 clear 0 4 2695 27 DSearchPath::Results::clear 0 1 434 0
39
void DSearchPath::Results::clear(void);

1717 13 get_num_files 0 4 2695 35 DSearchPath::Results::get_num_files 0 1 435 0
60
std::size_t DSearchPath::Results::get_num_files(void) const;

1718 8 get_file 0 4 2695 30 DSearchPath::Results::get_file 0 1 436 0
68
Filename const &DSearchPath::Results::get_file(std::size_t n) const;

1719 11 operator [] 0 4 2695 33 DSearchPath::Results::operator [] 0 1 437 0
71
inline Filename DSearchPath::Results::operator [](std::size_t n) const;

1720 4 size 0 4 2695 26 DSearchPath::Results::size 0 1 438 136
/**
 * Returns the num of filenames in the set.  This method is defined to make
 * the Results object appear to be a list in Python.
 */
58
inline std::size_t DSearchPath::Results::size(void) const;

1721 6 output 0 4 2695 28 DSearchPath::Results::output 0 1 439 0
54
void DSearchPath::Results::output(ostream &out) const;

1722 5 write 0 4 2695 27 DSearchPath::Results::write 0 1 440 0
75
void DSearchPath::Results::write(ostream &out, int indent_level = 0) const;

1723 11 DSearchPath 0 4 2694 24 DSearchPath::DSearchPath 0 4 411 412 413 414 0
227
DSearchPath::DSearchPath(void);
DSearchPath::DSearchPath(std::string const &path, std::string const &separator = string());
DSearchPath::DSearchPath(Filename const &directory);
DSearchPath::DSearchPath(DSearchPath const &copy);

1724 10 operator = 0 4 2694 23 DSearchPath::operator = 0 1 415 0
54
void DSearchPath::operator =(DSearchPath const &copy);

1725 12 ~DSearchPath 0 4 2694 25 DSearchPath::~DSearchPath 0 0 0
32
DSearchPath::~DSearchPath(void);

1726 5 clear 0 4 2694 18 DSearchPath::clear 0 1 416 0
30
void DSearchPath::clear(void);

1727 16 append_directory 0 4 2694 29 DSearchPath::append_directory 0 1 417 0
62
void DSearchPath::append_directory(Filename const &directory);

1728 17 prepend_directory 0 4 2694 30 DSearchPath::prepend_directory 0 1 418 0
63
void DSearchPath::prepend_directory(Filename const &directory);

1729 11 append_path 0 4 2694 24 DSearchPath::append_path 0 2 419 420 0
152
void DSearchPath::append_path(std::string const &path, std::string const &separator = string());
void DSearchPath::append_path(DSearchPath const &path);

1730 12 prepend_path 0 4 2694 25 DSearchPath::prepend_path 0 1 421 0
56
void DSearchPath::prepend_path(DSearchPath const &path);

1731 8 is_empty 0 4 2694 21 DSearchPath::is_empty 0 1 422 0
39
bool DSearchPath::is_empty(void) const;

1732 19 get_num_directories 0 4 2694 32 DSearchPath::get_num_directories 0 1 423 0
57
std::size_t DSearchPath::get_num_directories(void) const;

1733 13 get_directory 0 4 2694 26 DSearchPath::get_directory 0 1 424 0
64
Filename const &DSearchPath::get_directory(std::size_t n) const;

1734 9 find_file 0 4 2694 22 DSearchPath::find_file 0 1 425 0
64
Filename DSearchPath::find_file(Filename const &filename) const;

1735 14 find_all_files 0 4 2694 27 DSearchPath::find_all_files 0 2 426 427 184
/**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */
192
std::size_t DSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results DSearchPath::find_all_files(Filename const &filename) const;

1736 11 search_path 0 4 2694 24 DSearchPath::search_path 0 1 428 251
/**
 * A quick-and-easy way to search a searchpath for a file when you don't feel
 * like building or keeping around a DSearchPath object.  This simply
 * constructs a temporary DSearchPath based on the indicated path string, and
 * searches that.
 */
140
static inline Filename DSearchPath::search_path(Filename const &filename, std::string const &path, std::string const &separator = string());

1737 6 output 0 4 2694 19 DSearchPath::output 0 1 429 0
86
void DSearchPath::output(ostream &out, std::string const &separator = string()) const;

1738 5 write 0 4 2694 18 DSearchPath::write 0 1 430 0
66
void DSearchPath::write(ostream &out, int indent_level = 0) const;

1739 17 clear_local_value 0 4 2692 43 ConfigVariableSearchPath::clear_local_value 0 1 395 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

1740 5 clear 0 4 2692 31 ConfigVariableSearchPath::clear 0 1 396 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
50
inline void ConfigVariableSearchPath::clear(void);

1741 16 append_directory 0 4 2692 42 ConfigVariableSearchPath::append_directory 0 1 397 62
/**
 * Adds a new directory to the end of the search list.
 */
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

1742 17 prepend_directory 0 4 2692 43 ConfigVariableSearchPath::prepend_directory 0 1 398 64
/**
 * Adds a new directory to the front of the search list.
 */
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

1743 11 append_path 0 4 2692 37 ConfigVariableSearchPath::append_path 0 2 399 400 198
/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */

/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */
192
inline void ConfigVariableSearchPath::append_path(std::string const &path, std::string const &separator = string());
inline void ConfigVariableSearchPath::append_path(DSearchPath const &path);

1744 12 prepend_path 0 4 2692 38 ConfigVariableSearchPath::prepend_path 0 1 401 104
/**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

1745 8 is_empty 0 4 2692 34 ConfigVariableSearchPath::is_empty 0 1 402 69
/**
 * Returns true if the search list is empty, false otherwise.
 */
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

1746 19 get_num_directories 0 4 2692 45 ConfigVariableSearchPath::get_num_directories 0 1 403 64
/**
 * Returns the number of directories on the search list.
 */
77
inline std::size_t ConfigVariableSearchPath::get_num_directories(void) const;

1747 13 get_directory 0 4 2692 39 ConfigVariableSearchPath::get_directory 0 1 404 56
/**
 * Returns the nth directory on the search list.
 */
84
inline Filename const &ConfigVariableSearchPath::get_directory(std::size_t n) const;

1748 9 find_file 0 4 2692 35 ConfigVariableSearchPath::find_file 0 1 405 197
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

1749 14 find_all_files 0 4 2692 40 ConfigVariableSearchPath::find_all_files 0 2 406 407 549
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */

/**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */
225
inline std::size_t ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results ConfigVariableSearchPath::find_all_files(Filename const &filename) const;

1750 6 output 0 4 2692 32 ConfigVariableSearchPath::output 0 1 408 10
/**
 *
 */
65
inline void ConfigVariableSearchPath::output(ostream &out) const;

1751 5 write 0 4 2692 31 ConfigVariableSearchPath::write 0 1 409 10
/**
 *
 */
64
inline void ConfigVariableSearchPath::write(ostream &out) const;

1752 20 ConfigVariableString 0 4 2697 42 ConfigVariableString::ConfigVariableString 0 3 441 442 443 22
/**
 *
 */

/**
 *
 */
334
inline ConfigVariableString::ConfigVariableString(std::string const &name);
inline ConfigVariableString::ConfigVariableString(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableString::ConfigVariableString(ConfigVariableString const &) = default;

1753 10 operator = 0 4 2697 32 ConfigVariableString::operator = 0 1 444 0
71
inline void ConfigVariableString::operator =(std::string const &value);

1754 17 operator typecast 0 132 2697 39 ConfigVariableString::operator typecast 0 1 457 0
78
inline std::string const &ConfigVariableString::operator typecast(void) const;

1755 5 c_str 0 4 2697 27 ConfigVariableString::c_str 0 1 445 88
// These methods help the ConfigVariableString act like a C++ string object.

/**
 *
 */
59
inline char const *ConfigVariableString::c_str(void) const;

1756 5 empty 0 4 2697 27 ConfigVariableString::empty 0 1 446 10
/**
 *
 */
52
inline bool ConfigVariableString::empty(void) const;

1757 6 length 0 4 2697 28 ConfigVariableString::length 0 1 447 10
/**
 *
 */
60
inline std::size_t ConfigVariableString::length(void) const;

1758 11 operator [] 0 4 2697 33 ConfigVariableString::operator [] 0 1 448 0
67
inline char ConfigVariableString::operator [](std::size_t n) const;

1759 11 operator == 0 4 2697 33 ConfigVariableString::operator == 0 1 449 34
// Comparison operators are handy.
78
inline bool ConfigVariableString::operator ==(std::string const &other) const;

1760 11 operator != 0 4 2697 33 ConfigVariableString::operator != 0 1 450 0
78
inline bool ConfigVariableString::operator !=(std::string const &other) const;

1761 10 operator < 0 4 2697 32 ConfigVariableString::operator < 0 1 451 0
77
inline bool ConfigVariableString::operator <(std::string const &other) const;

1762 9 set_value 0 4 2697 31 ConfigVariableString::set_value 0 1 452 48
/**
 * Reassigns the variable's local value.
 */
70
inline void ConfigVariableString::set_value(std::string const &value);

1763 9 get_value 0 4 2697 31 ConfigVariableString::get_value 0 1 453 40
/**
 * Returns the variable's value.
 */
70
inline std::string const &ConfigVariableString::get_value(void) const;

1764 17 get_default_value 0 4 2697 39 ConfigVariableString::get_default_value 0 1 454 48
/**
 * Returns the variable's default value.
 */
71
inline std::string ConfigVariableString::get_default_value(void) const;

1765 8 get_word 0 4 2697 30 ConfigVariableString::get_word 0 1 455 44
/**
 * Returns the variable's nth value.
 */
71
inline std::string ConfigVariableString::get_word(std::size_t n) const;

1766 8 set_word 0 4 2697 30 ConfigVariableString::set_word 0 1 456 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
84
inline void ConfigVariableString::set_word(std::size_t n, std::string const &value);

1767 21 ~ConfigVariableString 0 4 2697 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

1768 7 GetBool 0 4 2698 16 DConfig::GetBool 0 1 460 0
78
static inline bool DConfig::GetBool(std::string const &sym, bool def = false);

1769 6 GetInt 0 4 2698 15 DConfig::GetInt 0 1 461 0
71
static inline int DConfig::GetInt(std::string const &sym, int def = 0);

1770 8 GetFloat 0 4 2698 17 DConfig::GetFloat 0 1 462 0
79
static inline float DConfig::GetFloat(std::string const &sym, float def = 0.0);

1771 9 GetDouble 0 4 2698 18 DConfig::GetDouble 0 1 463 0
82
static inline double DConfig::GetDouble(std::string const &sym, double def = 0.0);

1772 9 GetString 0 4 2698 18 DConfig::GetString 0 1 464 0
98
static inline std::string DConfig::GetString(std::string const &sym, std::string const &def = "");

1773 7 DConfig 0 4 2698 16 DConfig::DConfig 0 2 458 459 0
92
inline DConfig::DConfig(void) = default;
inline DConfig::DConfig(DConfig const &) = default;

1774 8 ~DConfig 0 4 2698 17 DConfig::~DConfig 0 0 0
24
DConfig::~DConfig(void);

1775 24 has_environment_variable 0 4 2699 46 ExecutionEnvironment::has_environment_variable 0 1 466 73
/**
 * Returns true if the indicated environment variable is defined.
 */
90
static inline bool ExecutionEnvironment::has_environment_variable(std::string const &var);

1776 24 get_environment_variable 0 4 2699 46 ExecutionEnvironment::get_environment_variable 0 1 467 125
/**
 * Returns the definition of the indicated environment variable, or the empty
 * string if the variable is undefined.
 */
97
static inline std::string ExecutionEnvironment::get_environment_variable(std::string const &var);

1777 24 set_environment_variable 0 4 2699 46 ExecutionEnvironment::set_environment_variable 0 1 468 72
/**
 * Changes the definition of the indicated environment variable.
 */
116
static inline void ExecutionEnvironment::set_environment_variable(std::string const &var, std::string const &value);

1778 27 shadow_environment_variable 0 4 2699 49 ExecutionEnvironment::shadow_environment_variable 0 1 469 269
/**
 * Changes the apparent definition of the indicated environment variable by
 * masking it within this class with a new value.  This does not change the
 * actual environment variable, but future calls to get_environment_variable()
 * will return this new value.
 */
119
static inline void ExecutionEnvironment::shadow_environment_variable(std::string const &var, std::string const &value);

1779 12 clear_shadow 0 4 2699 34 ExecutionEnvironment::clear_shadow 0 1 470 140
/**
 * Removes a value set by a previous call to shadow_environment_variable(),
 * and lets the actual value of the variable show again.
 */
78
static inline void ExecutionEnvironment::clear_shadow(std::string const &var);

1780 13 expand_string 0 4 2699 35 ExecutionEnvironment::expand_string 0 1 471 0
79
static std::string ExecutionEnvironment::expand_string(std::string const &str);

1781 12 get_num_args 0 4 2699 34 ExecutionEnvironment::get_num_args 0 1 472 106
/**
 * Returns the number of command-line arguments available, not counting arg 0,
 * the binary name.
 */
67
static inline std::size_t ExecutionEnvironment::get_num_args(void);

1782 7 get_arg 0 4 2699 29 ExecutionEnvironment::get_arg 0 1 473 194
/**
 * Returns the nth command-line argument.  The index n must be in the range [0
 * .. get_num_args()).  The first parameter, n == 0, is the first actual
 * parameter, not the binary name.
 */
71
static inline std::string ExecutionEnvironment::get_arg(std::size_t n);

1783 15 get_binary_name 0 4 2699 37 ExecutionEnvironment::get_binary_name 0 1 474 107
/**
 * Returns the name of the binary executable that started this program, if it
 * can be determined.
 */
70
static inline std::string ExecutionEnvironment::get_binary_name(void);

1784 14 get_dtool_name 0 4 2699 36 ExecutionEnvironment::get_dtool_name 0 1 475 105
/**
 * Returns the name of the libdtool DLL that is used in this program, if it
 * can be determined.
 */
69
static inline std::string ExecutionEnvironment::get_dtool_name(void);

1785 15 set_binary_name 0 4 2699 37 ExecutionEnvironment::set_binary_name 0 1 476 22
/**
 * Do not use.
 */
82
static inline void ExecutionEnvironment::set_binary_name(std::string const &name);

1786 14 set_dtool_name 0 4 2699 36 ExecutionEnvironment::set_dtool_name 0 1 477 22
/**
 * Do not use.
 */
81
static inline void ExecutionEnvironment::set_dtool_name(std::string const &name);

1787 7 get_cwd 0 4 2699 29 ExecutionEnvironment::get_cwd 0 1 478 0
52
static Filename ExecutionEnvironment::get_cwd(void);

1788 20 ExecutionEnvironment 0 4 2699 42 ExecutionEnvironment::ExecutionEnvironment 0 1 465 0
90
inline ExecutionEnvironment::ExecutionEnvironment(ExecutionEnvironment const &) = default;

1789 21 ~ExecutionEnvironment 0 4 2699 43 ExecutionEnvironment::~ExecutionEnvironment 0 0 0
50
ExecutionEnvironment::~ExecutionEnvironment(void);

1790 9 ~ios_base 0 4 2704 19 ios_base::~ios_base 0 0 0
26
ios_base::~ios_base(void);

1791 4 good 0 4 2703 9 ios::good 0 1 499 0
27
bool ios::good(void) const;

1792 3 eof 0 4 2703 8 ios::eof 0 1 500 0
26
bool ios::eof(void) const;

1793 4 fail 0 4 2703 9 ios::fail 0 1 501 0
27
bool ios::fail(void) const;

1794 3 bad 0 4 2703 8 ios::bad 0 1 502 0
26
bool ios::bad(void) const;

1795 5 clear 0 4 2703 10 ios::clear 0 1 503 0
22
void ios::clear(void);

1796 4 ~ios 0 4 2703 9 ios::~ios 0 0 0
16
ios::~ios(void);

1797 13 upcast_to_ios 0 12 2702 22 istream::upcast_to_ios 0 1 490 26
upcast from istream to ios
34
ios *istream::upcast_to_ios(void);

1798 3 get 0 4 2702 12 istream::get 0 1 486 0
23
int istream::get(void);

1799 5 tellg 0 4 2702 14 istream::tellg 0 1 487 0
31
streamoff istream::tellg(void);

1800 5 seekg 0 4 2702 14 istream::seekg 0 2 488 489 0
94
void istream::seekg(streamoff pos);
void istream::seekg(streamoff off, ios_base::seekdir dir);

1801 8 ~istream 0 4 2702 17 istream::~istream 0 0 0
24
istream::~istream(void);

1802 17 upcast_to_istream 0 12 2701 27 iostream::upcast_to_istream 0 1 484 31
upcast from iostream to istream
43
istream *iostream::upcast_to_istream(void);

1803 20 downcast_to_iostream 0 12 2702 29 istream::downcast_to_iostream 0 1 485 33
downcast from istream to iostream
46
iostream *istream::downcast_to_iostream(void);

1804 13 upcast_to_ios 0 12 2707 22 ostream::upcast_to_ios 0 1 498 26
upcast from ostream to ios
34
ios *ostream::upcast_to_ios(void);

1805 3 put 0 4 2707 12 ostream::put 0 1 493 0
26
void ostream::put(char c);

1806 5 flush 0 4 2707 14 ostream::flush 0 1 494 0
26
void ostream::flush(void);

1807 5 tellp 0 4 2707 14 ostream::tellp 0 1 495 0
31
streamoff ostream::tellp(void);

1808 5 seekp 0 4 2707 14 ostream::seekp 0 2 496 497 0
94
void ostream::seekp(streamoff pos);
void ostream::seekp(streamoff off, ios_base::seekdir dir);

1809 8 ~ostream 0 4 2707 17 ostream::~ostream 0 0 0
24
ostream::~ostream(void);

1810 17 upcast_to_ostream 0 12 2701 27 iostream::upcast_to_ostream 0 1 491 31
upcast from iostream to ostream
43
ostream *iostream::upcast_to_ostream(void);

1811 20 downcast_to_iostream 0 12 2707 29 ostream::downcast_to_iostream 0 1 492 33
downcast from ostream to iostream
46
iostream *ostream::downcast_to_iostream(void);

1812 5 flush 0 4 2701 15 iostream::flush 0 1 483 0
27
void iostream::flush(void);

1813 9 ~iostream 0 4 2701 19 iostream::~iostream 0 0 0
26
iostream::~iostream(void);

1814 10 FileStream 0 4 2700 22 FileStream::FileStream 0 2 479 480 22
/**
 *
 */

/**
 *
 */
131
inline FileStream::FileStream(void);
inline FileStream::FileStream(char const *filename, ios_base::openmode mode = ::ios_base::in);

1815 11 ~FileStream 0 4 2700 23 FileStream::~FileStream 0 0 10
/**
 *
 */
37
inline FileStream::~FileStream(void);

1816 4 open 0 4 2700 16 FileStream::open 0 1 481 10
/**
 *
 */
93
inline void FileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::in);

1817 5 close 0 4 2700 17 FileStream::close 0 1 482 10
/**
 *
 */
36
inline void FileStream::close(void);

1818 11 GlobPattern 0 4 2708 24 GlobPattern::GlobPattern 0 2 504 505 22
/**
 *
 */

/**
 *
 */
129
inline GlobPattern::GlobPattern(std::string const &pattern = string());
inline GlobPattern::GlobPattern(GlobPattern const &copy);

1819 10 operator = 0 4 2708 23 GlobPattern::operator = 0 1 506 0
61
inline void GlobPattern::operator =(GlobPattern const &copy);

1820 11 operator == 0 4 2708 24 GlobPattern::operator == 0 1 507 0
69
inline bool GlobPattern::operator ==(GlobPattern const &other) const;

1821 11 operator != 0 4 2708 24 GlobPattern::operator != 0 1 508 0
69
inline bool GlobPattern::operator !=(GlobPattern const &other) const;

1822 10 operator < 0 4 2708 23 GlobPattern::operator < 0 1 509 0
68
inline bool GlobPattern::operator <(GlobPattern const &other) const;

1823 11 set_pattern 0 4 2708 24 GlobPattern::set_pattern 0 1 510 74
/**
 * Changes the pattern string that the GlobPattern object matches.
 */
65
inline void GlobPattern::set_pattern(std::string const &pattern);

1824 11 get_pattern 0 4 2708 24 GlobPattern::get_pattern 0 1 511 74
/**
 * Returns the pattern string that the GlobPattern object matches.
 */
63
inline std::string const &GlobPattern::get_pattern(void) const;

1825 18 set_case_sensitive 0 4 2708 31 GlobPattern::set_case_sensitive 0 1 512 122
/**
 * Sets whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */
65
inline void GlobPattern::set_case_sensitive(bool case_sensitive);

1826 18 get_case_sensitive 0 4 2708 31 GlobPattern::get_case_sensitive 0 1 513 125
/**
 * Returns whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */
56
inline bool GlobPattern::get_case_sensitive(void) const;

1827 17 set_nomatch_chars 0 4 2708 30 GlobPattern::set_nomatch_chars 0 1 514 72
/**
 * Specifies a set of characters that are not matched by * or ?.
 */
77
inline void GlobPattern::set_nomatch_chars(std::string const &nomatch_chars);

1828 17 get_nomatch_chars 0 4 2708 30 GlobPattern::get_nomatch_chars 0 1 515 72
/**
 * Returns the set of characters that are not matched by * or ?.
 */
69
inline std::string const &GlobPattern::get_nomatch_chars(void) const;

1829 7 matches 0 4 2708 20 GlobPattern::matches 0 1 516 85
/**
 * Returns true if the candidate string matches the pattern, false otherwise.
 */
69
inline bool GlobPattern::matches(std::string const &candidate) const;

1830 6 output 0 4 2708 19 GlobPattern::output 0 1 517 10
/**
 *
 */
52
inline void GlobPattern::output(ostream &out) const;

1831 19 has_glob_characters 0 4 2708 32 GlobPattern::has_glob_characters 0 1 518 0
50
bool GlobPattern::has_glob_characters(void) const;

1832 16 get_const_prefix 0 4 2708 29 GlobPattern::get_const_prefix 0 1 519 0
54
std::string GlobPattern::get_const_prefix(void) const;

1833 11 match_files 0 4 2708 24 GlobPattern::match_files 0 2 520 521 0
169
int GlobPattern::match_files(vector_string &results, Filename const &cwd = Filename()) const;
PyObject *GlobPattern::match_files(Filename const &cwd = Filename()) const;

1834 12 ~GlobPattern 0 4 2708 25 GlobPattern::~GlobPattern 0 0 0
32
GlobPattern::~GlobPattern(void);

1835 14 IDecryptStream 0 4 2709 30 IDecryptStream::IDecryptStream 0 2 522 523 22
/**
 *
 */

/**
 *
 */
147
inline IDecryptStream::IDecryptStream(void);
inline IDecryptStream::IDecryptStream(istream *source, bool owns_source, std::string const &password);

1836 4 open 0 4 2709 20 IDecryptStream::open 0 1 524 10
/**
 *
 */
108
inline IDecryptStream &IDecryptStream::open(istream *source, bool owns_source, std::string const &password);

1837 5 close 0 4 2709 21 IDecryptStream::close 0 1 525 124
/**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */
51
inline IDecryptStream &IDecryptStream::close(void);

1838 13 get_algorithm 0 4 2709 29 IDecryptStream::get_algorithm 0 1 526 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &IDecryptStream::get_algorithm(void) const;

1839 14 get_key_length 0 4 2709 30 IDecryptStream::get_key_length 0 1 527 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int IDecryptStream::get_key_length(void) const;

1840 19 get_iteration_count 0 4 2709 35 IDecryptStream::get_iteration_count 0 1 528 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int IDecryptStream::get_iteration_count(void) const;

1841 15 ~IDecryptStream 0 4 2709 31 IDecryptStream::~IDecryptStream 0 0 0
38
IDecryptStream::~IDecryptStream(void);

1842 11 IFileStream 0 4 2710 24 IFileStream::IFileStream 0 2 529 530 22
/**
 *
 */

/**
 *
 */
135
inline IFileStream::IFileStream(void);
inline IFileStream::IFileStream(char const *filename, ios_base::openmode mode = ::ios_base::in);

1843 12 ~IFileStream 0 4 2710 25 IFileStream::~IFileStream 0 0 10
/**
 *
 */
39
inline IFileStream::~IFileStream(void);

1844 4 open 0 4 2710 17 IFileStream::open 0 1 531 10
/**
 *
 */
94
inline void IFileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::in);

1845 5 close 0 4 2710 18 IFileStream::close 0 1 532 10
/**
 *
 */
37
inline void IFileStream::close(void);

1846 7 acquire 0 4 2712 26 StreamWrapperBase::acquire 0 1 536 572
/**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */
45
inline void StreamWrapperBase::acquire(void);

1847 7 release 0 4 2712 26 StreamWrapperBase::release 0 1 537 135
/**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */
45
inline void StreamWrapperBase::release(void);

1848 18 ~StreamWrapperBase 0 4 2712 37 StreamWrapperBase::~StreamWrapperBase 0 0 0
44
StreamWrapperBase::~StreamWrapperBase(void);

1849 27 upcast_to_StreamWrapperBase 0 12 2711 43 IStreamWrapper::upcast_to_StreamWrapperBase 0 1 535 47
upcast from IStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *IStreamWrapper::upcast_to_StreamWrapperBase(void);

1850 14 IStreamWrapper 0 4 2711 30 IStreamWrapper::IStreamWrapper 0 1 533 22
/**
 *
 */

/**
 *
 */
55
inline IStreamWrapper::IStreamWrapper(istream &stream);

1851 15 ~IStreamWrapper 0 4 2711 31 IStreamWrapper::~IStreamWrapper 0 0 0
38
IStreamWrapper::~IStreamWrapper(void);

1852 11 get_istream 0 4 2711 27 IStreamWrapper::get_istream 0 1 534 55
/**
 * Returns the istream this object is wrapping.
 */
56
inline istream *IStreamWrapper::get_istream(void) const;

1853 10 LineStream 0 4 2714 22 LineStream::LineStream 0 1 538 10
/**
 *
 */
36
inline LineStream::LineStream(void);

1854 17 is_text_available 0 4 2714 29 LineStream::is_text_available 0 1 539 198
/**
 * Returns true if there is at least one line of text (or even a partial line)
 * available in the LineStream object.  If this returns true, the line may
 * then be retrieved via get_line().
 */
54
inline bool LineStream::is_text_available(void) const;

1855 8 get_line 0 4 2714 20 LineStream::get_line 0 1 540 275
/**
 * Extracts and returns the next line (or partial line) of text available in
 * the LineStream object.  Once the line has been extracted, you may call
 * has_newline() to determine whether or not there was an explicit newline
 * character written following this line.
 */
46
inline std::string LineStream::get_line(void);

1856 11 has_newline 0 4 2714 23 LineStream::has_newline 0 1 541 206
/**
 * Returns true if the line of text most recently returned by get_line() was
 * written out with a terminating newline, or false if a newline character has
 * not yet been written to the LineStream.
 */
48
inline bool LineStream::has_newline(void) const;

1857 11 ~LineStream 0 4 2714 23 LineStream::~LineStream 0 0 0
30
LineStream::~LineStream(void);

1858 15 get_total_alloc 0 4 2715 32 NeverFreeMemory::get_total_alloc 0 1 542 110
/**
 * Returns the total number of bytes consumed by all the pages allocated
 * internally by this object.
 */
65
static inline std::size_t NeverFreeMemory::get_total_alloc(void);

1859 14 get_total_used 0 4 2715 31 NeverFreeMemory::get_total_used 0 1 543 114
/**
 * Returns the total number of bytes requested by the application in calls to
 * NeverFreeMemory::alloc().
 */
64
static inline std::size_t NeverFreeMemory::get_total_used(void);

1860 16 get_total_unused 0 4 2715 33 NeverFreeMemory::get_total_unused 0 1 544 178
/**
 * Returns the difference between get_total_alloc() and get_total_used().
 * This represents bytes in allocated pages that have not (yet) been used by
 * the application.
 */
66
static inline std::size_t NeverFreeMemory::get_total_unused(void);

1861 16 ~NeverFreeMemory 0 4 2715 33 NeverFreeMemory::~NeverFreeMemory 0 0 0
40
NeverFreeMemory::~NeverFreeMemory(void);

1862 6 Notify 0 4 2716 14 Notify::Notify 0 2 545 546 0
70
Notify::Notify(void);
inline Notify::Notify(Notify const &) = default;

1863 7 ~Notify 0 4 2716 15 Notify::~Notify 0 0 0
22
Notify::~Notify(void);

1864 15 set_ostream_ptr 0 4 2716 23 Notify::set_ostream_ptr 0 1 547 0
70
void Notify::set_ostream_ptr(ostream *ostream_ptr, bool delete_later);

1865 15 get_ostream_ptr 0 4 2716 23 Notify::get_ostream_ptr 0 1 548 0
45
ostream *Notify::get_ostream_ptr(void) const;

1866 18 set_assert_handler 0 4 2716 26 Notify::set_assert_handler 0 0 0
71
void Notify::set_assert_handler(Notify::AssertHandler *assert_handler);

1867 20 clear_assert_handler 0 4 2716 28 Notify::clear_assert_handler 0 1 549 0
40
void Notify::clear_assert_handler(void);

1868 18 has_assert_handler 0 4 2716 26 Notify::has_assert_handler 0 1 550 0
44
bool Notify::has_assert_handler(void) const;

1869 18 get_assert_handler 0 4 2716 26 Notify::get_assert_handler 0 1 551 0
62
Notify::AssertHandler *Notify::get_assert_handler(void) const;

1870 17 has_assert_failed 0 4 2716 25 Notify::has_assert_failed 0 1 552 637
/**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */
50
inline bool Notify::has_assert_failed(void) const;

1871 24 get_assert_error_message 0 4 2716 32 Notify::get_assert_error_message 0 1 553 100
/**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */
71
inline std::string const &Notify::get_assert_error_message(void) const;

1872 19 clear_assert_failed 0 4 2716 27 Notify::clear_assert_failed 0 1 554 114
/**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */
46
inline void Notify::clear_assert_failed(void);

1873 16 get_top_category 0 4 2716 24 Notify::get_top_category 0 1 555 0
47
NotifyCategory *Notify::get_top_category(void);

1874 12 get_category 0 4 2716 20 Notify::get_category 0 3 556 557 558 0
269
NotifyCategory *Notify::get_category(std::string const &basename, NotifyCategory *parent_category);
NotifyCategory *Notify::get_category(std::string const &basename, std::string const &parent_fullname);
NotifyCategory *Notify::get_category(std::string const &fullname);

1875 3 out 0 4 2716 11 Notify::out 0 1 559 0
34
static ostream &Notify::out(void);

1876 4 null 0 4 2716 12 Notify::null 0 1 560 0
35
static ostream &Notify::null(void);

1877 12 write_string 0 4 2716 20 Notify::write_string 0 1 561 0
57
static void Notify::write_string(std::string const &str);

1878 3 ptr 0 4 2716 11 Notify::ptr 0 1 562 0
33
static Notify *Notify::ptr(void);

1879 20 upcast_to_MemoryBase 0 12 2717 36 NotifyCategory::upcast_to_MemoryBase 0 1 585 40
upcast from NotifyCategory to MemoryBase
55
MemoryBase *NotifyCategory::upcast_to_MemoryBase(void);

1880 26 downcast_to_NotifyCategory 0 12 2648 38 MemoryBase::downcast_to_NotifyCategory 0 1 586 42
downcast from MemoryBase to NotifyCategory
61
NotifyCategory *MemoryBase::downcast_to_NotifyCategory(void);

1881 21 upcast_to_ConfigFlags 0 12 2717 37 NotifyCategory::upcast_to_ConfigFlags 0 1 587 41
upcast from NotifyCategory to ConfigFlags
57
ConfigFlags *NotifyCategory::upcast_to_ConfigFlags(void);

1882 26 downcast_to_NotifyCategory 0 12 2662 39 ConfigFlags::downcast_to_NotifyCategory 0 1 588 43
downcast from ConfigFlags to NotifyCategory
62
NotifyCategory *ConfigFlags::downcast_to_NotifyCategory(void);

1883 12 get_fullname 0 4 2717 28 NotifyCategory::get_fullname 0 1 564 10
/**
 *
 */
60
inline std::string NotifyCategory::get_fullname(void) const;

1884 12 get_basename 0 4 2717 28 NotifyCategory::get_basename 0 1 565 10
/**
 *
 */
60
inline std::string NotifyCategory::get_basename(void) const;

1885 12 get_severity 0 4 2717 28 NotifyCategory::get_severity 0 1 566 10
/**
 *
 */
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

1886 12 set_severity 0 4 2717 28 NotifyCategory::set_severity 0 1 567 150
/**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

1887 5 is_on 0 4 2717 21 NotifyCategory::is_on 0 1 568 110
/**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

1888 7 is_spam 0 4 2717 23 NotifyCategory::is_spam 0 1 569 51
/**
 * A shorthand way to write is_on(NS_spam).
 */
48
inline bool NotifyCategory::is_spam(void) const;

1889 8 is_debug 0 4 2717 24 NotifyCategory::is_debug 0 1 570 52
/**
 * A shorthand way to write is_on(NS_debug).
 */
49
inline bool NotifyCategory::is_debug(void) const;

1890 7 is_info 0 4 2717 23 NotifyCategory::is_info 0 1 571 51
/**
 * A shorthand way to write is_on(NS_info).
 */
48
inline bool NotifyCategory::is_info(void) const;

1891 10 is_warning 0 4 2717 26 NotifyCategory::is_warning 0 1 572 54
/**
 * A shorthand way to write is_on(NS_warning).
 */
51
inline bool NotifyCategory::is_warning(void) const;

1892 8 is_error 0 4 2717 24 NotifyCategory::is_error 0 1 573 52
/**
 * A shorthand way to write is_on(NS_error).
 */
49
inline bool NotifyCategory::is_error(void) const;

1893 8 is_fatal 0 4 2717 24 NotifyCategory::is_fatal 0 1 574 52
/**
 * A shorthand way to write is_on(NS_fatal).
 */
49
inline bool NotifyCategory::is_fatal(void) const;

1894 3 out 0 4 2717 19 NotifyCategory::out 0 1 575 0
80
ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = true) const;

1895 4 spam 0 4 2717 20 NotifyCategory::spam 0 1 576 49
/**
 * A shorthand way to write out(NS_spam).
 */
63
inline ostream &NotifyCategory::spam(bool prefix = true) const;

1896 5 debug 0 4 2717 21 NotifyCategory::debug 0 1 577 50
/**
 * A shorthand way to write out(NS_debug).
 */
64
inline ostream &NotifyCategory::debug(bool prefix = true) const;

1897 4 info 0 4 2717 20 NotifyCategory::info 0 1 578 49
/**
 * A shorthand way to write out(NS_info).
 */
63
inline ostream &NotifyCategory::info(bool prefix = true) const;

1898 7 warning 0 4 2717 23 NotifyCategory::warning 0 1 579 52
/**
 * A shorthand way to write out(NS_warning).
 */
66
inline ostream &NotifyCategory::warning(bool prefix = true) const;

1899 5 error 0 4 2717 21 NotifyCategory::error 0 1 580 50
/**
 * A shorthand way to write out(NS_error).
 */
64
inline ostream &NotifyCategory::error(bool prefix = true) const;

1900 5 fatal 0 4 2717 21 NotifyCategory::fatal 0 1 581 50
/**
 * A shorthand way to write out(NS_fatal).
 */
64
inline ostream &NotifyCategory::fatal(bool prefix = true) const;

1901 16 get_num_children 0 4 2717 32 NotifyCategory::get_num_children 0 1 582 0
57
std::size_t NotifyCategory::get_num_children(void) const;

1902 9 get_child 0 4 2717 25 NotifyCategory::get_child 0 1 583 0
63
NotifyCategory *NotifyCategory::get_child(std::size_t i) const;

1903 16 set_server_delta 0 4 2717 32 NotifyCategory::set_server_delta 0 1 584 0
61
static void NotifyCategory::set_server_delta(long int delta);

1904 14 NotifyCategory 0 4 2717 30 NotifyCategory::NotifyCategory 0 1 563 0
72
inline NotifyCategory::NotifyCategory(NotifyCategory const &) = default;

1905 15 ~NotifyCategory 0 4 2717 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

1906 14 OEncryptStream 0 4 2720 30 OEncryptStream::OEncryptStream 0 2 589 590 22
/**
 *
 */

/**
 *
 */
143
inline OEncryptStream::OEncryptStream(void);
inline OEncryptStream::OEncryptStream(ostream *dest, bool owns_dest, std::string const &password);

1907 4 open 0 4 2720 20 OEncryptStream::open 0 1 591 10
/**
 *
 */
104
inline OEncryptStream &OEncryptStream::open(ostream *dest, bool owns_dest, std::string const &password);

1908 5 close 0 4 2720 21 OEncryptStream::close 0 1 592 120
/**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */
51
inline OEncryptStream &OEncryptStream::close(void);

1909 13 set_algorithm 0 4 2720 29 OEncryptStream::set_algorithm 0 1 593 383
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */
72
inline void OEncryptStream::set_algorithm(std::string const &algorithm);

1910 14 set_key_length 0 4 2720 30 OEncryptStream::set_key_length 0 1 594 347
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */
59
inline void OEncryptStream::set_key_length(int key_length);

1911 19 set_iteration_count 0 4 2720 35 OEncryptStream::set_iteration_count 0 1 595 495
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */
69
inline void OEncryptStream::set_iteration_count(int iteration_count);

1912 13 get_algorithm 0 4 2720 29 OEncryptStream::get_algorithm 0 1 596 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &OEncryptStream::get_algorithm(void) const;

1913 14 get_key_length 0 4 2720 30 OEncryptStream::get_key_length 0 1 597 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int OEncryptStream::get_key_length(void) const;

1914 19 get_iteration_count 0 4 2720 35 OEncryptStream::get_iteration_count 0 1 598 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int OEncryptStream::get_iteration_count(void) const;

1915 15 ~OEncryptStream 0 4 2720 31 OEncryptStream::~OEncryptStream 0 0 0
38
OEncryptStream::~OEncryptStream(void);

1916 11 OFileStream 0 4 2721 24 OFileStream::OFileStream 0 2 599 600 22
/**
 *
 */

/**
 *
 */
136
inline OFileStream::OFileStream(void);
inline OFileStream::OFileStream(char const *filename, ios_base::openmode mode = ::ios_base::out);

1917 12 ~OFileStream 0 4 2721 25 OFileStream::~OFileStream 0 0 10
/**
 *
 */
39
inline OFileStream::~OFileStream(void);

1918 4 open 0 4 2721 17 OFileStream::open 0 1 601 10
/**
 *
 */
95
inline void OFileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::out);

1919 5 close 0 4 2721 18 OFileStream::close 0 1 602 10
/**
 *
 */
37
inline void OFileStream::close(void);

1920 27 upcast_to_StreamWrapperBase 0 12 2722 43 OStreamWrapper::upcast_to_StreamWrapperBase 0 1 605 47
upcast from OStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *OStreamWrapper::upcast_to_StreamWrapperBase(void);

1921 14 OStreamWrapper 0 4 2722 30 OStreamWrapper::OStreamWrapper 0 1 603 22
/**
 *
 */

/**
 *
 */
55
inline OStreamWrapper::OStreamWrapper(ostream &stream);

1922 15 ~OStreamWrapper 0 4 2722 31 OStreamWrapper::~OStreamWrapper 0 0 0
38
OStreamWrapper::~OStreamWrapper(void);

1923 11 get_ostream 0 4 2722 27 OStreamWrapper::get_ostream 0 1 604 55
/**
 * Returns the ostream this object is wrapping.
 */
56
inline ostream *OStreamWrapper::get_ostream(void) const;

1924 14 PointerToArray 0 4 2725 40 PointerToArray< double >::PointerToArray 0 3 606 607 608 0
279
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((double const *)(0))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(PyObject *self, PyObject *source);

1925 11 empty_array 0 4 2725 37 PointerToArray< double >::empty_array 0 1 609 0
166
static inline PointerToArray< double > PointerToArray< double >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((double const *)(0))));

1926 4 size 0 4 2725 30 PointerToArray< double >::size 0 1 610 0
68
inline unsigned long int PointerToArray< double >::size(void) const;

1927 9 push_back 0 4 2725 35 PointerToArray< double >::push_back 0 1 611 0
65
inline void PointerToArray< double >::push_back(double const &x);

1928 8 pop_back 0 4 2725 34 PointerToArray< double >::pop_back 0 1 612 0
53
inline void PointerToArray< double >::pop_back(void);

1929 11 get_element 0 4 2725 37 PointerToArray< double >::get_element 0 1 613 0
86
inline double const &PointerToArray< double >::get_element(unsigned long int n) const;

1930 11 set_element 0 4 2725 37 PointerToArray< double >::set_element 0 1 614 0
92
inline void PointerToArray< double >::set_element(unsigned long int n, double const &value);

1931 11 __getitem__ 0 4 2725 37 PointerToArray< double >::__getitem__ 0 1 615 0
79
double const &PointerToArray< double >::__getitem__(unsigned long int n) const;

1932 11 __setitem__ 0 4 2725 37 PointerToArray< double >::__setitem__ 0 1 616 0
85
void PointerToArray< double >::__setitem__(unsigned long int n, double const &value);

1933 8 get_data 0 4 2725 34 PointerToArray< double >::get_data 0 1 617 0
80
inline std::basic_string< char > PointerToArray< double >::get_data(void) const;

1934 8 set_data 0 4 2725 34 PointerToArray< double >::set_data 0 1 618 0
86
inline void PointerToArray< double >::set_data(std::basic_string< char > const &data);

1935 11 get_subdata 0 4 2725 37 PointerToArray< double >::get_subdata 0 1 619 0
123
inline std::basic_string< char > PointerToArray< double >::get_subdata(unsigned long int n, unsigned long int count) const;

1936 11 set_subdata 0 4 2725 37 PointerToArray< double >::set_subdata 0 1 620 0
135
inline void PointerToArray< double >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1937 13 get_ref_count 0 4 2725 39 PointerToArray< double >::get_ref_count 0 1 621 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

1938 18 get_node_ref_count 0 4 2725 44 PointerToArray< double >::get_node_ref_count 0 1 622 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

1939 13 __getbuffer__ 0 4 2725 39 PointerToArray< double >::__getbuffer__ 0 1 623 0
88
int PointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1940 17 __releasebuffer__ 0 4 2725 43 PointerToArray< double >::__releasebuffer__ 0 1 624 0
88
void PointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1941 15 ~PointerToArray 0 4 2725 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

1942 14 PointerToArray 0 4 2727 39 PointerToArray< float >::PointerToArray 0 3 625 626 627 0
274
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((float const *)(0))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(PyObject *self, PyObject *source);

1943 11 empty_array 0 4 2727 36 PointerToArray< float >::empty_array 0 1 628 0
163
static inline PointerToArray< float > PointerToArray< float >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((float const *)(0))));

1944 4 size 0 4 2727 29 PointerToArray< float >::size 0 1 629 0
67
inline unsigned long int PointerToArray< float >::size(void) const;

1945 9 push_back 0 4 2727 34 PointerToArray< float >::push_back 0 1 630 0
63
inline void PointerToArray< float >::push_back(float const &x);

1946 8 pop_back 0 4 2727 33 PointerToArray< float >::pop_back 0 1 631 0
52
inline void PointerToArray< float >::pop_back(void);

1947 11 get_element 0 4 2727 36 PointerToArray< float >::get_element 0 1 632 0
84
inline float const &PointerToArray< float >::get_element(unsigned long int n) const;

1948 11 set_element 0 4 2727 36 PointerToArray< float >::set_element 0 1 633 0
90
inline void PointerToArray< float >::set_element(unsigned long int n, float const &value);

1949 11 __getitem__ 0 4 2727 36 PointerToArray< float >::__getitem__ 0 1 634 0
77
float const &PointerToArray< float >::__getitem__(unsigned long int n) const;

1950 11 __setitem__ 0 4 2727 36 PointerToArray< float >::__setitem__ 0 1 635 0
83
void PointerToArray< float >::__setitem__(unsigned long int n, float const &value);

1951 8 get_data 0 4 2727 33 PointerToArray< float >::get_data 0 1 636 0
79
inline std::basic_string< char > PointerToArray< float >::get_data(void) const;

1952 8 set_data 0 4 2727 33 PointerToArray< float >::set_data 0 1 637 0
85
inline void PointerToArray< float >::set_data(std::basic_string< char > const &data);

1953 11 get_subdata 0 4 2727 36 PointerToArray< float >::get_subdata 0 1 638 0
122
inline std::basic_string< char > PointerToArray< float >::get_subdata(unsigned long int n, unsigned long int count) const;

1954 11 set_subdata 0 4 2727 36 PointerToArray< float >::set_subdata 0 1 639 0
134
inline void PointerToArray< float >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1955 13 get_ref_count 0 4 2727 38 PointerToArray< float >::get_ref_count 0 1 640 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

1956 18 get_node_ref_count 0 4 2727 43 PointerToArray< float >::get_node_ref_count 0 1 641 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

1957 13 __getbuffer__ 0 4 2727 38 PointerToArray< float >::__getbuffer__ 0 1 642 0
87
int PointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1958 17 __releasebuffer__ 0 4 2727 42 PointerToArray< float >::__releasebuffer__ 0 1 643 0
87
void PointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1959 15 ~PointerToArray 0 4 2727 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

1960 14 PointerToArray 0 4 2729 37 PointerToArray< int >::PointerToArray 0 3 644 645 646 0
264
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((int const *)(0))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(PyObject *self, PyObject *source);

1961 11 empty_array 0 4 2729 34 PointerToArray< int >::empty_array 0 1 647 0
157
static inline PointerToArray< int > PointerToArray< int >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((int const *)(0))));

1962 4 size 0 4 2729 27 PointerToArray< int >::size 0 1 648 0
65
inline unsigned long int PointerToArray< int >::size(void) const;

1963 9 push_back 0 4 2729 32 PointerToArray< int >::push_back 0 1 649 0
59
inline void PointerToArray< int >::push_back(int const &x);

1964 8 pop_back 0 4 2729 31 PointerToArray< int >::pop_back 0 1 650 0
50
inline void PointerToArray< int >::pop_back(void);

1965 11 get_element 0 4 2729 34 PointerToArray< int >::get_element 0 1 651 0
80
inline int const &PointerToArray< int >::get_element(unsigned long int n) const;

1966 11 set_element 0 4 2729 34 PointerToArray< int >::set_element 0 1 652 0
86
inline void PointerToArray< int >::set_element(unsigned long int n, int const &value);

1967 11 __getitem__ 0 4 2729 34 PointerToArray< int >::__getitem__ 0 1 653 0
73
int const &PointerToArray< int >::__getitem__(unsigned long int n) const;

1968 11 __setitem__ 0 4 2729 34 PointerToArray< int >::__setitem__ 0 1 654 0
79
void PointerToArray< int >::__setitem__(unsigned long int n, int const &value);

1969 8 get_data 0 4 2729 31 PointerToArray< int >::get_data 0 1 655 0
77
inline std::basic_string< char > PointerToArray< int >::get_data(void) const;

1970 8 set_data 0 4 2729 31 PointerToArray< int >::set_data 0 1 656 0
83
inline void PointerToArray< int >::set_data(std::basic_string< char > const &data);

1971 11 get_subdata 0 4 2729 34 PointerToArray< int >::get_subdata 0 1 657 0
120
inline std::basic_string< char > PointerToArray< int >::get_subdata(unsigned long int n, unsigned long int count) const;

1972 11 set_subdata 0 4 2729 34 PointerToArray< int >::set_subdata 0 1 658 0
132
inline void PointerToArray< int >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1973 13 get_ref_count 0 4 2729 36 PointerToArray< int >::get_ref_count 0 1 659 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

1974 18 get_node_ref_count 0 4 2729 41 PointerToArray< int >::get_node_ref_count 0 1 660 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

1975 13 __getbuffer__ 0 4 2729 36 PointerToArray< int >::__getbuffer__ 0 1 661 0
85
int PointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1976 17 __releasebuffer__ 0 4 2729 40 PointerToArray< int >::__releasebuffer__ 0 1 662 0
85
void PointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1977 15 ~PointerToArray 0 4 2729 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

1978 14 PointerToArray 0 4 2731 47 PointerToArray< unsigned char >::PointerToArray 0 3 663 664 665 0
314
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *source);

1979 11 empty_array 0 4 2731 44 PointerToArray< unsigned char >::empty_array 0 1 666 0
187
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));

1980 4 size 0 4 2731 37 PointerToArray< unsigned char >::size 0 1 667 0
75
inline unsigned long int PointerToArray< unsigned char >::size(void) const;

1981 9 push_back 0 4 2731 42 PointerToArray< unsigned char >::push_back 0 1 668 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

1982 8 pop_back 0 4 2731 41 PointerToArray< unsigned char >::pop_back 0 1 669 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

1983 11 get_element 0 4 2731 44 PointerToArray< unsigned char >::get_element 0 1 670 0
100
inline unsigned char const &PointerToArray< unsigned char >::get_element(unsigned long int n) const;

1984 11 set_element 0 4 2731 44 PointerToArray< unsigned char >::set_element 0 1 671 0
106
inline void PointerToArray< unsigned char >::set_element(unsigned long int n, unsigned char const &value);

1985 11 __getitem__ 0 4 2731 44 PointerToArray< unsigned char >::__getitem__ 0 1 672 0
93
unsigned char const &PointerToArray< unsigned char >::__getitem__(unsigned long int n) const;

1986 11 __setitem__ 0 4 2731 44 PointerToArray< unsigned char >::__setitem__ 0 1 673 0
99
void PointerToArray< unsigned char >::__setitem__(unsigned long int n, unsigned char const &value);

1987 8 get_data 0 4 2731 41 PointerToArray< unsigned char >::get_data 0 1 674 0
87
inline std::basic_string< char > PointerToArray< unsigned char >::get_data(void) const;

1988 8 set_data 0 4 2731 41 PointerToArray< unsigned char >::set_data 0 1 675 0
93
inline void PointerToArray< unsigned char >::set_data(std::basic_string< char > const &data);

1989 11 get_subdata 0 4 2731 44 PointerToArray< unsigned char >::get_subdata 0 1 676 0
130
inline std::basic_string< char > PointerToArray< unsigned char >::get_subdata(unsigned long int n, unsigned long int count) const;

1990 11 set_subdata 0 4 2731 44 PointerToArray< unsigned char >::set_subdata 0 1 677 0
142
inline void PointerToArray< unsigned char >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1991 13 get_ref_count 0 4 2731 46 PointerToArray< unsigned char >::get_ref_count 0 1 678 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

1992 18 get_node_ref_count 0 4 2731 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 679 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

1993 13 __getbuffer__ 0 4 2731 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 680 0
95
int PointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1994 17 __releasebuffer__ 0 4 2731 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 681 0
95
void PointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1995 15 ~PointerToArray 0 4 2731 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

1996 18 get_version_string 0 4 2732 31 PandaSystem::get_version_string 0 1 682 0
57
static std::string PandaSystem::get_version_string(void);

1997 26 get_package_version_string 0 4 2732 39 PandaSystem::get_package_version_string 0 1 683 0
65
static std::string PandaSystem::get_package_version_string(void);

1998 20 get_package_host_url 0 4 2732 33 PandaSystem::get_package_host_url 0 1 684 0
59
static std::string PandaSystem::get_package_host_url(void);

1999 30 get_p3d_coreapi_version_string 0 4 2732 43 PandaSystem::get_p3d_coreapi_version_string 0 1 685 0
69
static std::string PandaSystem::get_p3d_coreapi_version_string(void);

2000 17 get_major_version 0 4 2732 30 PandaSystem::get_major_version 0 1 686 0
48
static int PandaSystem::get_major_version(void);

2001 17 get_minor_version 0 4 2732 30 PandaSystem::get_minor_version 0 1 687 0
48
static int PandaSystem::get_minor_version(void);

2002 20 get_sequence_version 0 4 2732 33 PandaSystem::get_sequence_version 0 1 688 0
51
static int PandaSystem::get_sequence_version(void);

2003 19 is_official_version 0 4 2732 32 PandaSystem::is_official_version 0 1 689 0
51
static bool PandaSystem::is_official_version(void);

2004 20 get_memory_alignment 0 4 2732 33 PandaSystem::get_memory_alignment 0 1 690 0
51
static int PandaSystem::get_memory_alignment(void);

2005 15 get_distributor 0 4 2732 28 PandaSystem::get_distributor 0 1 691 0
54
static std::string PandaSystem::get_distributor(void);

2006 12 get_compiler 0 4 2732 25 PandaSystem::get_compiler 0 1 692 0
51
static std::string PandaSystem::get_compiler(void);

2007 14 get_build_date 0 4 2732 27 PandaSystem::get_build_date 0 1 693 0
53
static std::string PandaSystem::get_build_date(void);

2008 14 get_git_commit 0 4 2732 27 PandaSystem::get_git_commit 0 1 694 0
53
static std::string PandaSystem::get_git_commit(void);

2009 12 get_platform 0 4 2732 25 PandaSystem::get_platform 0 1 695 0
51
static std::string PandaSystem::get_platform(void);

2010 10 has_system 0 4 2732 23 PandaSystem::has_system 0 1 696 0
62
bool PandaSystem::has_system(std::string const &system) const;

2011 15 get_num_systems 0 4 2732 28 PandaSystem::get_num_systems 0 1 697 0
53
std::size_t PandaSystem::get_num_systems(void) const;

2012 10 get_system 0 4 2732 23 PandaSystem::get_system 0 1 698 0
57
std::string PandaSystem::get_system(std::size_t n) const;

2013 14 get_system_tag 0 4 2732 27 PandaSystem::get_system_tag 0 1 699 0
97
std::string PandaSystem::get_system_tag(std::string const &system, std::string const &tag) const;

2014 10 add_system 0 4 2732 23 PandaSystem::add_system 0 1 700 0
56
void PandaSystem::add_system(std::string const &system);

2015 14 set_system_tag 0 4 2732 27 PandaSystem::set_system_tag 0 1 701 0
110
void PandaSystem::set_system_tag(std::string const &system, std::string const &tag, std::string const &value);

2016 9 heap_trim 0 4 2732 22 PandaSystem::heap_trim 0 1 702 0
45
bool PandaSystem::heap_trim(std::size_t pad);

2017 6 output 0 4 2732 19 PandaSystem::output 0 1 703 0
45
void PandaSystem::output(ostream &out) const;

2018 5 write 0 4 2732 18 PandaSystem::write 0 1 704 0
44
void PandaSystem::write(ostream &out) const;

2019 14 get_global_ptr 0 4 2732 27 PandaSystem::get_global_ptr 0 1 705 0
54
static PandaSystem *PandaSystem::get_global_ptr(void);

2020 14 get_class_type 0 4 2732 27 PandaSystem::get_class_type 0 1 706 0
52
static TypeHandle PandaSystem::get_class_type(void);

2021 12 StreamReader 0 4 2733 26 StreamReader::StreamReader 0 2 707 708 189
/**
 *
 */

/**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */
126
inline StreamReader::StreamReader(istream *in, bool owns_stream);
inline StreamReader::StreamReader(StreamReader const &copy);

2022 10 operator = 0 4 2733 24 StreamReader::operator = 0 1 709 0
63
inline void StreamReader::operator =(StreamReader const &copy);

2023 13 ~StreamReader 0 4 2733 27 StreamReader::~StreamReader 0 0 10
/**
 *
 */
41
inline StreamReader::~StreamReader(void);

2024 11 get_istream 0 4 2733 25 StreamReader::get_istream 0 1 710 37
/**
 * Returns the stream in use.
 */
54
inline istream *StreamReader::get_istream(void) const;

2025 8 get_bool 0 4 2733 22 StreamReader::get_bool 0 1 711 36
/**
 * Extracts a boolean value.
 */
41
inline bool StreamReader::get_bool(void);

2026 8 get_int8 0 4 2733 22 StreamReader::get_int8 0 1 712 43
/**
 * Extracts a signed 8-bit integer.
 */
43
inline int8_t StreamReader::get_int8(void);

2027 9 get_uint8 0 4 2733 23 StreamReader::get_uint8 0 1 713 46
/**
 * Extracts an unsigned 8-bit integer.
 */
45
inline uint8_t StreamReader::get_uint8(void);

2028 9 get_int16 0 4 2733 23 StreamReader::get_int16 0 1 714 44
/**
 * Extracts a signed 16-bit integer.
 */
45
inline int16_t StreamReader::get_int16(void);

2029 9 get_int32 0 4 2733 23 StreamReader::get_int32 0 1 715 44
/**
 * Extracts a signed 32-bit integer.
 */
45
inline int32_t StreamReader::get_int32(void);

2030 9 get_int64 0 4 2733 23 StreamReader::get_int64 0 1 716 44
/**
 * Extracts a signed 64-bit integer.
 */
45
inline int64_t StreamReader::get_int64(void);

2031 10 get_uint16 0 4 2733 24 StreamReader::get_uint16 0 1 717 47
/**
 * Extracts an unsigned 16-bit integer.
 */
47
inline uint16_t StreamReader::get_uint16(void);

2032 10 get_uint32 0 4 2733 24 StreamReader::get_uint32 0 1 718 47
/**
 * Extracts an unsigned 32-bit integer.
 */
47
inline uint32_t StreamReader::get_uint32(void);

2033 10 get_uint64 0 4 2733 24 StreamReader::get_uint64 0 1 719 47
/**
 * Extracts an unsigned 64-bit integer.
 */
47
inline uint64_t StreamReader::get_uint64(void);

2034 11 get_float32 0 4 2733 25 StreamReader::get_float32 0 1 720 186
/**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */
45
inline float StreamReader::get_float32(void);

2035 11 get_float64 0 4 2733 25 StreamReader::get_float64 0 1 721 51
/**
 * Extracts a 64-bit floating-point number.
 */
50
inline PN_float64 StreamReader::get_float64(void);

2036 12 get_be_int16 0 4 2733 26 StreamReader::get_be_int16 0 1 722 55
/**
 * Extracts a signed big-endian 16-bit integer.
 */
48
inline int16_t StreamReader::get_be_int16(void);

2037 12 get_be_int32 0 4 2733 26 StreamReader::get_be_int32 0 1 723 55
/**
 * Extracts a signed big-endian 32-bit integer.
 */
48
inline int32_t StreamReader::get_be_int32(void);

2038 12 get_be_int64 0 4 2733 26 StreamReader::get_be_int64 0 1 724 55
/**
 * Extracts a signed big-endian 64-bit integer.
 */
48
inline int64_t StreamReader::get_be_int64(void);

2039 13 get_be_uint16 0 4 2733 27 StreamReader::get_be_uint16 0 1 725 58
/**
 * Extracts an unsigned big-endian 16-bit integer.
 */
50
inline uint16_t StreamReader::get_be_uint16(void);

2040 13 get_be_uint32 0 4 2733 27 StreamReader::get_be_uint32 0 1 726 58
/**
 * Extracts an unsigned big-endian 32-bit integer.
 */
50
inline uint32_t StreamReader::get_be_uint32(void);

2041 13 get_be_uint64 0 4 2733 27 StreamReader::get_be_uint64 0 1 727 58
/**
 * Extracts an unsigned big-endian 64-bit integer.
 */
50
inline uint64_t StreamReader::get_be_uint64(void);

2042 14 get_be_float32 0 4 2733 28 StreamReader::get_be_float32 0 1 728 197
/**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
48
inline float StreamReader::get_be_float32(void);

2043 14 get_be_float64 0 4 2733 28 StreamReader::get_be_float64 0 1 729 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
53
inline PN_float64 StreamReader::get_be_float64(void);

2044 10 get_string 0 4 2733 24 StreamReader::get_string 0 1 730 0
43
std::string StreamReader::get_string(void);

2045 12 get_string32 0 4 2733 26 StreamReader::get_string32 0 1 731 0
45
std::string StreamReader::get_string32(void);

2046 12 get_z_string 0 4 2733 26 StreamReader::get_z_string 0 1 732 0
45
std::string StreamReader::get_z_string(void);

2047 16 get_fixed_string 0 4 2733 30 StreamReader::get_fixed_string 0 1 733 0
61
std::string StreamReader::get_fixed_string(std::size_t size);

2048 10 skip_bytes 0 4 2733 24 StreamReader::skip_bytes 0 1 734 0
48
void StreamReader::skip_bytes(std::size_t size);

2049 13 extract_bytes 0 4 2733 27 StreamReader::extract_bytes 0 1 735 0
136
std::size_t StreamReader::extract_bytes(unsigned char *into, std::size_t size);
PyObject *StreamReader::extract_bytes(std::size_t size);

2050 8 readline 0 4 2733 22 StreamReader::readline 0 1 736 0
39
PyObject *StreamReader::readline(void);

2051 9 readlines 0 4 2733 23 StreamReader::readlines 0 1 737 0
40
PyObject *StreamReader::readlines(void);

2052 24 upcast_to_IStreamWrapper 0 12 2734 39 StreamWrapper::upcast_to_IStreamWrapper 0 1 740 43
upcast from StreamWrapper to IStreamWrapper
62
IStreamWrapper *StreamWrapper::upcast_to_IStreamWrapper(void);

2053 25 downcast_to_StreamWrapper 0 12 2711 41 IStreamWrapper::downcast_to_StreamWrapper 0 1 741 45
downcast from IStreamWrapper to StreamWrapper
63
StreamWrapper *IStreamWrapper::downcast_to_StreamWrapper(void);

2054 24 upcast_to_OStreamWrapper 0 12 2734 39 StreamWrapper::upcast_to_OStreamWrapper 0 1 742 43
upcast from StreamWrapper to OStreamWrapper
62
OStreamWrapper *StreamWrapper::upcast_to_OStreamWrapper(void);

2055 25 downcast_to_StreamWrapper 0 12 2722 41 OStreamWrapper::downcast_to_StreamWrapper 0 1 743 45
downcast from OStreamWrapper to StreamWrapper
63
StreamWrapper *OStreamWrapper::downcast_to_StreamWrapper(void);

2056 13 StreamWrapper 0 4 2734 28 StreamWrapper::StreamWrapper 0 1 738 22
/**
 *
 */

/**
 *
 */
54
inline StreamWrapper::StreamWrapper(iostream &stream);

2057 14 ~StreamWrapper 0 4 2734 29 StreamWrapper::~StreamWrapper 0 0 0
36
StreamWrapper::~StreamWrapper(void);

2058 12 get_iostream 0 4 2734 27 StreamWrapper::get_iostream 0 1 739 56
/**
 * Returns the iostream this object is wrapping.
 */
57
inline iostream *StreamWrapper::get_iostream(void) const;

2059 12 StreamWriter 0 4 2736 26 StreamWriter::StreamWriter 0 2 744 745 94
/**
 *
 */

/**
 *
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */
127
inline StreamWriter::StreamWriter(ostream *out, bool owns_stream);
inline StreamWriter::StreamWriter(StreamWriter const &copy);

2060 10 operator = 0 4 2736 24 StreamWriter::operator = 0 1 746 0
63
inline void StreamWriter::operator =(StreamWriter const &copy);

2061 13 ~StreamWriter 0 4 2736 27 StreamWriter::~StreamWriter 0 0 10
/**
 *
 */
41
inline StreamWriter::~StreamWriter(void);

2062 11 get_ostream 0 4 2736 25 StreamWriter::get_ostream 0 1 747 37
/**
 * Returns the stream in use.
 */
54
inline ostream *StreamWriter::get_ostream(void) const;

2063 8 add_bool 0 4 2736 22 StreamWriter::add_bool 0 1 748 46
/**
 * Adds a boolean value to the stream.
 */
47
inline void StreamWriter::add_bool(bool value);

2064 8 add_int8 0 4 2736 22 StreamWriter::add_int8 0 1 749 53
/**
 * Adds a signed 8-bit integer to the stream.
 */
49
inline void StreamWriter::add_int8(int8_t value);

2065 9 add_uint8 0 4 2736 23 StreamWriter::add_uint8 0 1 750 56
/**
 * Adds an unsigned 8-bit integer to the stream.
 */
51
inline void StreamWriter::add_uint8(uint8_t value);

2066 9 add_int16 0 4 2736 23 StreamWriter::add_int16 0 1 751 104
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the stream.
 */
51
inline void StreamWriter::add_int16(int16_t value);

2067 9 add_int32 0 4 2736 23 StreamWriter::add_int32 0 1 752 54
/**
 * Adds a signed 32-bit integer to the stream.
 */
51
inline void StreamWriter::add_int32(int32_t value);

2068 9 add_int64 0 4 2736 23 StreamWriter::add_int64 0 1 753 54
/**
 * Adds a signed 64-bit integer to the stream.
 */
51
inline void StreamWriter::add_int64(int64_t value);

2069 10 add_uint16 0 4 2736 24 StreamWriter::add_uint16 0 1 754 57
/**
 * Adds an unsigned 16-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint16(uint16_t value);

2070 10 add_uint32 0 4 2736 24 StreamWriter::add_uint32 0 1 755 57
/**
 * Adds an unsigned 32-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint32(uint32_t value);

2071 10 add_uint64 0 4 2736 24 StreamWriter::add_uint64 0 1 756 57
/**
 * Adds an unsigned 64-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint64(uint64_t value);

2072 11 add_float32 0 4 2736 25 StreamWriter::add_float32 0 1 757 196
/**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
51
inline void StreamWriter::add_float32(float value);

2073 11 add_float64 0 4 2736 25 StreamWriter::add_float64 0 1 758 61
/**
 * Adds a 64-bit floating-point number to the stream.
 */
56
inline void StreamWriter::add_float64(PN_float64 value);

2074 12 add_be_int16 0 4 2736 26 StreamWriter::add_be_int16 0 1 759 140
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int16(int16_t value);

2075 12 add_be_int32 0 4 2736 26 StreamWriter::add_be_int32 0 1 760 71
/**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int32(int32_t value);

2076 12 add_be_int64 0 4 2736 26 StreamWriter::add_be_int64 0 1 761 71
/**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int64(int64_t value);

2077 13 add_be_uint16 0 4 2736 27 StreamWriter::add_be_uint16 0 1 762 74
/**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint16(uint16_t value);

2078 13 add_be_uint32 0 4 2736 27 StreamWriter::add_be_uint32 0 1 763 74
/**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint32(uint32_t value);

2079 13 add_be_uint64 0 4 2736 27 StreamWriter::add_be_uint64 0 1 764 74
/**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint64(uint64_t value);

2080 14 add_be_float32 0 4 2736 28 StreamWriter::add_be_float32 0 1 765 207
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */
54
inline void StreamWriter::add_be_float32(float value);

2081 14 add_be_float64 0 4 2736 28 StreamWriter::add_be_float64 0 1 766 78
/**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */
59
inline void StreamWriter::add_be_float64(PN_float64 value);

2082 10 add_string 0 4 2736 24 StreamWriter::add_string 0 1 767 107
/**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */
61
inline void StreamWriter::add_string(std::string const &str);

2083 12 add_string32 0 4 2736 26 StreamWriter::add_string32 0 1 768 84
/**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */
63
inline void StreamWriter::add_string32(std::string const &str);

2084 12 add_z_string 0 4 2736 26 StreamWriter::add_z_string 0 1 769 84
/**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */
56
inline void StreamWriter::add_z_string(std::string str);

2085 16 add_fixed_string 0 4 2736 30 StreamWriter::add_fixed_string 0 1 770 236
/**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
85
inline void StreamWriter::add_fixed_string(std::string const &str, std::size_t size);

2086 9 pad_bytes 0 4 2736 23 StreamWriter::pad_bytes 0 1 771 0
47
void StreamWriter::pad_bytes(std::size_t size);

2087 11 append_data 0 4 2736 25 StreamWriter::append_data 0 1 772 140
/**
 * Appends some more raw data to the end of the streamWriter.
 */

/**
 * Appends some more raw data to the end of the streamWriter.
 */
47
void StreamWriter::append_data(PyObject *data);

2088 5 flush 0 4 2736 19 StreamWriter::flush 0 1 773 50
/**
 * Calls flush() on the underlying stream.
 */
38
inline void StreamWriter::flush(void);

2089 5 write 0 4 2736 19 StreamWriter::write 0 1 774 132
/**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */
56
inline void StreamWriter::write(std::string const &str);

2090 13 get_softspace 0 20 2736 27 StreamWriter::get_softspace 0 1 776 39
getter for int StreamWriter::softspace;
44
int StreamWriter::get_softspace(void) const;

2091 13 set_softspace 0 36 2736 27 StreamWriter::set_softspace 0 1 775 39
setter for int StreamWriter::softspace;
44
void StreamWriter::set_softspace(int value);

2092 11 TextEncoder 0 4 2737 24 TextEncoder::TextEncoder 0 2 777 778 22
/**
 *
 */

/**
 *
 */
96
inline TextEncoder::TextEncoder(void);
inline TextEncoder::TextEncoder(TextEncoder const &copy);

2093 12 set_encoding 0 4 2737 25 TextEncoder::set_encoding 0 1 779 374
/**
 * Specifies how the string set via set_text() is to be interpreted.  The
 * default, E_iso8859, means a standard string with one-byte characters (i.e.
 * ASCII).  Other encodings are possible to take advantage of character sets
 * with more than 256 characters.
 *
 * This affects only future calls to set_text(); it does not change text that
 * was set previously.
 */
70
inline void TextEncoder::set_encoding(TextEncoder::Encoding encoding);

2094 12 get_encoding 0 4 2737 25 TextEncoder::get_encoding 0 1 780 116
/**
 * Returns the encoding by which the string set via set_text() is to be
 * interpreted.  See set_encoding().
 */
67
inline TextEncoder::Encoding TextEncoder::get_encoding(void) const;

2095 20 set_default_encoding 0 4 2737 33 TextEncoder::set_default_encoding 0 1 781 126
/**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */
85
static inline void TextEncoder::set_default_encoding(TextEncoder::Encoding encoding);

2096 20 get_default_encoding 0 4 2737 33 TextEncoder::get_default_encoding 0 1 782 126
/**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */
76
static inline TextEncoder::Encoding TextEncoder::get_default_encoding(void);

2097 8 set_text 0 4 2737 21 TextEncoder::set_text 0 2 783 784 562
/**
 * Changes the text that is stored in the encoder.  The text should be encoded
 * according to the method indicated by set_encoding().  Subsequent calls to
 * get_text() will return this same string, while get_wtext() will return the
 * decoded version of the string.
 */

/**
 * The two-parameter version of set_text() accepts an explicit encoding; the
 * text is immediately decoded and stored as a wide-character string.
 * Subsequent calls to get_text() will return the same text re-encoded using
 * whichever encoding is specified by set_encoding().
 */
151
inline void TextEncoder::set_text(std::string const &text);
inline void TextEncoder::set_text(std::string const &text, TextEncoder::Encoding encoding);

2098 10 clear_text 0 4 2737 23 TextEncoder::clear_text 0 1 785 49
/**
 * Removes the text from the TextEncoder.
 */
42
inline void TextEncoder::clear_text(void);

2099 8 has_text 0 4 2737 21 TextEncoder::has_text 0 1 786 10
/**
 *
 */
46
inline bool TextEncoder::has_text(void) const;

2100 10 make_upper 0 4 2737 23 TextEncoder::make_upper 0 1 787 0
35
void TextEncoder::make_upper(void);

2101 10 make_lower 0 4 2737 23 TextEncoder::make_lower 0 1 788 0
35
void TextEncoder::make_lower(void);

2102 8 get_text 0 4 2737 21 TextEncoder::get_text 0 2 789 790 164
/**
 * Returns the current text, as encoded via the current encoding system.
 */

/**
 * Returns the current text, as encoded via the indicated encoding system.
 */
133
inline std::string TextEncoder::get_text(void) const;
inline std::string TextEncoder::get_text(TextEncoder::Encoding encoding) const;

2103 11 append_text 0 4 2737 24 TextEncoder::append_text 0 1 791 70
/**
 * Appends the indicates string to the end of the stored text.
 */
62
inline void TextEncoder::append_text(std::string const &text);

2104 19 append_unicode_char 0 4 2737 32 TextEncoder::append_unicode_char 0 1 792 128
/**
 * Appends a single character to the end of the stored text.  This may be a
 * wide character, up to 16 bits in Unicode.
 */
60
inline void TextEncoder::append_unicode_char(int character);

2105 13 get_num_chars 0 4 2737 26 TextEncoder::get_num_chars 0 1 793 169
/**
 * Returns the number of characters in the stored text.  This is a count of
 * wide characters, after the string has been decoded according to
 * set_encoding().
 */
58
inline std::size_t TextEncoder::get_num_chars(void) const;

2106 16 get_unicode_char 0 4 2737 29 TextEncoder::get_unicode_char 0 1 794 196
/**
 * Returns the Unicode value of the nth character in the stored text.  This
 * may be a wide character (greater than 255), after the string has been
 * decoded according to set_encoding().
 */
66
inline int TextEncoder::get_unicode_char(std::size_t index) const;

2107 16 set_unicode_char 0 4 2737 29 TextEncoder::set_unicode_char 0 1 795 193
/**
 * Sets the Unicode value of the nth character in the stored text.  This may
 * be a wide character (greater than 255), after the string has been decoded
 * according to set_encoding().
 */
76
inline void TextEncoder::set_unicode_char(std::size_t index, int character);

2108 16 get_encoded_char 0 4 2737 29 TextEncoder::get_encoded_char 0 2 796 797 204
/**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */

/**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */
181
inline std::string TextEncoder::get_encoded_char(std::size_t index) const;
inline std::string TextEncoder::get_encoded_char(std::size_t index, TextEncoder::Encoding encoding) const;

2109 17 get_text_as_ascii 0 4 2737 30 TextEncoder::get_text_as_ascii 0 1 798 723
/**
 * Returns the text associated with the node, converted as nearly as possible
 * to a fully-ASCII representation.  This means replacing accented letters
 * with their unaccented ASCII equivalents.
 *
 * It is possible that some characters in the string cannot be converted to
 * ASCII.  (The string may involve symbols like the copyright symbol, for
 * instance, or it might involve letters in some other alphabet such as Greek
 * or Cyrillic, or even Latin letters like thorn or eth that are not part of
 * the ASCII character set.)  In this case, as much of the string as possible
 * will be converted to ASCII, and the nonconvertible characters will remain
 * encoded in the encoding specified by set_encoding().
 */
62
inline std::string TextEncoder::get_text_as_ascii(void) const;

2110 13 reencode_text 0 4 2737 26 TextEncoder::reencode_text 0 1 799 277
/**
 * Given the indicated text string, which is assumed to be encoded via the
 * encoding "from", decodes it and then reencodes it into the encoding "to",
 * and returns the newly encoded string.  This does not change or affect any
 * properties on the TextEncoder itself.
 */
132
static inline std::string TextEncoder::reencode_text(std::string const &text, TextEncoder::Encoding from, TextEncoder::Encoding to);

2111 15 unicode_isalpha 0 4 2737 28 TextEncoder::unicode_isalpha 0 1 800 152
/**
 * Returns true if the indicated character is an alphabetic letter, false
 * otherwise.  This is akin to ctype's isalpha(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isalpha(int character);

2112 15 unicode_isdigit 0 4 2737 28 TextEncoder::unicode_isdigit 0 1 801 147
/**
 * Returns true if the indicated character is a numeric digit, false
 * otherwise.  This is akin to ctype's isdigit(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isdigit(int character);

2113 15 unicode_ispunct 0 4 2737 28 TextEncoder::unicode_ispunct 0 1 802 150
/**
 * Returns true if the indicated character is a punctuation mark, false
 * otherwise.  This is akin to ctype's ispunct(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_ispunct(int character);

2114 15 unicode_islower 0 4 2737 28 TextEncoder::unicode_islower 0 1 803 150
/**
 * Returns true if the indicated character is a lowercase letter, false
 * otherwise.  This is akin to ctype's islower(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_islower(int character);

2115 15 unicode_isupper 0 4 2737 28 TextEncoder::unicode_isupper 0 1 804 151
/**
 * Returns true if the indicated character is an uppercase letter, false
 * otherwise.  This is akin to ctype's isupper(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isupper(int character);

2116 15 unicode_isspace 0 4 2737 28 TextEncoder::unicode_isspace 0 1 805 151
/**
 * Returns true if the indicated character is a whitespace letter, false
 * otherwise.  This is akin to ctype's isspace(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isspace(int character);

2117 15 unicode_toupper 0 4 2737 28 TextEncoder::unicode_toupper 0 1 806 135
/**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's toupper(), extended to Unicode.
 */
62
static inline int TextEncoder::unicode_toupper(int character);

2118 15 unicode_tolower 0 4 2737 28 TextEncoder::unicode_tolower 0 1 807 135
/**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's tolower(), extended to Unicode.
 */
62
static inline int TextEncoder::unicode_tolower(int character);

2119 5 upper 0 4 2737 18 TextEncoder::upper 0 2 808 809 210
/**
 * Converts the string to uppercase, assuming the string is encoded in the
 * default encoding.
 */

/**
 * Converts the string to uppercase, assuming the string is encoded in the
 * indicated encoding.
 */
177
static inline std::string TextEncoder::upper(std::string const &source);
static inline std::string TextEncoder::upper(std::string const &source, TextEncoder::Encoding encoding);

2120 5 lower 0 4 2737 18 TextEncoder::lower 0 2 810 811 210
/**
 * Converts the string to lowercase, assuming the string is encoded in the
 * default encoding.
 */

/**
 * Converts the string to lowercase, assuming the string is encoded in the
 * indicated encoding.
 */
177
static inline std::string TextEncoder::lower(std::string const &source);
static inline std::string TextEncoder::lower(std::string const &source, TextEncoder::Encoding encoding);

2121 9 set_wtext 0 4 2737 22 TextEncoder::set_wtext 0 1 812 303
// Direct support for wide-character strings.  Now publishable with the new
// wstring support in interrogate.

/**
 * Changes the text that is stored in the encoder.  Subsequent calls to
 * get_wtext() will return this same string, while get_text() will return the
 * encoded version of the string.
 */
62
inline void TextEncoder::set_wtext(std::wstring const &wtext);

2122 9 get_wtext 0 4 2737 22 TextEncoder::get_wtext 0 1 813 91
/**
 * Returns the text associated with the TextEncoder, as a wide-character
 * string.
 */
62
inline std::wstring const &TextEncoder::get_wtext(void) const;

2123 12 append_wtext 0 4 2737 25 TextEncoder::append_wtext 0 1 814 85
/**
 * Appends the indicates string to the end of the stored wide-character text.
 */
64
inline void TextEncoder::append_wtext(std::wstring const &text);

2124 18 get_wtext_as_ascii 0 4 2737 31 TextEncoder::get_wtext_as_ascii 0 1 815 0
57
std::wstring TextEncoder::get_wtext_as_ascii(void) const;

2125 8 is_wtext 0 4 2737 21 TextEncoder::is_wtext 0 1 816 0
39
bool TextEncoder::is_wtext(void) const;

2126 12 encode_wchar 0 4 2737 25 TextEncoder::encode_wchar 0 1 817 0
89
static std::string TextEncoder::encode_wchar(wchar_t ch, TextEncoder::Encoding encoding);

2127 12 encode_wtext 0 4 2737 25 TextEncoder::encode_wtext 0 2 818 819 102
/**
 * Encodes a wide-text string into a single-char string, according to the
 * current encoding.
 */
183
inline std::string TextEncoder::encode_wtext(std::wstring const &wtext) const;
static std::string TextEncoder::encode_wtext(std::wstring const &wtext, TextEncoder::Encoding encoding);

2128 11 decode_text 0 4 2737 24 TextEncoder::decode_text 0 2 820 821 105
/**
 * Returns the given wstring decoded to a single-byte string, via the current
 * encoding system.
 */
179
inline std::wstring TextEncoder::decode_text(std::string const &text) const;
static std::wstring TextEncoder::decode_text(std::string const &text, TextEncoder::Encoding encoding);

2129 12 ~TextEncoder 0 4 2737 25 TextEncoder::~TextEncoder 0 0 0
32
TextEncoder::~TextEncoder(void);

2130 4 make 0 4 2739 16 TypeHandle::make 0 1 824 0
59
static TypeHandle TypeHandle::make(PyTypeObject *classobj);

2131 11 operator == 0 4 2739 23 TypeHandle::operator == 0 1 825 0
67
inline bool TypeHandle::operator ==(TypeHandle const &other) const;

2132 11 operator != 0 4 2739 23 TypeHandle::operator != 0 1 826 0
67
inline bool TypeHandle::operator !=(TypeHandle const &other) const;

2133 10 operator < 0 4 2739 22 TypeHandle::operator < 0 1 827 0
66
inline bool TypeHandle::operator <(TypeHandle const &other) const;

2134 11 operator <= 0 4 2739 23 TypeHandle::operator <= 0 1 828 0
67
inline bool TypeHandle::operator <=(TypeHandle const &other) const;

2135 10 operator > 0 4 2739 22 TypeHandle::operator > 0 1 829 0
66
inline bool TypeHandle::operator >(TypeHandle const &other) const;

2136 11 operator >= 0 4 2739 23 TypeHandle::operator >= 0 1 830 0
67
inline bool TypeHandle::operator >=(TypeHandle const &other) const;

2137 10 compare_to 0 4 2739 22 TypeHandle::compare_to 0 1 831 207
/**
 * Sorts TypeHandles arbitrarily (according to <, >, etc.).  Returns a number
 * less than 0 if this type sorts before the other one, greater than zero if
 * it sorts after, 0 if they are equivalent.
 */
65
inline int TypeHandle::compare_to(TypeHandle const &other) const;

2138 8 get_hash 0 4 2739 20 TypeHandle::get_hash 0 1 832 54
/**
 * Returns a hash code suitable for phash_map.
 */
52
inline std::size_t TypeHandle::get_hash(void) const;

2139 8 get_name 0 4 2739 20 TypeHandle::get_name 0 1 833 216
/**
 * Returns the name of the type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
91
inline std::string TypeHandle::get_name(TypedObject *object = (TypedObject *)(NULL)) const;

2140 15 is_derived_from 0 4 2739 27 TypeHandle::is_derived_from 0 1 834 268
/**
 * Returns true if this type is derived from the indicated type, false
 * otherwise.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
110
inline bool TypeHandle::is_derived_from(TypeHandle parent, TypedObject *object = (TypedObject *)(NULL)) const;

2141 22 get_num_parent_classes 0 4 2739 34 TypeHandle::get_num_parent_classes 0 1 835 506
/**
 * Returns the number of parent classes that this type is known to have.  This
 * may then be used to index into get_parent_class().  The result will be 0 if
 * this class does not inherit from any other classes, 1 if normal, single
 * inheritance is in effect, or greater than one if multiple inheritance is in
 * effect.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
97
inline int TypeHandle::get_num_parent_classes(TypedObject *object = (TypedObject *)(NULL)) const;

2142 16 get_parent_class 0 4 2739 28 TypeHandle::get_parent_class 0 1 836 129
/**
 * Returns the nth parent class of this type.  The index should be in the
 * range 0 <= index < get_num_parent_classes().
 */
64
inline TypeHandle TypeHandle::get_parent_class(int index) const;

2143 21 get_num_child_classes 0 4 2739 33 TypeHandle::get_num_child_classes 0 1 837 314
/**
 * Returns the number of child classes that this type is known to have.  This
 * may then be used to index into get_child_class().
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
96
inline int TypeHandle::get_num_child_classes(TypedObject *object = (TypedObject *)(NULL)) const;

2144 15 get_child_class 0 4 2739 27 TypeHandle::get_child_class 0 1 838 127
/**
 * Returns the nth child class of this type.  The index should be in the range
 * 0 <= index < get_num_child_classes().
 */
63
inline TypeHandle TypeHandle::get_child_class(int index) const;

2145 18 get_parent_towards 0 4 2739 30 TypeHandle::get_parent_towards 0 1 839 577
/**
 * Returns the parent class that is in a direct line of inheritance to the
 * indicated ancestor class.  This is useful in the presence of multiple
 * inheritance to try to determine what properties an unknown type may have.
 *
 * The return value is TypeHandle::none() if the type does not inherit from
 * the ancestor.  If ancestor is the same as this type, the return value is
 * this type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
121
inline TypeHandle TypeHandle::get_parent_towards(TypeHandle ancestor, TypedObject *object = (TypedObject *)(NULL)) const;

2146 24 get_best_parent_from_Set 0 4 2739 36 TypeHandle::get_best_parent_from_Set 0 1 840 0
77
int TypeHandle::get_best_parent_from_Set(set< int > const &legal_vals) const;

2147 16 get_memory_usage 0 4 2739 28 TypeHandle::get_memory_usage 0 1 841 0
85
std::size_t TypeHandle::get_memory_usage(TypeHandle::MemoryClass memory_class) const;

2148 16 inc_memory_usage 0 4 2739 28 TypeHandle::inc_memory_usage 0 1 842 0
90
void TypeHandle::inc_memory_usage(TypeHandle::MemoryClass memory_class, std::size_t size);

2149 16 dec_memory_usage 0 4 2739 28 TypeHandle::dec_memory_usage 0 1 843 0
90
void TypeHandle::dec_memory_usage(TypeHandle::MemoryClass memory_class, std::size_t size);

2150 9 get_index 0 4 2739 21 TypeHandle::get_index 0 1 844 354
/**
 * Returns the integer index associated with this TypeHandle.  Each different
 * TypeHandle will have a different index.  However, you probably shouldn't be
 * using this method; you should just treat the TypeHandles as opaque classes.
 * This is provided for the convenience of non-C++ scripting languages to
 * build a hashtable of TypeHandles.
 */
45
inline int TypeHandle::get_index(void) const;

2151 6 output 0 4 2739 18 TypeHandle::output 0 1 845 10
/**
 *
 */
51
inline void TypeHandle::output(ostream &out) const;

2152 4 none 0 4 2739 16 TypeHandle::none 0 1 846 85
/**
 * Returns a special zero-valued TypeHandle that is used to indicate no type.
 */
48
static inline TypeHandle TypeHandle::none(void);

2153 22 operator typecast bool 0 132 2739 34 TypeHandle::operator typecast bool 0 1 847 0
59
inline bool TypeHandle::operator typecast bool(void) const;

2154 10 TypeHandle 0 4 2739 22 TypeHandle::TypeHandle 0 2 822 823 0
107
inline TypeHandle::TypeHandle(void) = default;
inline TypeHandle::TypeHandle(TypeHandle const &) = default;

2155 11 ~TypeHandle 0 4 2739 23 TypeHandle::~TypeHandle 0 0 0
30
TypeHandle::~TypeHandle(void);

2156 21 register_dynamic_type 0 4 2741 35 TypeRegistry::register_dynamic_type 0 1 849 0
72
TypeHandle TypeRegistry::register_dynamic_type(std::string const &name);

2157 17 record_derivation 0 4 2741 31 TypeRegistry::record_derivation 0 1 850 0
74
void TypeRegistry::record_derivation(TypeHandle child, TypeHandle parent);

2158 21 record_alternate_name 0 4 2741 35 TypeRegistry::record_alternate_name 0 1 851 0
83
void TypeRegistry::record_alternate_name(TypeHandle type, std::string const &name);

2159 9 find_type 0 4 2741 23 TypeRegistry::find_type 0 1 852 0
66
TypeHandle TypeRegistry::find_type(std::string const &name) const;

2160 15 find_type_by_id 0 4 2741 29 TypeRegistry::find_type_by_id 0 1 853 0
55
TypeHandle TypeRegistry::find_type_by_id(int id) const;

2161 8 get_name 0 4 2741 22 TypeRegistry::get_name 0 1 854 0
79
std::string TypeRegistry::get_name(TypeHandle type, TypedObject *object) const;

2162 15 is_derived_from 0 4 2741 29 TypeRegistry::is_derived_from 0 1 855 0
97
bool TypeRegistry::is_derived_from(TypeHandle child, TypeHandle base, TypedObject *child_object);

2163 19 get_num_typehandles 0 4 2741 33 TypeRegistry::get_num_typehandles 0 1 856 0
44
int TypeRegistry::get_num_typehandles(void);

2164 14 get_typehandle 0 4 2741 28 TypeRegistry::get_typehandle 0 1 857 0
47
TypeHandle TypeRegistry::get_typehandle(int n);

2165 20 get_num_root_classes 0 4 2741 34 TypeRegistry::get_num_root_classes 0 1 858 0
45
int TypeRegistry::get_num_root_classes(void);

2166 14 get_root_class 0 4 2741 28 TypeRegistry::get_root_class 0 1 859 0
47
TypeHandle TypeRegistry::get_root_class(int n);

2167 22 get_num_parent_classes 0 4 2741 36 TypeRegistry::get_num_parent_classes 0 1 860 0
92
int TypeRegistry::get_num_parent_classes(TypeHandle child, TypedObject *child_object) const;

2168 16 get_parent_class 0 4 2741 30 TypeRegistry::get_parent_class 0 1 861 0
77
TypeHandle TypeRegistry::get_parent_class(TypeHandle child, int index) const;

2169 21 get_num_child_classes 0 4 2741 35 TypeRegistry::get_num_child_classes 0 1 862 0
91
int TypeRegistry::get_num_child_classes(TypeHandle child, TypedObject *child_object) const;

2170 15 get_child_class 0 4 2741 29 TypeRegistry::get_child_class 0 1 863 0
76
TypeHandle TypeRegistry::get_child_class(TypeHandle child, int index) const;

2171 18 get_parent_towards 0 4 2741 32 TypeRegistry::get_parent_towards 0 1 864 0
106
TypeHandle TypeRegistry::get_parent_towards(TypeHandle child, TypeHandle base, TypedObject *child_object);

2172 16 reregister_types 0 4 2741 30 TypeRegistry::reregister_types 0 1 865 0
49
static void TypeRegistry::reregister_types(void);

2173 5 write 0 4 2741 19 TypeRegistry::write 0 1 866 0
45
void TypeRegistry::write(ostream &out) const;

2174 3 ptr 0 4 2741 17 TypeRegistry::ptr 0 1 867 130
// ptr() returns the pointer to the global TypeRegistry object.

/**
 * Returns the pointer to the global TypeRegistry object.
 */
52
static inline TypeRegistry *TypeRegistry::ptr(void);

2175 12 TypeRegistry 0 4 2741 26 TypeRegistry::TypeRegistry 0 1 848 0
66
inline TypeRegistry::TypeRegistry(TypeRegistry const &) = default;

2176 13 ~TypeRegistry 0 4 2741 27 TypeRegistry::~TypeRegistry 0 0 0
34
TypeRegistry::~TypeRegistry(void);

2177 20 upcast_to_MemoryBase 0 12 2742 33 TypedObject::upcast_to_MemoryBase 0 1 873 37
upcast from TypedObject to MemoryBase
52
MemoryBase *TypedObject::upcast_to_MemoryBase(void);

2178 23 downcast_to_TypedObject 0 12 2648 35 MemoryBase::downcast_to_TypedObject 0 1 874 39
downcast from MemoryBase to TypedObject
55
TypedObject *MemoryBase::downcast_to_TypedObject(void);

2179 12 ~TypedObject 0 6 2742 25 TypedObject::~TypedObject 0 0 44
// A virtual destructor is just a good idea.
40
virtual TypedObject::~TypedObject(void);

2180 8 get_type 0 6 2742 21 TypedObject::get_type 0 1 868 154
// Derived classes should override this function to return get_class_type().

// Derived classes should override this function to return get_class_type().
57
virtual TypeHandle TypedObject::get_type(void) const = 0;

2181 14 get_type_index 0 4 2742 27 TypedObject::get_type_index 0 1 869 180
/**
 * Returns the internal index number associated with this object's TypeHandle,
 * a unique number for each different type.  This is equivalent to
 * get_type().get_index().
 */
51
inline int TypedObject::get_type_index(void) const;

2182 10 is_of_type 0 4 2742 23 TypedObject::is_of_type 0 1 870 84
/**
 * Returns true if the current object is or derives from the indicated type.
 */
61
inline bool TypedObject::is_of_type(TypeHandle handle) const;

2183 13 is_exact_type 0 4 2742 26 TypedObject::is_exact_type 0 1 871 76
/**
 * Returns true if the current object is the indicated type exactly.
 */
64
inline bool TypedObject::is_exact_type(TypeHandle handle) const;

2184 14 get_class_type 0 4 2742 27 TypedObject::get_class_type 0 1 872 0
52
static TypeHandle TypedObject::get_class_type(void);

2185 7 fstream 0 4 2743 16 fstream::fstream 0 1 875 0
23
fstream::fstream(void);

2186 5 close 0 4 2743 14 fstream::close 0 1 876 0
26
void fstream::close(void);

2187 8 ~fstream 0 4 2743 17 fstream::~fstream 0 0 0
24
fstream::~fstream(void);

2188 8 ifstream 0 4 2744 18 ifstream::ifstream 0 1 877 0
25
ifstream::ifstream(void);

2189 5 close 0 4 2744 15 ifstream::close 0 1 878 0
27
void ifstream::close(void);

2190 9 ~ifstream 0 4 2744 19 ifstream::~ifstream 0 0 0
26
ifstream::~ifstream(void);

2191 8 ofstream 0 4 2745 18 ofstream::ofstream 0 1 879 0
25
ofstream::ofstream(void);

2192 5 close 0 4 2745 15 ofstream::close 0 1 880 0
27
void ofstream::close(void);

2193 9 ~ofstream 0 4 2745 19 ofstream::~ofstream 0 0 0
26
ofstream::~ofstream(void);

2194 18 get_config_express 0 1 0 18 get_config_express 0 1 1324 92
// Returns the configure object for accessing config variables from a
// scripting language.
34
DConfig &get_config_express(void);

2195 20 upcast_to_MemoryBase 0 12 2746 36 ReferenceCount::upcast_to_MemoryBase 0 1 887 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

2196 26 downcast_to_ReferenceCount 0 12 2648 38 MemoryBase::downcast_to_ReferenceCount 0 1 888 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

2197 15 ~ReferenceCount 0 6 2746 31 ReferenceCount::~ReferenceCount 0 0 10
/**
 *
 */
53
virtual inline ReferenceCount::~ReferenceCount(void);

2198 13 get_ref_count 0 4 2746 29 ReferenceCount::get_ref_count 0 1 881 47
/**
 * Returns the current reference count.
 */
53
inline int ReferenceCount::get_ref_count(void) const;

2199 3 ref 0 4 2746 19 ReferenceCount::ref 0 1 882 538
/**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
44
inline void ReferenceCount::ref(void) const;

2200 5 unref 0 6 2746 21 ReferenceCount::unref 0 1 883 865
/**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
54
virtual inline bool ReferenceCount::unref(void) const;

2201 24 test_ref_count_integrity 0 4 2746 40 ReferenceCount::test_ref_count_integrity 0 1 884 135
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

2202 22 test_ref_count_nonzero 0 4 2746 38 ReferenceCount::test_ref_count_nonzero 0 1 885 144
/**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

2203 14 get_class_type 0 4 2746 30 ReferenceCount::get_class_type 0 1 886 0
55
static TypeHandle ReferenceCount::get_class_type(void);

2204 10 get_length 0 4 2747 18 Buffer::get_length 0 1 890 10
/**
 *
 */
42
inline int Buffer::get_length(void) const;

2205 6 Buffer 0 4 2747 14 Buffer::Buffer 0 1 889 10
/**
 *
 */
48
inline Buffer::Buffer(Buffer const &) = default;

2206 15 compress_string 0 1 0 15 compress_string 0 1 1325 0
78
std::string compress_string(std::string const &source, int compression_level);

2207 17 decompress_string 0 1 0 17 decompress_string 0 1 1326 0
57
std::string decompress_string(std::string const &source);

2208 13 compress_file 0 1 0 13 compress_file 0 1 1327 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

2209 15 decompress_file 0 1 0 15 decompress_file 0 1 1328 0
67
bool decompress_file(Filename const &source, Filename const &dest);

2210 15 compress_stream 0 1 0 15 compress_stream 0 1 1329 0
76
bool compress_stream(istream &source, ostream &dest, int compression_level);

2211 17 decompress_stream 0 1 0 17 decompress_stream 0 1 1330 0
55
bool decompress_stream(istream &source, ostream &dest);

2212 11 copy_stream 0 1 0 11 copy_stream 0 1 1331 0
49
bool copy_stream(istream &source, ostream &dest);

2213 9 add_level 0 4 2748 36 PStatCollectorForwardBase::add_level 0 1 893 0
63
inline void PStatCollectorForwardBase::add_level(double level);

2214 25 PStatCollectorForwardBase 0 4 2748 52 PStatCollectorForwardBase::PStatCollectorForwardBase 0 2 891 892 0
182
inline PStatCollectorForwardBase::PStatCollectorForwardBase(void) = default;
inline PStatCollectorForwardBase::PStatCollectorForwardBase(PStatCollectorForwardBase const &) = default;

2215 26 ~PStatCollectorForwardBase 0 4 2748 53 PStatCollectorForwardBase::~PStatCollectorForwardBase 0 0 0
60
PStatCollectorForwardBase::~PStatCollectorForwardBase(void);

2216 18 get_node_ref_count 0 4 2749 38 NodeReferenceCount::get_node_ref_count 0 1 894 47
/**
 * Returns the current reference count.
 */
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

2217 8 node_ref 0 4 2749 28 NodeReferenceCount::node_ref 0 1 895 107
/**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */
53
inline void NodeReferenceCount::node_ref(void) const;

2218 10 node_unref 0 4 2749 30 NodeReferenceCount::node_unref 0 1 896 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
55
inline bool NodeReferenceCount::node_unref(void) const;

2219 24 test_ref_count_integrity 0 4 2749 44 NodeReferenceCount::test_ref_count_integrity 0 1 897 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

2220 15 node_unref_only 0 4 2749 35 NodeReferenceCount::node_unref_only 0 1 898 186
/**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */
60
inline void NodeReferenceCount::node_unref_only(void) const;

2221 14 get_class_type 0 4 2749 34 NodeReferenceCount::get_class_type 0 1 899 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

2222 8 Datagram 0 4 2750 18 Datagram::Datagram 0 3 900 901 902 184
/**
 * Constructs an empty datagram.
 */

/**
 * Constructs a datagram from an existing block of data.
 */

/**
 * Constructs a datagram from an existing block of data.
 */

/**
 *
 */
196
inline Datagram::Datagram(void);
inline Datagram::Datagram(void const *data, std::size_t size);
inline Datagram::Datagram(std::string const &data);
inline Datagram::Datagram(Datagram const &copy);

2223 10 operator = 0 4 2750 20 Datagram::operator = 0 1 903 0
55
inline void Datagram::operator =(Datagram const &copy);

2224 5 clear 0 6 2750 15 Datagram::clear 0 1 904 90
/**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */
35
virtual void Datagram::clear(void);

2225 8 dump_hex 0 4 2750 18 Datagram::dump_hex 0 1 905 111
/**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */
69
void Datagram::dump_hex(ostream &out, unsigned int indent = 0) const;

2226 8 add_bool 0 4 2750 18 Datagram::add_bool 0 1 906 48
/**
 * Adds a boolean value to the datagram.
 */
43
inline void Datagram::add_bool(bool value);

2227 8 add_int8 0 4 2750 18 Datagram::add_int8 0 1 907 55
/**
 * Adds a signed 8-bit integer to the datagram.
 */
45
inline void Datagram::add_int8(int8_t value);

2228 9 add_uint8 0 4 2750 19 Datagram::add_uint8 0 1 908 58
/**
 * Adds an unsigned 8-bit integer to the datagram.
 */
47
inline void Datagram::add_uint8(uint8_t value);

2229 9 add_int16 0 4 2750 19 Datagram::add_int16 0 1 909 106
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the datagram.
 */
47
inline void Datagram::add_int16(int16_t value);

2230 9 add_int32 0 4 2750 19 Datagram::add_int32 0 1 910 56
/**
 * Adds a signed 32-bit integer to the datagram.
 */
47
inline void Datagram::add_int32(int32_t value);

2231 9 add_int64 0 4 2750 19 Datagram::add_int64 0 1 911 56
/**
 * Adds a signed 64-bit integer to the datagram.
 */
47
inline void Datagram::add_int64(int64_t value);

2232 10 add_uint16 0 4 2750 20 Datagram::add_uint16 0 1 912 59
/**
 * Adds an unsigned 16-bit integer to the datagram.
 */
49
inline void Datagram::add_uint16(uint16_t value);

2233 10 add_uint32 0 4 2750 20 Datagram::add_uint32 0 1 913 59
/**
 * Adds an unsigned 32-bit integer to the datagram.
 */
49
inline void Datagram::add_uint32(uint32_t value);

2234 10 add_uint64 0 4 2750 20 Datagram::add_uint64 0 1 914 59
/**
 * Adds an unsigned 64-bit integer to the datagram.
 */
49
inline void Datagram::add_uint64(uint64_t value);

2235 11 add_float32 0 4 2750 21 Datagram::add_float32 0 1 915 197
/**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
52
inline void Datagram::add_float32(PN_float32 value);

2236 11 add_float64 0 4 2750 21 Datagram::add_float64 0 1 916 63
/**
 * Adds a 64-bit floating-point number to the datagram.
 */
52
inline void Datagram::add_float64(PN_float64 value);

2237 12 add_stdfloat 0 4 2750 22 Datagram::add_stdfloat 0 1 917 105
/**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

2238 12 add_be_int16 0 4 2750 22 Datagram::add_be_int16 0 1 918 136
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int16(int16_t value);

2239 12 add_be_int32 0 4 2750 22 Datagram::add_be_int32 0 1 919 67
/**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int32(int32_t value);

2240 12 add_be_int64 0 4 2750 22 Datagram::add_be_int64 0 1 920 67
/**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int64(int64_t value);

2241 13 add_be_uint16 0 4 2750 23 Datagram::add_be_uint16 0 1 921 70
/**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint16(uint16_t value);

2242 13 add_be_uint32 0 4 2750 23 Datagram::add_be_uint32 0 1 922 70
/**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint32(uint32_t value);

2243 13 add_be_uint64 0 4 2750 23 Datagram::add_be_uint64 0 1 923 70
/**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint64(uint64_t value);

2244 14 add_be_float32 0 4 2750 24 Datagram::add_be_float32 0 1 924 94
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */
55
inline void Datagram::add_be_float32(PN_float32 value);

2245 14 add_be_float64 0 4 2750 24 Datagram::add_be_float64 0 1 925 74
/**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */
55
inline void Datagram::add_be_float64(PN_float64 value);

2246 10 add_string 0 4 2750 20 Datagram::add_string 0 1 926 109
/**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */
57
inline void Datagram::add_string(std::string const &str);

2247 12 add_string32 0 4 2750 22 Datagram::add_string32 0 1 927 116
/**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */
59
inline void Datagram::add_string32(std::string const &str);

2248 12 add_z_string 0 4 2750 22 Datagram::add_z_string 0 1 928 86
/**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */
52
inline void Datagram::add_z_string(std::string str);

2249 16 add_fixed_string 0 4 2750 26 Datagram::add_fixed_string 0 1 929 238
/**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
81
inline void Datagram::add_fixed_string(std::string const &str, std::size_t size);

2250 11 add_wstring 0 4 2750 21 Datagram::add_wstring 0 1 930 58
/**
 * Adds a variable-length wstring to the datagram.
 */
52
void Datagram::add_wstring(std::wstring const &str);

2251 9 pad_bytes 0 4 2750 19 Datagram::pad_bytes 0 1 931 67
/**
 * Adds the indicated number of zero bytes to the datagram.
 */
43
void Datagram::pad_bytes(std::size_t size);

2252 11 append_data 0 4 2750 21 Datagram::append_data 0 1 932 132
/**
 * Appends some more raw data to the end of the datagram.
 */

/**
 * Appends some more raw data to the end of the datagram.
 */
123
void Datagram::append_data(void const *data, std::size_t size);
inline void Datagram::append_data(std::string const &data);

2253 6 assign 0 4 2750 16 Datagram::assign 0 0 65
/**
 * Replaces the datagram's data with the indicated block.
 */
58
void Datagram::assign(void const *data, std::size_t size);

2254 11 get_message 0 4 2750 21 Datagram::get_message 0 1 933 51
/**
 * Returns the datagram's data as a string.
 */
53
inline std::string Datagram::get_message(void) const;

2255 8 get_data 0 4 2750 18 Datagram::get_data 0 1 934 69
/**
 * Returns a pointer to the beginning of the datagram's data.
 */
50
inline void const *Datagram::get_data(void) const;

2256 10 get_length 0 4 2750 20 Datagram::get_length 0 1 935 55
/**
 * Returns the number of bytes in the datagram.
 */
52
inline std::size_t Datagram::get_length(void) const;

2257 9 set_array 0 4 2750 19 Datagram::set_array 0 1 936 199
/**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */
48
inline void Datagram::set_array(PTA_uchar data);

2258 10 copy_array 0 4 2750 20 Datagram::copy_array 0 1 937 237
/**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */
50
inline void Datagram::copy_array(CPTA_uchar data);

2259 9 get_array 0 4 2750 19 Datagram::get_array 0 1 938 70
/**
 * Returns a const pointer to the actual data in the Datagram.
 */
50
inline CPTA_uchar Datagram::get_array(void) const;

2260 12 modify_array 0 4 2750 22 Datagram::modify_array 0 1 939 75
/**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */
46
inline PTA_uchar Datagram::modify_array(void);

2261 19 set_stdfloat_double 0 4 2750 29 Datagram::set_stdfloat_double 0 1 940 343
/**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

2262 19 get_stdfloat_double 0 4 2750 29 Datagram::get_stdfloat_double 0 1 941 72
/**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */
54
inline bool Datagram::get_stdfloat_double(void) const;

2263 11 operator == 0 4 2750 21 Datagram::operator == 0 1 942 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

2264 11 operator != 0 4 2750 21 Datagram::operator != 0 1 943 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

2265 10 operator < 0 4 2750 20 Datagram::operator < 0 1 944 0
62
inline bool Datagram::operator <(Datagram const &other) const;

2266 6 output 0 4 2750 16 Datagram::output 0 1 945 67
/**
 * Write a string representation of this instance to <out>.
 */
42
void Datagram::output(ostream &out) const;

2267 5 write 0 4 2750 15 Datagram::write 0 1 946 67
/**
 * Write a string representation of this instance to <out>.
 */
66
void Datagram::write(ostream &out, unsigned int indent = 0) const;

2268 14 get_class_type 0 4 2750 24 Datagram::get_class_type 0 1 947 0
49
static TypeHandle Datagram::get_class_type(void);

2269 18 ~DatagramGenerator 0 6 2751 37 DatagramGenerator::~DatagramGenerator 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
52
virtual DatagramGenerator::~DatagramGenerator(void);

2270 12 get_datagram 0 6 2751 31 DatagramGenerator::get_datagram 0 1 948 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

2271 13 save_datagram 0 6 2751 32 DatagramGenerator::save_datagram 0 1 949 391
/**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

2272 6 is_eof 0 6 2751 25 DatagramGenerator::is_eof 0 1 950 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

2273 8 is_error 0 6 2751 27 DatagramGenerator::is_error 0 1 951 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

2274 12 get_filename 0 6 2751 31 DatagramGenerator::get_filename 0 1 952 159
/**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */
62
virtual Filename const &DatagramGenerator::get_filename(void);

2275 13 get_timestamp 0 6 2751 32 DatagramGenerator::get_timestamp 0 1 953 138
/**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

2276 8 get_file 0 6 2751 27 DatagramGenerator::get_file 0 1 954 156
/**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */
63
virtual FileReference const *DatagramGenerator::get_file(void);

2277 9 get_vfile 0 6 2751 28 DatagramGenerator::get_vfile 0 1 955 153
/**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

2278 12 get_file_pos 0 6 2751 31 DatagramGenerator::get_file_pos 0 1 956 327
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */
56
virtual streamoff DatagramGenerator::get_file_pos(void);

2279 16 DatagramIterator 0 4 2752 34 DatagramIterator::DatagramIterator 0 3 957 958 959 22
/**
 *
 */

/**
 *
 */
220
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, std::size_t offset = 0);
inline DatagramIterator::DatagramIterator(DatagramIterator const &) = default;

2280 8 get_bool 0 4 2752 26 DatagramIterator::get_bool 0 1 960 36
/**
 * Extracts a boolean value.
 */
45
inline bool DatagramIterator::get_bool(void);

2281 8 get_int8 0 4 2752 26 DatagramIterator::get_int8 0 1 961 43
/**
 * Extracts a signed 8-bit integer.
 */
47
inline int8_t DatagramIterator::get_int8(void);

2282 9 get_uint8 0 4 2752 27 DatagramIterator::get_uint8 0 1 962 46
/**
 * Extracts an unsigned 8-bit integer.
 */
49
inline uint8_t DatagramIterator::get_uint8(void);

2283 9 get_int16 0 4 2752 27 DatagramIterator::get_int16 0 1 963 44
/**
 * Extracts a signed 16-bit integer.
 */
49
inline int16_t DatagramIterator::get_int16(void);

2284 9 get_int32 0 4 2752 27 DatagramIterator::get_int32 0 1 964 44
/**
 * Extracts a signed 32-bit integer.
 */
49
inline int32_t DatagramIterator::get_int32(void);

2285 9 get_int64 0 4 2752 27 DatagramIterator::get_int64 0 1 965 44
/**
 * Extracts a signed 64-bit integer.
 */
49
inline int64_t DatagramIterator::get_int64(void);

2286 10 get_uint16 0 4 2752 28 DatagramIterator::get_uint16 0 1 966 47
/**
 * Extracts an unsigned 16-bit integer.
 */
51
inline uint16_t DatagramIterator::get_uint16(void);

2287 10 get_uint32 0 4 2752 28 DatagramIterator::get_uint32 0 1 967 47
/**
 * Extracts an unsigned 32-bit integer.
 */
51
inline uint32_t DatagramIterator::get_uint32(void);

2288 10 get_uint64 0 4 2752 28 DatagramIterator::get_uint64 0 1 968 47
/**
 * Extracts an unsigned 64-bit integer.
 */
51
inline uint64_t DatagramIterator::get_uint64(void);

2289 11 get_float32 0 4 2752 29 DatagramIterator::get_float32 0 1 969 68
/**
 * Extracts a 32-bit single-precision floating-point number.
 */
54
inline PN_float32 DatagramIterator::get_float32(void);

2290 11 get_float64 0 4 2752 29 DatagramIterator::get_float64 0 1 970 51
/**
 * Extracts a 64-bit floating-point number.
 */
54
inline PN_float64 DatagramIterator::get_float64(void);

2291 12 get_stdfloat 0 4 2752 30 DatagramIterator::get_stdfloat 0 1 971 119
/**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

2292 12 get_be_int16 0 4 2752 30 DatagramIterator::get_be_int16 0 1 972 55
/**
 * Extracts a signed 16-bit big-endian integer.
 */
52
inline int16_t DatagramIterator::get_be_int16(void);

2293 12 get_be_int32 0 4 2752 30 DatagramIterator::get_be_int32 0 1 973 55
/**
 * Extracts a signed 32-bit big-endian integer.
 */
52
inline int32_t DatagramIterator::get_be_int32(void);

2294 12 get_be_int64 0 4 2752 30 DatagramIterator::get_be_int64 0 1 974 55
/**
 * Extracts a signed 64-bit big-endian integer.
 */
52
inline int64_t DatagramIterator::get_be_int64(void);

2295 13 get_be_uint16 0 4 2752 31 DatagramIterator::get_be_uint16 0 1 975 58
/**
 * Extracts an unsigned 16-bit big-endian integer.
 */
54
inline uint16_t DatagramIterator::get_be_uint16(void);

2296 13 get_be_uint32 0 4 2752 31 DatagramIterator::get_be_uint32 0 1 976 58
/**
 * Extracts an unsigned 32-bit big-endian integer.
 */
54
inline uint32_t DatagramIterator::get_be_uint32(void);

2297 13 get_be_uint64 0 4 2752 31 DatagramIterator::get_be_uint64 0 1 977 58
/**
 * Extracts an unsigned 64-bit big-endian integer.
 */
54
inline uint64_t DatagramIterator::get_be_uint64(void);

2298 14 get_be_float32 0 4 2752 32 DatagramIterator::get_be_float32 0 1 978 79
/**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */
57
inline PN_float32 DatagramIterator::get_be_float32(void);

2299 14 get_be_float64 0 4 2752 32 DatagramIterator::get_be_float64 0 1 979 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
57
inline PN_float64 DatagramIterator::get_be_float64(void);

2300 10 get_string 0 4 2752 28 DatagramIterator::get_string 0 1 980 45
/**
 * Extracts a variable-length string.
 */
47
std::string DatagramIterator::get_string(void);

2301 12 get_string32 0 4 2752 30 DatagramIterator::get_string32 0 1 981 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
49
std::string DatagramIterator::get_string32(void);

2302 12 get_z_string 0 4 2752 30 DatagramIterator::get_z_string 0 1 982 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
49
std::string DatagramIterator::get_z_string(void);

2303 16 get_fixed_string 0 4 2752 34 DatagramIterator::get_fixed_string 0 1 983 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
65
std::string DatagramIterator::get_fixed_string(std::size_t size);

2304 11 get_wstring 0 4 2752 29 DatagramIterator::get_wstring 0 1 984 75
/**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */
49
std::wstring DatagramIterator::get_wstring(void);

2305 10 skip_bytes 0 4 2752 28 DatagramIterator::skip_bytes 0 1 985 68
/**
 * Skips over the indicated number of bytes in the datagram.
 */
59
inline void DatagramIterator::skip_bytes(std::size_t size);

2306 13 extract_bytes 0 4 2752 31 DatagramIterator::extract_bytes 0 1 986 346
/**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */

/**
 * Extracts the indicated number of bytes in the datagram into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */
146
std::string DatagramIterator::extract_bytes(std::size_t size);
std::size_t DatagramIterator::extract_bytes(unsigned char *into, std::size_t size);

2307 19 get_remaining_bytes 0 4 2752 37 DatagramIterator::get_remaining_bytes 0 1 987 115
/**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */
69
inline std::string DatagramIterator::get_remaining_bytes(void) const;

2308 18 get_remaining_size 0 4 2752 36 DatagramIterator::get_remaining_size 0 1 988 49
/**
 * Return the bytes left in the datagram.
 */
68
inline std::size_t DatagramIterator::get_remaining_size(void) const;

2309 12 get_datagram 0 4 2752 30 DatagramIterator::get_datagram 0 1 989 48
/**
 * Return the datagram of this iterator.
 */
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

2310 17 get_current_index 0 4 2752 35 DatagramIterator::get_current_index 0 1 990 100
/**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */
67
inline std::size_t DatagramIterator::get_current_index(void) const;

2311 6 output 0 4 2752 24 DatagramIterator::output 0 1 991 67
/**
 * Write a string representation of this instance to <out>.
 */
50
void DatagramIterator::output(ostream &out) const;

2312 5 write 0 4 2752 23 DatagramIterator::write 0 1 992 67
/**
 * Write a string representation of this instance to <out>.
 */
74
void DatagramIterator::write(ostream &out, unsigned int indent = 0) const;

2313 14 get_class_type 0 4 2752 32 DatagramIterator::get_class_type 0 1 993 0
57
static TypeHandle DatagramIterator::get_class_type(void);

2314 17 ~DatagramIterator 0 4 2752 35 DatagramIterator::~DatagramIterator 0 0 0
42
DatagramIterator::~DatagramIterator(void);

2315 13 ~DatagramSink 0 6 2753 27 DatagramSink::~DatagramSink 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
42
virtual DatagramSink::~DatagramSink(void);

2316 12 put_datagram 0 6 2753 26 DatagramSink::put_datagram 0 1 994 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

2317 13 copy_datagram 0 6 2753 27 DatagramSink::copy_datagram 0 2 995 996 713
/**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */

/**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

2318 8 is_error 0 6 2753 22 DatagramSink::is_error 0 1 997 0
46
virtual bool DatagramSink::is_error(void) = 0;

2319 5 flush 0 6 2753 19 DatagramSink::flush 0 1 998 0
43
virtual void DatagramSink::flush(void) = 0;

2320 12 get_filename 0 6 2753 26 DatagramSink::get_filename 0 1 999 159
/**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */
57
virtual Filename const &DatagramSink::get_filename(void);

2321 8 get_file 0 6 2753 22 DatagramSink::get_file 0 1 1000 152
/**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */
58
virtual FileReference const *DatagramSink::get_file(void);

2322 12 get_file_pos 0 6 2753 26 DatagramSink::get_file_pos 0 1 1001 322
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */
51
virtual streamoff DatagramSink::get_file_pos(void);

2323 14 encrypt_string 0 1 0 14 encrypt_string 0 1 1332 0
171
std::string encrypt_string(std::string const &source, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2324 14 decrypt_string 0 1 0 14 decrypt_string 0 1 1333 0
83
std::string decrypt_string(std::string const &source, std::string const &password);

2325 12 encrypt_file 0 1 0 12 encrypt_file 0 1 1334 0
181
bool encrypt_file(Filename const &source, Filename const &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2326 12 decrypt_file 0 1 0 12 decrypt_file 0 1 1335 0
93
bool decrypt_file(Filename const &source, Filename const &dest, std::string const &password);

2327 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 1336 0
169
bool encrypt_stream(istream &source, ostream &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2328 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 1337 0
81
bool decrypt_stream(istream &source, ostream &dest, std::string const &password);

2329 13 error_to_text 0 1 0 13 error_to_text 0 1 1338 10
/**
 *
 */
45
std::string error_to_text(ErrorUtilCode err);

2330 15 get_write_error 0 1 0 15 get_write_error 0 1 1339 0
26
int get_write_error(void);

2331 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 1340 10
/**
 *
 */
38
std::string handle_socket_error(void);

2332 17 get_network_error 0 1 0 17 get_network_error 0 1 1341 0
28
int get_network_error(void);

2333 21 upcast_to_TypedObject 0 12 2755 42 TypedReferenceCount::upcast_to_TypedObject 0 1 1003 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

2334 31 downcast_to_TypedReferenceCount 0 12 2742 44 TypedObject::downcast_to_TypedReferenceCount 0 1 1004 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

2335 24 upcast_to_ReferenceCount 0 12 2755 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 1005 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

2336 31 downcast_to_TypedReferenceCount 0 12 2746 47 ReferenceCount::downcast_to_TypedReferenceCount 0 1 1006 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

2337 14 get_class_type 0 4 2755 35 TypedReferenceCount::get_class_type 0 1 1002 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

2338 20 ~TypedReferenceCount 0 4 2755 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

2339 13 FileReference 0 4 2756 28 FileReference::FileReference 0 2 1007 1008 10
/**
 *
 */
132
inline FileReference::FileReference(Filename const &filename);
inline FileReference::FileReference(FileReference const &) = default;

2340 12 get_filename 0 4 2756 27 FileReference::get_filename 0 1 1009 49
/**
 * Returns the filename of the reference.
 */
63
inline Filename const &FileReference::get_filename(void) const;

2341 14 get_class_type 0 4 2756 29 FileReference::get_class_type 0 1 1010 0
54
static TypeHandle FileReference::get_class_type(void);

2342 14 ~FileReference 0 4 2756 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

2343 7 Ramfile 0 4 2757 16 Ramfile::Ramfile 0 2 1011 1012 10
/**
 *
 */
82
inline Ramfile::Ramfile(void);
inline Ramfile::Ramfile(Ramfile const &) = default;

2344 4 seek 0 4 2757 13 Ramfile::seek 0 1 1013 130
/**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */
43
inline void Ramfile::seek(std::size_t pos);

2345 4 tell 0 4 2757 13 Ramfile::tell 0 1 1014 106
/**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */
45
inline std::size_t Ramfile::tell(void) const;

2346 4 read 0 4 2757 13 Ramfile::read 0 1 1015 319
/**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */
44
PyObject *Ramfile::read(std::size_t length);

2347 8 readline 0 4 2757 17 Ramfile::readline 0 1 1016 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */
34
PyObject *Ramfile::readline(void);

2348 9 readlines 0 4 2757 18 Ramfile::readlines 0 1 1017 0
35
PyObject *Ramfile::readlines(void);

2349 8 get_data 0 4 2757 17 Ramfile::get_data 0 1 1018 101
/**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */
40
PyObject *Ramfile::get_data(void) const;

2350 13 get_data_size 0 4 2757 22 Ramfile::get_data_size 0 1 1019 58
/**
 * Returns the size of the entire buffer contents.
 */
54
inline std::size_t Ramfile::get_data_size(void) const;

2351 5 clear 0 4 2757 14 Ramfile::clear 0 1 1020 47
/**
 * Empties the current buffer contents.
 */
33
inline void Ramfile::clear(void);

2352 8 ~Ramfile 0 4 2757 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

2353 7 HashVal 0 4 2758 16 HashVal::HashVal 0 2 1021 1022 22
/**
 *
 */

/**
 *
 */
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

2354 10 operator = 0 4 2758 19 HashVal::operator = 0 1 1023 0
53
inline void HashVal::operator =(HashVal const &copy);

2355 11 operator == 0 4 2758 20 HashVal::operator == 0 1 1024 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

2356 11 operator != 0 4 2758 20 HashVal::operator != 0 1 1025 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

2357 10 operator < 0 4 2758 19 HashVal::operator < 0 1 1026 0
60
inline bool HashVal::operator <(HashVal const &other) const;

2358 10 compare_to 0 4 2758 19 HashVal::compare_to 0 1 1027 10
/**
 *
 */
59
inline int HashVal::compare_to(HashVal const &other) const;

2359 10 merge_with 0 4 2758 19 HashVal::merge_with 0 1 1028 86
/**
 * Generates a new HashVal representing the xor of this one and the other one.
 */
54
inline void HashVal::merge_with(HashVal const &other);

2360 10 output_dec 0 4 2758 19 HashVal::output_dec 0 1 1029 65
/**
 * Outputs the HashVal as four unsigned decimal integers.
 */
52
inline void HashVal::output_dec(ostream &out) const;

2361 9 input_dec 0 4 2758 18 HashVal::input_dec 0 1 1030 64
/**
 * Inputs the HashVal as four unsigned decimal integers.
 */
44
inline void HashVal::input_dec(istream &in);

2362 10 output_hex 0 4 2758 19 HashVal::output_hex 0 1 1031 64
/**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */
45
void HashVal::output_hex(ostream &out) const;

2363 9 input_hex 0 4 2758 18 HashVal::input_hex 0 1 1032 63
/**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */
37
void HashVal::input_hex(istream &in);

2364 13 output_binary 0 4 2758 22 HashVal::output_binary 0 1 1033 128
/**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */
48
void HashVal::output_binary(ostream &out) const;

2365 12 input_binary 0 4 2758 21 HashVal::input_binary 0 1 1034 125
/**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */
40
void HashVal::input_binary(istream &in);

2366 6 output 0 4 2758 15 HashVal::output 0 1 1035 10
/**
 *
 */
48
inline void HashVal::output(ostream &out) const;

2367 6 as_dec 0 4 2758 15 HashVal::as_dec 0 1 1036 69
/**
 * Returns the HashVal as a string with four decimal numbers.
 */
40
std::string HashVal::as_dec(void) const;

2368 12 set_from_dec 0 4 2758 21 HashVal::set_from_dec 0 1 1037 112
/**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */
52
bool HashVal::set_from_dec(std::string const &text);

2369 6 as_hex 0 4 2758 15 HashVal::as_hex 0 1 1038 63
/**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */
40
std::string HashVal::as_hex(void) const;

2370 12 set_from_hex 0 4 2758 21 HashVal::set_from_hex 0 1 1039 111
/**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */
52
bool HashVal::set_from_hex(std::string const &text);

2371 6 as_bin 0 4 2758 15 HashVal::as_bin 0 1 1040 58
/**
 * Returns the HashVal as a 16-byte binary string.
 */
40
std::string HashVal::as_bin(void) const;

2372 12 set_from_bin 0 4 2758 21 HashVal::set_from_bin 0 1 1041 106
/**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */
52
bool HashVal::set_from_bin(std::string const &text);

2373 14 write_datagram 0 4 2758 23 HashVal::write_datagram 0 1 1042 10
/**
 *
 */
65
inline void HashVal::write_datagram(Datagram &destination) const;

2374 13 read_datagram 0 4 2758 22 HashVal::read_datagram 0 1 1043 10
/**
 *
 */
61
inline void HashVal::read_datagram(DatagramIterator &source);

2375 12 write_stream 0 4 2758 21 HashVal::write_stream 0 1 1044 10
/**
 *
 */
67
inline void HashVal::write_stream(StreamWriter &destination) const;

2376 11 read_stream 0 4 2758 20 HashVal::read_stream 0 1 1045 10
/**
 *
 */
55
inline void HashVal::read_stream(StreamReader &source);

2377 9 hash_file 0 4 2758 18 HashVal::hash_file 0 1 1046 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
50
bool HashVal::hash_file(Filename const &filename);

2378 11 hash_stream 0 4 2758 20 HashVal::hash_stream 0 1 1047 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
43
bool HashVal::hash_stream(istream &stream);

2379 12 hash_ramfile 0 4 2758 21 HashVal::hash_ramfile 0 1 1048 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

2380 11 hash_string 0 4 2758 20 HashVal::hash_string 0 1 1049 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_string(std::string const &data);

2381 10 hash_bytes 0 4 2758 19 HashVal::hash_bytes 0 1 1050 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
70
inline void HashVal::hash_bytes(pvector< unsigned char > const &data);

2382 11 hash_buffer 0 4 2758 20 HashVal::hash_buffer 0 1 1051 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
void HashVal::hash_buffer(char const *buffer, int length);

2383 8 ~HashVal 0 4 2758 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

2384 10 ISubStream 0 4 2759 22 ISubStream::ISubStream 0 2 1052 1053 22
/**
 *
 */

/**
 *
 */
123
inline ISubStream::ISubStream(void);
inline ISubStream::ISubStream(IStreamWrapper *source, streamoff start, streamoff end);

2385 4 open 0 4 2759 16 ISubStream::open 0 1 1054 391
/**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */
92
inline ISubStream &ISubStream::open(IStreamWrapper *source, streamoff start, streamoff end);

2386 5 close 0 4 2759 17 ISubStream::close 0 1 1055 92
/**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */
43
inline ISubStream &ISubStream::close(void);

2387 11 ~ISubStream 0 4 2759 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

2388 10 OSubStream 0 4 2760 22 OSubStream::OSubStream 0 2 1056 1057 22
/**
 *
 */

/**
 *
 */
142
inline OSubStream::OSubStream(void);
inline OSubStream::OSubStream(OStreamWrapper *dest, streamoff start, streamoff end, bool append = false);

2389 4 open 0 4 2760 16 OSubStream::open 0 1 1058 383
/**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */
111
inline OSubStream &OSubStream::open(OStreamWrapper *dest, streamoff start, streamoff end, bool append = false);

2390 5 close 0 4 2760 17 OSubStream::close 0 1 1059 90
/**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */
43
inline OSubStream &OSubStream::close(void);

2391 11 ~OSubStream 0 4 2760 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

2392 9 SubStream 0 4 2761 20 SubStream::SubStream 0 2 1060 1061 22
/**
 *
 */

/**
 *
 */
139
inline SubStream::SubStream(void);
inline SubStream::SubStream(StreamWrapper *nested, streamoff start, streamoff end, bool append = false);

2393 4 open 0 4 2761 15 SubStream::open 0 1 1062 278
/**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */
110
inline SubStream &SubStream::open(StreamWrapper *nested, streamoff start, streamoff end, bool append = false);

2394 5 close 0 4 2761 16 SubStream::close 0 1 1063 92
/**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */
41
inline SubStream &SubStream::close(void);

2395 10 ~SubStream 0 4 2761 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

2396 9 Multifile 0 4 2762 20 Multifile::Multifile 0 1 1064 52
/**
 *
 */

/**
 * Don't try to copy Multifiles.
 */
27
Multifile::Multifile(void);

2397 9 open_read 0 4 2762 20 Multifile::open_read 0 2 1065 1066 687
/**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
204
bool Multifile::open_read(Filename const &multifile_name, streamoff const &offset = 0);
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = false, streamoff const &offset = 0);

2398 10 open_write 0 4 2762 21 Multifile::open_write 0 2 1067 1068 755
/**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
141
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(ostream *multifile_stream, bool owns_pointer = false);

2399 15 open_read_write 0 4 2762 26 Multifile::open_read_write 0 2 1069 1070 727
/**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
152
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(iostream *multifile_stream, bool owns_pointer = false);

2400 5 close 0 4 2762 16 Multifile::close 0 1 1071 169
/**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
28
void Multifile::close(void);

2401 18 get_multifile_name 0 4 2762 29 Multifile::get_multifile_name 0 1 1072 69
/**
 * Returns the filename of the Multifile, if it is available.
 */
65
inline Filename const &Multifile::get_multifile_name(void) const;

2402 18 set_multifile_name 0 4 2762 29 Multifile::set_multifile_name 0 1 1073 209
/**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

2403 13 is_read_valid 0 4 2762 24 Multifile::is_read_valid 0 1 1074 154
/**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
49
inline bool Multifile::is_read_valid(void) const;

2404 14 is_write_valid 0 4 2762 25 Multifile::is_write_valid 0 1 1075 162
/**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */
50
inline bool Multifile::is_write_valid(void) const;

2405 12 needs_repack 0 4 2762 23 Multifile::needs_repack 0 1 1076 118
/**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */
48
inline bool Multifile::needs_repack(void) const;

2406 13 get_timestamp 0 4 2762 24 Multifile::get_timestamp 0 1 1077 299
/**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */
51
inline time_t Multifile::get_timestamp(void) const;

2407 20 set_record_timestamp 0 4 2762 31 Multifile::set_record_timestamp 0 1 1078 529
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

2408 20 get_record_timestamp 0 4 2762 31 Multifile::get_record_timestamp 0 1 1079 137
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */
56
inline bool Multifile::get_record_timestamp(void) const;

2409 16 set_scale_factor 0 4 2762 27 Multifile::set_scale_factor 0 1 1080 782
/**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */
59
void Multifile::set_scale_factor(std::size_t scale_factor);

2410 16 get_scale_factor 0 4 2762 27 Multifile::get_scale_factor 0 1 1081 92
/**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */
59
inline std::size_t Multifile::get_scale_factor(void) const;

2411 19 set_encryption_flag 0 4 2762 30 Multifile::set_encryption_flag 0 1 1082 461
/**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */
54
inline void Multifile::set_encryption_flag(bool flag);

2412 19 get_encryption_flag 0 4 2762 30 Multifile::get_encryption_flag 0 1 1083 163
/**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */
55
inline bool Multifile::get_encryption_flag(void) const;

2413 23 set_encryption_password 0 4 2762 34 Multifile::set_encryption_password 0 1 1084 369
/**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */
87
inline void Multifile::set_encryption_password(std::string const &encryption_password);

2414 23 get_encryption_password 0 4 2762 34 Multifile::get_encryption_password 0 1 1085 141
/**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */
73
inline std::string const &Multifile::get_encryption_password(void) const;

2415 24 set_encryption_algorithm 0 4 2762 35 Multifile::set_encryption_algorithm 0 1 1086 659
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */
89
inline void Multifile::set_encryption_algorithm(std::string const &encryption_algorithm);

2416 24 get_encryption_algorithm 0 4 2762 35 Multifile::get_encryption_algorithm 0 1 1087 96
/**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */
74
inline std::string const &Multifile::get_encryption_algorithm(void) const;

2417 25 set_encryption_key_length 0 4 2762 36 Multifile::set_encryption_key_length 0 1 1088 611
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

2418 25 get_encryption_key_length 0 4 2762 36 Multifile::get_encryption_key_length 0 1 1089 108
/**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */
60
inline int Multifile::get_encryption_key_length(void) const;

2419 30 set_encryption_iteration_count 0 4 2762 41 Multifile::set_encryption_iteration_count 0 1 1090 740
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

2420 30 get_encryption_iteration_count 0 4 2762 41 Multifile::get_encryption_iteration_count 0 1 1091 84
/**
 * Returns the value that was specified by set_encryption_iteration_count().
 */
65
inline int Multifile::get_encryption_iteration_count(void) const;

2421 11 add_subfile 0 4 2762 22 Multifile::add_subfile 0 2 1092 1093 1397
/**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
232
std::string Multifile::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string Multifile::add_subfile(std::string const &subfile_name, istream *subfile_data, int compression_level);

2422 14 update_subfile 0 4 2762 25 Multifile::update_subfile 0 1 1094 451
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
120
std::string Multifile::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

2423 13 add_signature 0 4 2762 24 Multifile::add_signature 0 2 1095 1096 3062
/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The signature certificate is the first certificate on the CertChain object.
 * Any remaining certificates are support certificates to authenticate the
 * first one.
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 */
230
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, std::string const &password = "");
bool Multifile::add_signature(Filename const &composite, std::string const &password = "");

2424 18 get_num_signatures 0 4 2762 29 Multifile::get_num_signatures 0 1 1097 555
/**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */
46
int Multifile::get_num_signatures(void) const;

2425 26 get_signature_subject_name 0 4 2762 37 Multifile::get_signature_subject_name 0 1 1098 352
/**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */
63
std::string Multifile::get_signature_subject_name(int n) const;

2426 27 get_signature_friendly_name 0 4 2762 38 Multifile::get_signature_friendly_name 0 1 1099 299
/**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */
64
std::string Multifile::get_signature_friendly_name(int n) const;

2427 24 get_signature_public_key 0 4 2762 35 Multifile::get_signature_public_key 0 1 1100 379
/**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */
61
std::string Multifile::get_signature_public_key(int n) const;

2428 27 print_signature_certificate 0 4 2762 38 Multifile::print_signature_certificate 0 1 1101 158
/**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */
71
void Multifile::print_signature_certificate(int n, ostream &out) const;

2429 27 write_signature_certificate 0 4 2762 38 Multifile::write_signature_certificate 0 1 1102 140
/**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */
71
void Multifile::write_signature_certificate(int n, ostream &out) const;

2430 30 validate_signature_certificate 0 4 2762 41 Multifile::validate_signature_certificate 0 1 1103 289
/**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */
59
int Multifile::validate_signature_certificate(int n) const;

2431 5 flush 0 4 2762 16 Multifile::flush 0 1 1104 691
/**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
28
bool Multifile::flush(void);

2432 6 repack 0 4 2762 17 Multifile::repack 0 1 1105 587
/**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */
29
bool Multifile::repack(void);

2433 16 get_num_subfiles 0 4 2762 27 Multifile::get_num_subfiles 0 1 1106 169
/**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
44
int Multifile::get_num_subfiles(void) const;

2434 12 find_subfile 0 4 2762 23 Multifile::find_subfile 0 1 1107 127
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */
67
int Multifile::find_subfile(std::string const &subfile_name) const;

2435 13 has_directory 0 4 2762 24 Multifile::has_directory 0 1 1108 203
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */
69
bool Multifile::has_directory(std::string const &subfile_name) const;

2436 14 scan_directory 0 4 2762 25 Multifile::scan_directory 0 1 1109 420
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
95
bool Multifile::scan_directory(vector_string &contents, std::string const &subfile_name) const;

2437 14 remove_subfile 0 4 2762 25 Multifile::remove_subfile 0 2 1110 1111 912
/**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */
114
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(std::string const &subfile_name);

2438 16 get_subfile_name 0 4 2762 27 Multifile::get_subfile_name 0 1 1112 47
/**
 * Returns the name of the nth subfile.
 */
64
std::string const &Multifile::get_subfile_name(int index) const;

2439 18 get_subfile_length 0 4 2762 29 Multifile::get_subfile_length 0 1 1113 170
/**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */
59
std::size_t Multifile::get_subfile_length(int index) const;

2440 21 get_subfile_timestamp 0 4 2762 32 Multifile::get_subfile_timestamp 0 1 1114 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */
57
time_t Multifile::get_subfile_timestamp(int index) const;

2441 21 is_subfile_compressed 0 4 2762 32 Multifile::is_subfile_compressed 0 1 1115 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
55
bool Multifile::is_subfile_compressed(int index) const;

2442 20 is_subfile_encrypted 0 4 2762 31 Multifile::is_subfile_encrypted 0 1 1116 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
54
bool Multifile::is_subfile_encrypted(int index) const;

2443 15 is_subfile_text 0 4 2762 26 Multifile::is_subfile_text 0 1 1117 343
/**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */
49
bool Multifile::is_subfile_text(int index) const;

2444 13 get_index_end 0 4 2762 24 Multifile::get_index_end 0 1 1118 371
/**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */
47
streamoff Multifile::get_index_end(void) const;

2445 26 get_subfile_internal_start 0 4 2762 37 Multifile::get_subfile_internal_start 0 1 1119 338
/**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
65
streamoff Multifile::get_subfile_internal_start(int index) const;

2446 27 get_subfile_internal_length 0 4 2762 38 Multifile::get_subfile_internal_length 0 1 1120 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
68
std::size_t Multifile::get_subfile_internal_length(int index) const;

2447 12 read_subfile 0 4 2762 23 Multifile::read_subfile 0 1 1121 247
/**
 * Returns a string that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
54
inline std::string Multifile::read_subfile(int index);

2448 17 open_read_subfile 0 4 2762 28 Multifile::open_read_subfile 0 1 1122 937
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
49
istream *Multifile::open_read_subfile(int index);

2449 18 close_read_subfile 0 4 2762 29 Multifile::close_read_subfile 0 1 1123 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
59
static void Multifile::close_read_subfile(istream *stream);

2450 15 extract_subfile 0 4 2762 26 Multifile::extract_subfile 0 1 1124 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
69
bool Multifile::extract_subfile(int index, Filename const &filename);

2451 18 extract_subfile_to 0 4 2762 29 Multifile::extract_subfile_to 0 1 1125 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
60
bool Multifile::extract_subfile_to(int index, ostream &out);

2452 15 compare_subfile 0 4 2762 26 Multifile::compare_subfile 0 1 1126 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
69
bool Multifile::compare_subfile(int index, Filename const &filename);

2453 6 output 0 4 2762 17 Multifile::output 0 1 1127 10
/**
 *
 */
43
void Multifile::output(ostream &out) const;

2454 2 ls 0 4 2762 13 Multifile::ls 0 1 1128 61
/**
 * Shows a list of all subfiles within the Multifile.
 */
48
void Multifile::ls(ostream &out = ::cout) const;

2455 16 get_magic_number 0 4 2762 27 Multifile::get_magic_number 0 1 1129 108
/**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */
60
static inline std::string Multifile::get_magic_number(void);

2456 17 set_header_prefix 0 4 2762 28 Multifile::set_header_prefix 0 1 1130 644
/**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */
68
void Multifile::set_header_prefix(std::string const &header_prefix);

2457 17 get_header_prefix 0 4 2762 28 Multifile::get_header_prefix 0 1 1131 113
/**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */
67
inline std::string const &Multifile::get_header_prefix(void) const;

2458 7 Namable 0 4 2763 16 Namable::Namable 0 2 1132 1133 10
/**
 *
 */
123
inline explicit Namable::Namable(std::string const &initial_name = "");
inline Namable::Namable(Namable const &) = default;

2459 8 set_name 0 4 2763 17 Namable::set_name 0 1 1134 10
/**
 *
 */
55
inline void Namable::set_name(std::string const &name);

2460 10 clear_name 0 4 2763 19 Namable::clear_name 0 1 1135 46
/**
 * Resets the Namable's name to empty.
 */
38
inline void Namable::clear_name(void);

2461 8 has_name 0 4 2763 17 Namable::has_name 0 1 1136 94
/**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */
42
inline bool Namable::has_name(void) const;

2462 8 get_name 0 4 2763 17 Namable::get_name 0 1 1137 10
/**
 *
 */
56
inline std::string const &Namable::get_name(void) const;

2463 6 output 0 4 2763 15 Namable::output 0 1 1138 251
// In the absence of any definition to the contrary, outputting a Namable
// will write out its name.

/**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */
48
inline void Namable::output(ostream &out) const;

2464 14 get_class_type 0 4 2763 23 Namable::get_class_type 0 1 1139 0
48
static TypeHandle Namable::get_class_type(void);

2465 8 ~Namable 0 4 2763 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

2466 18 clear_certificates 0 4 2764 34 OpenSSLWrapper::clear_certificates 0 1 1140 200
/**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */
46
void OpenSSLWrapper::clear_certificates(void);

2467 17 load_certificates 0 4 2764 33 OpenSSLWrapper::load_certificates 0 1 1141 436
/**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

2468 30 load_certificates_from_pem_ram 0 4 2764 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 1142 1143 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(std::string const &data);

2469 30 load_certificates_from_der_ram 0 4 2764 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 1144 1145 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(std::string const &data);

2470 14 get_x509_store 0 4 2764 30 OpenSSLWrapper::get_x509_store 0 1 1146 378
/**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

2471 17 notify_ssl_errors 0 4 2764 33 OpenSSLWrapper::notify_ssl_errors 0 1 1147 277
/**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */
45
void OpenSSLWrapper::notify_ssl_errors(void);

2472 23 notify_debug_ssl_errors 0 4 2764 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 1148 84
/**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

2473 14 get_global_ptr 0 4 2764 30 OpenSSLWrapper::get_global_ptr 0 1 1149 10
/**
 *
 */
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

2474 11 SubfileInfo 0 4 2765 24 SubfileInfo::SubfileInfo 0 4 1150 1151 1152 1153 46
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
283
inline SubfileInfo::SubfileInfo(void);
inline SubfileInfo::SubfileInfo(FileReference const *file, streamoff start, streamsize size);
inline SubfileInfo::SubfileInfo(Filename const &filename, streamoff start, streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

2475 10 operator = 0 4 2765 23 SubfileInfo::operator = 0 1 1154 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

2476 8 is_empty 0 4 2765 21 SubfileInfo::is_empty 0 1 1155 98
/**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */
46
inline bool SubfileInfo::is_empty(void) const;

2477 8 get_file 0 4 2765 21 SubfileInfo::get_file 0 1 1156 63
/**
 * Returns the FileReference that represents this file.
 */
62
inline FileReference const *SubfileInfo::get_file(void) const;

2478 12 get_filename 0 4 2765 25 SubfileInfo::get_filename 0 1 1157 38
/**
 * A shortcut to the filename.
 */
61
inline Filename const &SubfileInfo::get_filename(void) const;

2479 9 get_start 0 4 2765 22 SubfileInfo::get_start 0 1 1158 77
/**
 * Returns the offset within the file at which this file data begins.
 */
52
inline streamoff SubfileInfo::get_start(void) const;

2480 8 get_size 0 4 2765 21 SubfileInfo::get_size 0 1 1159 115
/**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */
52
inline streamsize SubfileInfo::get_size(void) const;

2481 6 output 0 4 2765 19 SubfileInfo::output 0 1 1160 10
/**
 *
 */
45
void SubfileInfo::output(ostream &out) const;

2482 12 ~SubfileInfo 0 4 2765 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

2483 15 get_file_system 0 6 2766 28 VirtualFile::get_file_system 0 1 1161 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

2484 12 get_filename 0 6 2766 25 VirtualFile::get_filename 0 1 1162 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

2485 21 get_original_filename 0 4 2766 34 VirtualFile::get_original_filename 0 1 1163 166
/**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */
70
inline Filename const &VirtualFile::get_original_filename(void) const;

2486 8 has_file 0 6 2766 21 VirtualFile::has_file 0 1 1164 61
/**
 * Returns true if this file exists, false otherwise.
 */
47
virtual bool VirtualFile::has_file(void) const;

2487 12 is_directory 0 6 2766 25 VirtualFile::is_directory 0 1 1165 117
/**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */
51
virtual bool VirtualFile::is_directory(void) const;

2488 15 is_regular_file 0 6 2766 28 VirtualFile::is_regular_file 0 1 1166 115
/**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */
54
virtual bool VirtualFile::is_regular_file(void) const;

2489 11 is_writable 0 6 2766 24 VirtualFile::is_writable 0 1 1167 153
/**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */
50
virtual bool VirtualFile::is_writable(void) const;

2490 11 delete_file 0 6 2766 24 VirtualFile::delete_file 0 1 1168 199
/**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */
44
virtual bool VirtualFile::delete_file(void);

2491 11 rename_file 0 6 2766 24 VirtualFile::rename_file 0 1 1169 589
/**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

2492 9 copy_file 0 6 2766 22 VirtualFile::copy_file 0 1 1170 123
/**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

2493 14 scan_directory 0 4 2766 27 VirtualFile::scan_directory 0 1 1171 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

2494 6 output 0 4 2766 19 VirtualFile::output 0 1 1172 10
/**
 *
 */
45
void VirtualFile::output(ostream &out) const;

2495 2 ls 0 4 2766 15 VirtualFile::ls 0 1 1173 66
/**
 * If the file represents a directory, lists its contents.
 */
50
void VirtualFile::ls(ostream &out = ::cout) const;

2496 6 ls_all 0 4 2766 19 VirtualFile::ls_all 0 1 1174 113
/**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */
54
void VirtualFile::ls_all(ostream &out = ::cout) const;

2497 9 read_file 0 4 2766 22 VirtualFile::read_file 0 1 1175 352
/**
 * Returns the entire contents of the file as a string.
 */

/**
 * Fills up the indicated string with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */

/**
 * Fills up the indicated pvector with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */
57
PyObject *VirtualFile::read_file(bool auto_unwrap) const;

2498 14 open_read_file 0 6 2766 27 VirtualFile::open_read_file 0 1 1176 179
/**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */
69
virtual istream *VirtualFile::open_read_file(bool auto_unwrap) const;

2499 15 close_read_file 0 6 2766 28 VirtualFile::close_read_file 0 1 1177 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
virtual void VirtualFile::close_read_file(istream *stream) const;

2500 19 was_read_successful 0 6 2766 32 VirtualFile::was_read_successful 0 1 1178 324
/**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */
58
virtual bool VirtualFile::was_read_successful(void) const;

2501 10 write_file 0 4 2766 23 VirtualFile::write_file 0 1 1179 197
/**
 * Writes the entire contents of the file as a string, if it is writable.
 */

/**
 * Writes the indicated data to the file, if it is writable.  Returns true on
 * success, false otherwise.
 */
66
PyObject *VirtualFile::write_file(PyObject *data, bool auto_wrap);

2502 15 open_write_file 0 6 2766 28 VirtualFile::open_write_file 0 1 1180 179
/**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
77
virtual ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

2503 16 open_append_file 0 6 2766 29 VirtualFile::open_append_file 0 1 1181 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
53
virtual ostream *VirtualFile::open_append_file(void);

2504 16 close_write_file 0 6 2766 29 VirtualFile::close_write_file 0 1 1182 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
60
virtual void VirtualFile::close_write_file(ostream *stream);

2505 20 open_read_write_file 0 6 2766 33 VirtualFile::open_read_write_file 0 1 1183 180
/**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
67
virtual iostream *VirtualFile::open_read_write_file(bool truncate);

2506 21 open_read_append_file 0 6 2766 34 VirtualFile::open_read_append_file 0 1 1184 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
59
virtual iostream *VirtualFile::open_read_append_file(void);

2507 21 close_read_write_file 0 6 2766 34 VirtualFile::close_read_write_file 0 1 1185 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
66
virtual void VirtualFile::close_read_write_file(iostream *stream);

2508 13 get_file_size 0 6 2766 26 VirtualFile::get_file_size 0 2 1186 1187 329
/**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */

/**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */
128
virtual streamsize VirtualFile::get_file_size(istream *stream) const;
virtual streamsize VirtualFile::get_file_size(void) const;

2509 13 get_timestamp 0 6 2766 26 VirtualFile::get_timestamp 0 1 1188 434
/**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */
54
virtual time_t VirtualFile::get_timestamp(void) const;

2510 15 get_system_info 0 6 2766 28 VirtualFile::get_system_info 0 1 1189 330
/**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

2511 14 get_class_type 0 4 2766 27 VirtualFile::get_class_type 0 1 1190 0
52
static TypeHandle VirtualFile::get_class_type(void);

2512 12 ~VirtualFile 0 4 2766 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

2513 14 get_class_type 0 4 2767 36 VirtualFileComposite::get_class_type 0 1 1191 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

2514 21 ~VirtualFileComposite 0 4 2767 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

2515 15 get_file_system 0 4 2768 33 VirtualFileMount::get_file_system 0 1 1192 68
/**
 * Returns the file system this mount object is attached to.
 */
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

2516 15 get_mount_point 0 4 2768 33 VirtualFileMount::get_mount_point 0 1 1193 161
/**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

2517 15 get_mount_flags 0 4 2768 33 VirtualFileMount::get_mount_flags 0 1 1194 100
/**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */
57
inline int VirtualFileMount::get_mount_flags(void) const;

2518 6 output 0 6 2768 24 VirtualFileMount::output 0 1 1195 10
/**
 *
 */
58
virtual void VirtualFileMount::output(ostream &out) const;

2519 5 write 0 6 2768 23 VirtualFileMount::write 0 1 1196 10
/**
 *
 */
57
virtual void VirtualFileMount::write(ostream &out) const;

2520 14 get_class_type 0 4 2768 32 VirtualFileMount::get_class_type 0 1 1197 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

2521 25 VirtualFileMountMultifile 0 4 2769 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 1198 10
/**
 *
 */
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

2522 13 get_multifile 0 4 2769 40 VirtualFileMountMultifile::get_multifile 0 1 1199 76
/**
 * Returns the Multifile pointer that this mount object is based on.
 */
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

2523 14 get_class_type 0 4 2769 41 VirtualFileMountMultifile::get_class_type 0 1 1200 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

2524 23 VirtualFileMountRamdisk 0 4 2770 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 1201 10
/**
 *
 */
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

2525 14 get_class_type 0 4 2770 39 VirtualFileMountRamdisk::get_class_type 0 1 1202 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

2526 24 ~VirtualFileMountRamdisk 0 4 2770 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

2527 22 VirtualFileMountSystem 0 4 2771 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 1203 10
/**
 *
 */
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

2528 21 get_physical_filename 0 4 2771 45 VirtualFileMountSystem::get_physical_filename 0 1 1204 112
/**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

2529 14 get_class_type 0 4 2771 38 VirtualFileMountSystem::get_class_type 0 1 1205 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

2530 23 ~VirtualFileMountSystem 0 4 2771 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

2531 9 get_mount 0 4 2772 28 VirtualFileSimple::get_mount 0 1 1206 69
/**
 * Returns the VirtualFileMount this file is associated with.
 */
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

2532 19 is_implicit_pz_file 0 4 2772 38 VirtualFileSimple::is_implicit_pz_file 0 1 1207 174
/**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

2533 14 get_class_type 0 4 2772 33 VirtualFileSimple::get_class_type 0 1 1208 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

2534 18 ~VirtualFileSimple 0 4 2772 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

2535 13 TemporaryFile 0 4 2773 28 TemporaryFile::TemporaryFile 0 2 1209 1210 10
/**
 *
 */
132
inline TemporaryFile::TemporaryFile(Filename const &filename);
inline TemporaryFile::TemporaryFile(TemporaryFile const &) = default;

2536 14 get_class_type 0 4 2773 29 TemporaryFile::get_class_type 0 1 1211 0
54
static TypeHandle TemporaryFile::get_class_type(void);

2537 17 IDecompressStream 0 4 2774 36 IDecompressStream::IDecompressStream 0 2 1212 1213 22
/**
 *
 */

/**
 *
 */
130
inline IDecompressStream::IDecompressStream(void);
inline IDecompressStream::IDecompressStream(istream *source, bool owns_source);

2538 4 open 0 4 2774 23 IDecompressStream::open 0 1 1214 10
/**
 *
 */
85
inline IDecompressStream &IDecompressStream::open(istream *source, bool owns_source);

2539 5 close 0 4 2774 24 IDecompressStream::close 0 1 1215 118
/**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */
57
inline IDecompressStream &IDecompressStream::close(void);

2540 18 ~IDecompressStream 0 4 2774 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

2541 15 OCompressStream 0 4 2775 32 OCompressStream::OCompressStream 0 2 1216 1217 22
/**
 *
 */

/**
 *
 */
145
inline OCompressStream::OCompressStream(void);
inline OCompressStream::OCompressStream(ostream *dest, bool owns_dest, int compression_level = 6);

2542 4 open 0 4 2775 21 OCompressStream::open 0 1 1218 10
/**
 *
 */
104
inline OCompressStream &OCompressStream::open(ostream *dest, bool owns_dest, int compression_level = 6);

2543 5 close 0 4 2775 22 OCompressStream::close 0 1 1219 114
/**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */
53
inline OCompressStream &OCompressStream::close(void);

2544 16 ~OCompressStream 0 4 2775 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

2545 13 get_num_files 0 4 2776 30 VirtualFileList::get_num_files 0 1 1221 51
/**
 * Returns the number of files in the list.
 */
62
inline std::size_t VirtualFileList::get_num_files(void) const;

2546 8 get_file 0 4 2776 25 VirtualFileList::get_file 0 1 1222 44
/**
 * Returns the nth file in the list.
 */
67
inline VirtualFile *VirtualFileList::get_file(std::size_t n) const;

2547 11 operator [] 0 4 2776 28 VirtualFileList::operator [] 0 1 1223 44
/**
 * Returns the nth file in the list.
 */
70
inline VirtualFile *VirtualFileList::operator [](std::size_t n) const;

2548 4 size 0 4 2776 21 VirtualFileList::size 0 1 1224 51
/**
 * Returns the number of files in the list.
 */
53
inline std::size_t VirtualFileList::size(void) const;

2549 11 operator += 0 4 2776 28 VirtualFileList::operator += 0 1 1225 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

2550 10 operator + 0 4 2776 27 VirtualFileList::operator + 0 1 1226 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

2551 15 VirtualFileList 0 4 2776 32 VirtualFileList::VirtualFileList 0 1 1220 10
/**
 *
 */
75
inline VirtualFileList::VirtualFileList(VirtualFileList const &) = default;

2552 17 VirtualFileSystem 0 4 2777 36 VirtualFileSystem::VirtualFileSystem 0 1 1227 10
/**
 *
 */
43
VirtualFileSystem::VirtualFileSystem(void);

2553 18 ~VirtualFileSystem 0 4 2777 37 VirtualFileSystem::~VirtualFileSystem 0 0 10
/**
 *
 */
44
VirtualFileSystem::~VirtualFileSystem(void);

2554 5 mount 0 4 2777 24 VirtualFileSystem::mount 0 3 1228 1229 1230 1288
/**
 * Mounts the indicated Multifile at the given mount point.
 */

/**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */

/**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function that the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */
328
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, std::string const &password = "");
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

2555 10 mount_loop 0 4 2777 29 VirtualFileSystem::mount_loop 0 1 1231 587
/**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */
143
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, std::string const &password = "");

2556 7 unmount 0 4 2777 26 VirtualFileSystem::unmount 0 3 1232 1233 1234 419
/**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */

/**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */
177
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

2557 13 unmount_point 0 4 2777 32 VirtualFileSystem::unmount_point 0 1 1235 136
/**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

2558 11 unmount_all 0 4 2777 30 VirtualFileSystem::unmount_all 0 1 1236 96
/**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */
41
int VirtualFileSystem::unmount_all(void);

2559 14 get_num_mounts 0 4 2777 33 VirtualFileSystem::get_num_mounts 0 1 1237 65
/**
 * Returns the number of individual mounts in the system.
 */
50
int VirtualFileSystem::get_num_mounts(void) const;

2560 9 get_mount 0 4 2777 28 VirtualFileSystem::get_mount 0 1 1238 47
/**
 * Returns the nth mount in the system.
 */
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

2561 5 clear 0 4 2780 40 PointerToBase< VirtualFileMount >::clear 0 1 1277 0
59
inline void PointerToBase< VirtualFileMount >::clear(void);

2562 6 output 0 4 2780 41 PointerToBase< VirtualFileMount >::output 0 1 1278 0
67
void PointerToBase< VirtualFileMount >::output(ostream &out) const;

2563 9 PointerTo 0 4 2779 40 PointerTo< VirtualFileMount >::PointerTo 0 3 1269 1270 1271 0
249
constexpr PointerTo< VirtualFileMount >::PointerTo(void) noexcept = default;
inline PointerTo< VirtualFileMount >::PointerTo(VirtualFileMount *ptr) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(PointerTo< VirtualFileMount > const &copy);

2564 1 p 0 4 2779 32 PointerTo< VirtualFileMount >::p 0 1 1272 289
// If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness.
82
constexpr VirtualFileMount *PointerTo< VirtualFileMount >::p(void) const noexcept;

2565 10 operator = 0 4 2779 41 PointerTo< VirtualFileMount >::operator = 0 2 1273 1274 0
227
inline PointerTo< VirtualFileMount > &PointerTo< VirtualFileMount >::operator =(VirtualFileMount *ptr);
inline PointerTo< VirtualFileMount > &PointerTo< VirtualFileMount >::operator =(PointerTo< VirtualFileMount > const &copy);

2566 7 is_null 0 4 2779 38 PointerTo< VirtualFileMount >::is_null 0 1 1275 0
63
inline bool PointerTo< VirtualFileMount >::is_null(void) const;

2567 5 clear 0 4 2779 36 PointerTo< VirtualFileMount >::clear 0 1 1276 0
55
inline void PointerTo< VirtualFileMount >::clear(void);

2568 10 ~PointerTo 0 4 2779 41 PointerTo< VirtualFileMount >::~PointerTo 0 0 0
48
PointerTo< VirtualFileMount >::~PointerTo(void);

2569 5 chdir 0 4 2777 24 VirtualFileSystem::chdir 0 1 1239 171
/**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

2570 7 get_cwd 0 4 2777 26 VirtualFileSystem::get_cwd 0 1 1240 60
/**
 * Returns the current directory name.  See chdir().
 */
48
Filename VirtualFileSystem::get_cwd(void) const;

2571 14 make_directory 0 4 2777 33 VirtualFileSystem::make_directory 0 1 1241 263
/**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */
65
bool VirtualFileSystem::make_directory(Filename const &filename);

2572 19 make_directory_full 0 4 2777 38 VirtualFileSystem::make_directory_full 0 1 1242 169
/**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

2573 8 get_file 0 4 2777 27 VirtualFileSystem::get_file 0 1 1243 537
/**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */
111
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = false) const;

2574 11 create_file 0 4 2777 30 VirtualFileSystem::create_file 0 1 1244 298
/**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

2575 9 find_file 0 4 2777 28 VirtualFileSystem::find_file 0 1 1245 173
/**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */
143
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = false) const;

2576 11 delete_file 0 4 2777 30 VirtualFileSystem::delete_file 0 1 1246 208
/**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */
62
bool VirtualFileSystem::delete_file(Filename const &filename);

2577 11 rename_file 0 4 2777 30 VirtualFileSystem::rename_file 0 1 1247 599
/**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

2578 9 copy_file 0 4 2777 28 VirtualFileSystem::copy_file 0 1 1248 131
/**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

2579 16 resolve_filename 0 4 2777 35 VirtualFileSystem::resolve_filename 0 1 1249 174
/**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */
147
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, std::string const &default_extension = string()) const;

2580 14 find_all_files 0 4 2777 33 VirtualFileSystem::find_all_files 0 1 1250 363
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

2581 6 exists 0 4 2777 25 VirtualFileSystem::exists 0 1 1251 71
/**
 * Convenience function; returns true if the named file exists.
 */
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

2582 12 is_directory 0 4 2777 31 VirtualFileSystem::is_directory 0 1 1252 93
/**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

2583 15 is_regular_file 0 4 2777 34 VirtualFileSystem::is_regular_file 0 1 1253 96
/**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

2584 14 scan_directory 0 4 2777 33 VirtualFileSystem::scan_directory 0 1 1254 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

2585 2 ls 0 4 2777 21 VirtualFileSystem::ls 0 1 1255 80
/**
 * Convenience function; lists the files within the indicated directory.
 */
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

2586 6 ls_all 0 4 2777 25 VirtualFileSystem::ls_all 0 1 1256 117
/**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

2587 5 write 0 4 2777 24 VirtualFileSystem::write 0 1 1257 75
/**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */
50
void VirtualFileSystem::write(ostream &out) const;

2588 14 get_global_ptr 0 4 2777 33 VirtualFileSystem::get_global_ptr 0 1 1258 423
/**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

2589 9 read_file 0 4 2777 28 VirtualFileSystem::read_file 0 1 1259 1244
/**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the string up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the pvector up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

2590 14 open_read_file 0 4 2777 33 VirtualFileSystem::open_read_file 0 1 1260 424
/**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
93
istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

2591 15 close_read_file 0 4 2777 34 VirtualFileSystem::close_read_file 0 1 1261 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
64
static void VirtualFileSystem::close_read_file(istream *stream);

2592 10 write_file 0 4 2777 29 VirtualFileSystem::write_file 0 1 1262 409
/**
 * Convenience function; writes the entire contents of the indicated file as a
 * string.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */

/**
 * Convenience function; writes the entire contents of the indicated file as a
 * block of data.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

2593 15 open_write_file 0 4 2777 34 VirtualFileSystem::open_write_file 0 1 1263 345
/**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */
101
ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

2594 16 open_append_file 0 4 2777 35 VirtualFileSystem::open_append_file 0 1 1264 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
71
ostream *VirtualFileSystem::open_append_file(Filename const &filename);

2595 16 close_write_file 0 4 2777 35 VirtualFileSystem::close_write_file 0 1 1265 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
static void VirtualFileSystem::close_write_file(ostream *stream);

2596 20 open_read_write_file 0 4 2777 39 VirtualFileSystem::open_read_write_file 0 1 1266 169
/**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */
91
iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

2597 21 open_read_append_file 0 4 2777 40 VirtualFileSystem::open_read_append_file 0 1 1267 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
77
iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

2598 21 close_read_write_file 0 4 2777 40 VirtualFileSystem::close_read_write_file 0 1 1268 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
71
static void VirtualFileSystem::close_read_write_file(iostream *stream);

2599 9 Patchfile 0 4 2781 20 Patchfile::Patchfile 0 2 1279 1280 111
/**
 * Create a patch file and initializes internal data
 */

/**
 * Create patch file with buffer to patch
 */
77
Patchfile::Patchfile(void);
Patchfile::Patchfile(PointerTo< Buffer > buffer);

2600 10 ~Patchfile 0 4 2781 21 Patchfile::~Patchfile 0 0 10
/**
 *
 */
28
Patchfile::~Patchfile(void);

2601 5 build 0 4 2781 16 Patchfile::build 0 1 1281 359
/**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

2602 11 read_header 0 4 2781 22 Patchfile::read_header 0 1 1282 193
/**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */
55
int Patchfile::read_header(Filename const &patch_file);

2603 8 initiate 0 4 2781 19 Patchfile::initiate 0 2 1283 1284 236
/**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */

/**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

2604 3 run 0 4 2781 14 Patchfile::run 0 1 1285 350
/**
 * Perform one buffer's worth of patching Returns EU_ok while patching Returns
 * EU_success when done If error happens will return one of: EU_error_abort :
 * Patching has not been initiated EU_error_file_invalid : file is corrupted
 * EU_error_invalid_checksum : incompatible patch file
 * EU_error_write_file_rename : could not rename file
 */
25
int Patchfile::run(void);

2605 5 apply 0 4 2781 16 Patchfile::apply 0 2 1286 1287 311
/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */

/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

2606 12 get_progress 0 4 2781 23 Patchfile::get_progress 0 1 1288 125
/**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */
55
inline PN_stdfloat Patchfile::get_progress(void) const;

2607 19 set_allow_multifile 0 4 2781 30 Patchfile::set_allow_multifile 0 1 1289 362
/**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

2608 19 get_allow_multifile 0 4 2781 30 Patchfile::get_allow_multifile 0 1 1290 37
/**
 * See set_allow_multifile().
 */
49
inline bool Patchfile::get_allow_multifile(void);

2609 20 set_footprint_length 0 4 2781 31 Patchfile::set_footprint_length 0 1 1291 10
/**
 *
 */
56
inline void Patchfile::set_footprint_length(int length);

2610 20 get_footprint_length 0 4 2781 31 Patchfile::get_footprint_length 0 1 1292 10
/**
 *
 */
49
inline int Patchfile::get_footprint_length(void);

2611 22 reset_footprint_length 0 4 2781 33 Patchfile::reset_footprint_length 0 1 1293 10
/**
 *
 */
52
inline void Patchfile::reset_footprint_length(void);

2612 15 has_source_hash 0 4 2781 26 Patchfile::has_source_hash 0 1 1294 145
/**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */
51
inline bool Patchfile::has_source_hash(void) const;

2613 15 get_source_hash 0 4 2781 26 Patchfile::get_source_hash 0 1 1295 52
/**
 * Returns the MD5 hash for the source file.
 */
61
inline HashVal const &Patchfile::get_source_hash(void) const;

2614 15 get_result_hash 0 4 2781 26 Patchfile::get_result_hash 0 1 1296 78
/**
 * Returns the MD5 hash for the file after the patch has been applied.
 */
61
inline HashVal const &Patchfile::get_result_hash(void) const;

2615 13 password_hash 0 1 0 13 password_hash 0 1 1342 0
103
std::string password_hash(std::string const &password, std::string const &salt, int iters, int keylen);

2616 13 get_long_time 0 4 2785 24 TrueClock::get_long_time 0 1 1297 420
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

/**
 *
 */
38
double TrueClock::get_long_time(void);

2617 14 get_short_time 0 4 2785 25 TrueClock::get_short_time 0 1 1298 426
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

/**
 *
 */
46
inline double TrueClock::get_short_time(void);

2618 18 get_short_raw_time 0 4 2785 29 TrueClock::get_short_raw_time 0 1 1299 302
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

/**
 *
 */
43
double TrueClock::get_short_raw_time(void);

2619 15 get_error_count 0 4 2785 26 TrueClock::get_error_count 0 1 1300 369
/**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */
50
inline int TrueClock::get_error_count(void) const;

2620 14 get_global_ptr 0 4 2785 25 TrueClock::get_global_ptr 0 1 1301 70
/**
 * Returns a pointer to the one TrueClock object in the world.
 */
57
static inline TrueClock *TrueClock::get_global_ptr(void);

2621 16 set_cpu_affinity 0 4 2785 27 TrueClock::set_cpu_affinity 0 1 1302 0
54
bool TrueClock::set_cpu_affinity(uint32_t mask) const;

2622 12 ProfileTimer 0 4 2786 26 ProfileTimer::ProfileTimer 0 2 1303 1304 0
127
ProfileTimer::ProfileTimer(char const *name = 0, int maxEntries = 4096);
ProfileTimer::ProfileTimer(ProfileTimer const &other);

2623 13 ~ProfileTimer 0 4 2786 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

2624 4 init 0 4 2786 18 ProfileTimer::init 0 1 1305 0
65
void ProfileTimer::init(char const *name, int maxEntries = 4096);

2625 2 on 0 4 2786 16 ProfileTimer::on 0 1 1306 0
28
void ProfileTimer::on(void);

2626 4 mark 0 4 2786 18 ProfileTimer::mark 0 1 1307 0
41
void ProfileTimer::mark(char const *tag);

2627 3 off 0 4 2786 17 ProfileTimer::off 0 2 1308 1309 0
70
void ProfileTimer::off(void);
void ProfileTimer::off(char const *tag);

2628 12 getTotalTime 0 4 2786 26 ProfileTimer::getTotalTime 0 1 1310 110
// Don't call any of the following during timing: (Because they are slow,
// not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

2629 16 consolidateAllTo 0 4 2786 30 ProfileTimer::consolidateAllTo 0 1 1311 0
66
static void ProfileTimer::consolidateAllTo(ostream &out = ::cout);

2630 13 consolidateTo 0 4 2786 27 ProfileTimer::consolidateTo 0 1 1312 0
62
void ProfileTimer::consolidateTo(ostream &out = ::cout) const;

2631 10 printAllTo 0 4 2786 24 ProfileTimer::printAllTo 0 1 1313 0
60
static void ProfileTimer::printAllTo(ostream &out = ::cout);

2632 7 printTo 0 4 2786 21 ProfileTimer::printTo 0 1 1314 0
56
void ProfileTimer::printTo(ostream &out = ::cout) const;

2633 11 was_deleted 0 4 2787 30 WeakPointerToVoid::was_deleted 0 1 1315 94
/**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.
 */
55
inline bool WeakPointerToVoid::was_deleted(void) const;

2634 16 is_valid_pointer 0 4 2787 35 WeakPointerToVoid::is_valid_pointer 0 1 1316 90
/**
 * Returns true if the pointer is not null and the object has not been
 * deleted.
 */
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

2635 18 ~WeakPointerToVoid 0 4 2787 37 WeakPointerToVoid::~WeakPointerToVoid 0 0 0
44
WeakPointerToVoid::~WeakPointerToVoid(void);

2636 16 set_string_value 0 4 2788 33 WindowsRegistry::set_string_value 0 1 1319 302
/**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */
183
static bool WindowsRegistry::set_string_value(std::string const &key, std::string const &name, std::string const &value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2637 13 set_int_value 0 4 2788 30 WindowsRegistry::set_int_value 0 1 1320 142
/**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */
165
static bool WindowsRegistry::set_int_value(std::string const &key, std::string const &name, int value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2638 12 get_key_type 0 4 2788 29 WindowsRegistry::get_key_type 0 1 1321 115
/**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */
170
static WindowsRegistry::Type WindowsRegistry::get_key_type(std::string const &key, std::string const &name, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2639 16 get_string_value 0 4 2788 33 WindowsRegistry::get_string_value 0 1 1322 291
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */
198
static std::string WindowsRegistry::get_string_value(std::string const &key, std::string const &name, std::string const &default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2640 13 get_int_value 0 4 2788 30 WindowsRegistry::get_int_value 0 1 1323 206
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */
172
static int WindowsRegistry::get_int_value(std::string const &key, std::string const &name, int default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2641 15 WindowsRegistry 0 4 2788 32 WindowsRegistry::WindowsRegistry 0 2 1317 1318 0
132
inline WindowsRegistry::WindowsRegistry(void) = default;
inline WindowsRegistry::WindowsRegistry(WindowsRegistry const &) = default;

2642 16 ~WindowsRegistry 0 4 2788 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

1342
1 0 0 7 13 2795 1359 0 0 1 4 copy 1 2793  
2 0 0 7 13 2795 1359 0 0 1 4 copy 1 2796  
3 0 0 7 13 2795 1359 0 0 1 6 source 1 2798  
4 0 0 6 14 2801 0 0 0 1 4 this 3 2793  
5 0 0 6 15 2682 0 0 0 2 4 this 3 2793  1 n 1 2801  
6 0 0 6 16 2682 0 0 0 2 4 this 3 2793  1 n 1 2801  
7 0 0 6 17 2802 0 0 0 1 4 this 3 2793  
8 0 0 6 18 2802 0 0 0 3 4 this 3 2793  1 n 1 2801  5 count 1 2801  
9 0 0 6 19 2671 0 0 0 1 4 this 3 2793  
10 0 0 6 20 2671 0 0 0 1 4 this 3 2793  
11 0 0 6 21 2671 0 0 0 3 4 this 3 2793  4 view 1 2803  5 flags 1 2671  
12 0 0 4 22 2806 0 0 0 2 4 this 3 2793  4 view 1 2803  
13 0 0 4 10 2806 0 0 0 1 4 this 3 2807  
14 0 0 4 11 2806 0 0 0 2 4 this 3 2808  3 out 1 2723  
15 0 0 6 7 2670 0 0 130 /**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */ 1 4 this 3 2810  
16 0 0 6 8 2812 0 0 10 /**
 *
 */ 1 4 this 3 2810  
17 0 0 7 31 2815 1373 0 0 1 4 copy 1 2813  
18 0 0 7 31 2815 1373 0 0 1 4 copy 1 2816  
19 0 0 7 31 2815 1373 0 0 1 6 source 1 2798  
20 0 0 6 32 2801 0 0 0 1 4 this 3 2813  
21 0 0 6 33 2783 0 0 0 2 4 this 3 2813  1 n 1 2801  
22 0 0 6 34 2783 0 0 0 2 4 this 3 2813  1 n 1 2801  
23 0 0 6 35 2802 0 0 0 1 4 this 3 2813  
24 0 0 6 36 2802 0 0 0 3 4 this 3 2813  1 n 1 2801  5 count 1 2801  
25 0 0 6 37 2671 0 0 0 1 4 this 3 2813  
26 0 0 6 38 2671 0 0 0 1 4 this 3 2813  
27 0 0 6 39 2671 0 0 0 3 4 this 3 2813  4 view 1 2803  5 flags 1 2671  
28 0 0 4 40 2806 0 0 0 2 4 this 3 2813  4 view 1 2803  
29 0 0 4 28 2806 0 0 0 1 4 this 3 2818  
30 0 0 4 29 2806 0 0 0 2 4 this 3 2819  3 out 1 2723  
31 0 0 7 49 2823 1387 0 0 1 4 copy 1 2821  
32 0 0 7 49 2823 1387 0 0 1 4 copy 1 2824  
33 0 0 7 49 2823 1387 0 0 1 6 source 1 2798  
34 0 0 6 50 2801 0 0 0 1 4 this 3 2821  
35 0 0 6 51 2671 0 0 0 2 4 this 3 2821  1 n 1 2801  
36 0 0 6 52 2671 0 0 0 2 4 this 3 2821  1 n 1 2801  
37 0 0 6 53 2802 0 0 0 1 4 this 3 2821  
38 0 0 6 54 2802 0 0 0 3 4 this 3 2821  1 n 1 2801  5 count 1 2801  
39 0 0 6 55 2671 0 0 0 1 4 this 3 2821  
40 0 0 6 56 2671 0 0 0 1 4 this 3 2821  
41 0 0 6 57 2671 0 0 0 3 4 this 3 2821  4 view 1 2803  5 flags 1 2671  
42 0 0 4 58 2806 0 0 0 2 4 this 3 2821  4 view 1 2803  
43 0 0 4 46 2806 0 0 0 1 4 this 3 2826  
44 0 0 4 47 2806 0 0 0 2 4 this 3 2827  3 out 1 2723  
45 0 0 7 67 2831 1401 0 0 1 4 copy 1 2829  
46 0 0 7 67 2831 1401 0 0 1 4 copy 1 2832  
47 0 0 7 67 2831 1401 0 0 1 6 source 1 2798  
48 0 0 6 68 2801 0 0 0 1 4 this 3 2829  
49 0 0 6 69 2834 0 0 0 2 4 this 3 2829  1 n 1 2801  
50 0 0 6 70 2834 0 0 0 2 4 this 3 2829  1 n 1 2801  
51 0 0 6 71 2802 0 0 0 1 4 this 3 2829  
52 0 0 6 72 2802 0 0 0 3 4 this 3 2829  1 n 1 2801  5 count 1 2801  
53 0 0 6 73 2671 0 0 0 1 4 this 3 2829  
54 0 0 6 74 2671 0 0 0 1 4 this 3 2829  
55 0 0 6 75 2671 0 0 0 3 4 this 3 2829  4 view 1 2803  5 flags 1 2671  
56 0 0 4 76 2806 0 0 0 2 4 this 3 2829  4 view 1 2803  
57 0 0 4 64 2806 0 0 0 1 4 this 3 2835  
58 0 0 4 65 2806 0 0 0 2 4 this 3 2836  3 out 1 2723  
59 0 0 6 84 2665 0 0 67 /**
 * Returns the page on which this declaration can be found.
 */ 1 4 this 3 2675  
60 0 0 6 85 2673 0 0 148 /**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */ 1 4 this 3 2675  
61 0 0 6 177 2802 0 0 186 /**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */ 1 4 this 3 2675  
62 0 0 4 178 2806 0 0 55 /**
 * Changes the value assigned to this variable.
 */ 2 4 this 3 2672  5 value 1 2802  
63 0 0 6 179 2812 0 0 156 /**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 2675  
64 0 0 6 180 2670 0 0 184 /**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */ 2 4 this 3 2675  1 n 1 2812  
65 0 0 6 181 2670 0 0 97 /**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */ 2 4 this 3 2675  1 n 1 2812  
66 0 0 6 182 2670 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 2675  1 n 1 2812  
67 0 0 6 183 2670 0 0 95 /**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */ 2 4 this 3 2675  1 n 1 2812  
68 0 0 6 184 2670 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 2675  1 n 1 2812  
69 0 0 6 185 2802 0 0 153 /**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */ 2 4 this 3 2675  1 n 1 2812  
70 0 0 6 186 2670 0 0 145 /**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */ 2 4 this 3 2675  1 n 1 2812  
71 0 0 6 187 2671 0 0 140 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */ 2 4 this 3 2675  1 n 1 2812  
72 0 0 6 188 2688 0 0 140 /**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */ 2 4 this 3 2675  1 n 1 2812  
73 0 0 6 189 2682 0 0 143 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */ 2 4 this 3 2675  1 n 1 2812  
74 0 0 4 190 2806 0 0 0 3 4 this 3 2672  1 n 1 2812  5 value 1 2802  
75 0 0 4 191 2806 0 0 0 3 4 this 3 2672  1 n 1 2812  5 value 1 2670  
76 0 0 4 192 2806 0 0 0 3 4 this 3 2672  1 n 1 2812  5 value 1 2671  
77 0 0 4 193 2806 0 0 0 3 4 this 3 2672  1 n 1 2812  5 value 1 2688  
78 0 0 4 194 2806 0 0 0 3 4 this 3 2672  1 n 1 2812  5 value 1 2682  
79 0 0 6 195 2671 0 0 254 /**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */ 1 4 this 3 2675  
80 0 0 4 196 2806 0 0 0 2 4 this 3 2675  3 out 1 2723  
81 0 0 4 197 2806 0 0 0 2 4 this 3 2675  3 out 1 2723  
82 0 0 7 82 2838 1403 0 0 0 
83 0 0 7 82 2838 1403 0 0 1 6 param0 0 2839  
84 0 0 6 89 2665 0 0 0 0 
85 0 0 6 90 2665 0 0 0 0 
86 0 0 6 91 2802 0 0 115 /**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */ 1 4 this 3 2841  
87 0 0 6 96 2670 0 0 248 /**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 2841  
88 0 0 6 97 2670 0 0 180 /**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */ 1 4 this 3 2841  
89 0 0 4 101 2806 0 0 0 2 4 this 3 2665  4 sort 1 2671  
90 0 0 6 102 2671 0 0 93 /**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */ 1 4 this 3 2841  
91 0 0 6 105 2671 0 0 413 /**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */ 1 4 this 3 2841  
92 0 0 6 106 2671 0 0 302 /**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */ 1 4 this 3 2841  
93 0 0 4 107 2806 0 0 195 /**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */ 2 4 this 3 2665  11 trust_level 1 2671  
94 0 0 6 108 2802 0 0 153 /**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */ 1 4 this 3 2841  
95 0 0 4 112 2806 0 0 0 1 4 this 3 2665  
96 0 0 6 113 2670 0 0 0 2 4 this 3 2665  2 in 1 2713  
97 0 0 6 114 2670 0 0 0 3 4 this 3 2665  2 in 1 2713  8 password 1 2802  
98 0 0 6 115 2672 0 0 0 3 4 this 3 2665  8 variable 1 2673  5 value 1 2802  
99 0 0 6 115 2672 0 0 0 3 4 this 3 2665  8 variable 1 2802  5 value 1 2802  
100 0 0 6 116 2670 0 0 0 2 4 this 3 2665  4 decl 1 2672  
101 0 0 6 117 2812 0 0 0 1 4 this 3 2841  
102 0 0 6 118 2675 0 0 0 2 4 this 3 2841  1 n 1 2812  
103 0 0 6 119 2672 0 0 0 2 4 this 3 2665  1 n 1 2812  
104 0 0 6 120 2802 0 0 0 2 4 this 3 2841  1 n 1 2812  
105 0 0 6 121 2802 0 0 0 2 4 this 3 2841  1 n 1 2812  
106 0 0 6 122 2670 0 0 0 2 4 this 3 2841  1 n 1 2812  
107 0 0 4 125 2806 0 0 0 2 4 this 3 2841  3 out 1 2723  
108 0 0 4 126 2806 0 0 0 2 4 this 3 2841  3 out 1 2723  
109 0 0 4 127 2806 0 0 0 2 4 this 3 2841  3 out 1 2723  
110 0 0 6 131 2802 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 2843  
111 0 0 6 132 2670 0 0 118 /**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */ 1 4 this 3 2843  
112 0 0 6 133 2663 0 0 125 /**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */ 1 4 this 3 2843  
113 0 0 6 134 2802 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 2843  
114 0 0 6 135 2671 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 2843  
115 0 0 6 136 2670 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2843  
116 0 0 6 137 2671 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2843  
117 0 0 6 138 2670 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 2843  
118 0 0 6 139 2675 0 0 137 /**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */ 1 4 this 3 2843  
119 0 0 4 140 2806 0 0 0 2 4 this 3 2673  10 value_type 1 2663  
120 0 0 4 141 2806 0 0 0 2 4 this 3 2673  5 flags 1 2671  
121 0 0 4 142 2806 0 0 0 2 4 this 3 2673  11 description 1 2802  
122 0 0 4 143 2806 0 0 0 2 4 this 3 2673  13 default_value 1 2802  
123 0 0 4 144 2806 0 0 75 /**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */ 1 4 this 3 2673  
124 0 0 6 145 2672 0 0 0 1 4 this 3 2673  
125 0 0 6 146 2670 0 0 0 1 4 this 3 2673  
126 0 0 6 147 2670 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 2843  
127 0 0 6 148 2670 0 0 0 1 4 this 3 2843  
128 0 0 6 149 2812 0 0 0 1 4 this 3 2843  
129 0 0 6 150 2675 0 0 0 2 4 this 3 2843  1 n 1 2812  
130 0 0 6 152 2812 0 0 157 /**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */ 1 4 this 3 2843  
131 0 0 6 153 2675 0 0 335 /**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */ 2 4 this 3 2843  1 n 1 2812  
132 0 0 6 155 2812 0 0 115 /**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */ 1 4 this 3 2843  
133 0 0 6 156 2675 0 0 428 /**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */ 2 4 this 3 2843  1 n 1 2812  
134 0 0 6 158 2812 0 0 107 /**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */ 1 4 this 3 2843  
135 0 0 6 159 2675 0 0 157 /**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */ 2 4 this 3 2843  1 n 1 2812  
136 0 0 4 164 2806 0 0 0 2 4 this 3 2843  3 out 1 2723  
137 0 0 4 165 2806 0 0 0 2 4 this 3 2843  3 out 1 2723  
138 0 0 6 199 2670 0 0 155 /**
 * Returns true if the implicit *.prc files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */ 1 4 this 3 2845  
139 0 0 4 200 2806 0 0 250 /**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */ 1 4 this 3 2847  
140 0 0 4 201 2806 0 0 0 1 4 this 3 2847  
141 0 0 6 202 2848 0 0 274 /**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */ 1 4 this 3 2847  
142 0 0 6 203 2812 0 0 270 /**
 * Returns the number of patterns, like "*.prc", that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is "*.prc", but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */ 1 4 this 3 2845  
143 0 0 6 204 2802 0 0 131 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */ 2 4 this 3 2845  1 n 1 2812  
144 0 0 6 205 2812 0 0 170 /**
 * Returns the number of patterns, like "*.pre", that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */ 1 4 this 3 2845  
145 0 0 6 206 2802 0 0 151 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */ 2 4 this 3 2845  1 n 1 2812  
146 0 0 6 207 2812 0 0 232 /**
 * Returns the number of patterns, like "*.exe", that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */ 1 4 this 3 2845  
147 0 0 6 208 2802 0 0 159 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */ 2 4 this 3 2845  1 n 1 2812  
148 0 0 6 209 2665 0 0 0 2 4 this 3 2847  4 name 1 2802  
149 0 0 6 210 2670 0 0 0 2 4 this 3 2847  4 page 1 2665  
150 0 0 6 211 2812 0 0 174 /**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */ 1 4 this 3 2845  
151 0 0 6 212 2665 0 0 94 /**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */ 2 4 this 3 2845  1 n 1 2812  
152 0 0 6 213 2812 0 0 214 /**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 2845  
153 0 0 6 214 2665 0 0 94 /**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */ 2 4 this 3 2845  1 n 1 2812  
154 0 0 4 215 2806 0 0 0 2 4 this 3 2845  3 out 1 2723  
155 0 0 4 216 2806 0 0 0 2 4 this 3 2845  3 out 1 2723  
156 0 0 6 217 2847 0 0 0 0 
157 0 0 7 238 2851 1512 0 0 1 6 param0 0 2849  
158 0 0 7 238 2851 1512 0 230 /**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */ 1 4 name 1 2802  
159 0 0 6 240 2802 0 0 77 /**
 * Returns the toplevel value of the variable, formatted as a string.
 */ 1 4 this 3 2849  
160 0 0 4 241 2806 0 0 177 /**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */ 2 4 this 3 2851  5 value 1 2802  
161 0 0 4 242 2806 0 0 129 /**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */ 1 4 this 3 2851  
162 0 0 6 243 2812 0 0 153 /**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 2849  
163 0 0 6 220 2802 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 2852  
164 0 0 6 221 2663 0 0 132 /**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */ 1 4 this 3 2852  
165 0 0 6 222 2802 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 2852  
166 0 0 6 223 2671 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 2852  
167 0 0 6 224 2670 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2852  
168 0 0 6 225 2671 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2852  
169 0 0 6 226 2670 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 2852  
170 0 0 6 233 2670 0 0 240 /**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */ 1 4 this 3 2854  
171 0 0 6 234 2670 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 2852  
172 0 0 6 235 2670 0 0 149 /**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */ 1 4 this 3 2852  
173 0 0 4 236 2806 0 0 10 /**
 *
 */ 2 4 this 3 2852  3 out 1 2723  
174 0 0 4 237 2806 0 0 10 /**
 *
 */ 2 4 this 3 2852  3 out 1 2723  
175 0 0 7 245 2857 1527 0 0 1 6 param0 0 2855  
176 0 0 7 245 2857 1527 0 10 /**
 *
 */ 1 4 name 1 2802  
177 0 0 7 245 2857 1527 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2670  11 description 1 2802  5 flags 1 2671  
178 0 0 7 245 2857 1527 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2802  11 description 1 2802  5 flags 1 2671  
179 0 0 6 246 2857 0 0 0 2 4 this 3 2857  5 value 1 2670  
180 0 0 6 248 2812 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2855  
181 0 0 6 249 2670 0 0 0 2 4 this 3 2855  1 n 1 2812  
182 0 0 4 250 2806 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2857  5 value 1 2670  
183 0 0 6 251 2670 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2855  
184 0 0 6 252 2670 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2855  
185 0 0 6 255 2670 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2855  1 n 1 2812  
186 0 0 4 256 2806 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2857  1 n 1 2812  5 value 1 2670  
187 0 0 6 247 2670 0 0 0 1 4 this 3 2855  
188 0 0 7 259 2860 1538 0 0 1 6 param0 0 2858  
189 0 0 7 259 2860 1538 0 10 /**
 *
 */ 1 4 name 1 2802  
190 0 0 7 259 2860 1538 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2682  11 description 1 2802  5 flags 1 2671  
191 0 0 7 259 2860 1538 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2802  11 description 1 2802  5 flags 1 2671  
192 0 0 6 260 2860 0 0 0 2 4 this 3 2860  5 value 1 2682  
193 0 0 6 262 2812 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2858  
194 0 0 6 263 2682 0 0 0 2 4 this 3 2858  1 n 1 2812  
195 0 0 4 264 2806 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2860  5 value 1 2682  
196 0 0 6 265 2682 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2858  
197 0 0 6 266 2682 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2858  
198 0 0 6 270 2682 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2858  1 n 1 2812  
199 0 0 4 271 2806 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2860  1 n 1 2812  5 value 1 2682  
200 0 0 6 261 2682 0 0 0 1 4 this 3 2858  
201 0 0 7 274 2863 1662 0 0 1 6 param0 0 2861  
202 0 0 7 274 2863 1662 0 10 /**
 *
 */ 1 4 name 1 2802  
203 0 0 7 274 2863 1662 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2864  11 description 1 2802  5 flags 1 2671  
204 0 0 6 275 2863 0 0 0 2 4 this 3 2863  5 value 1 2864  
205 0 0 6 277 2802 0 0 76 // These methods help the ConfigVariableFilename act like a Filename object. 1 4 this 3 2861  
206 0 0 6 278 2670 0 0 10 /**
 *
 */ 1 4 this 3 2861  
207 0 0 6 279 2812 0 0 10 /**
 *
 */ 1 4 this 3 2861  
208 0 0 6 280 2865 0 0 0 2 4 this 3 2861  1 n 1 2812  
209 0 0 6 281 2802 0 0 183 /**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */ 1 4 this 3 2861  
210 0 0 6 282 2802 0 0 139 /**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */ 1 4 this 3 2861  
211 0 0 6 283 2802 0 0 145 /**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */ 1 4 this 3 2861  
212 0 0 6 284 2802 0 0 96 /**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */ 1 4 this 3 2861  
213 0 0 6 285 2802 0 0 81 /**
 * Returns the basename part of the filename, without the file extension.
 */ 1 4 this 3 2861  
214 0 0 6 286 2802 0 0 140 /**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */ 1 4 this 3 2861  
215 0 0 6 287 2670 0 0 34 // Comparison operators are handy. 2 4 this 3 2861  5 other 1 2864  
216 0 0 6 288 2670 0 0 0 2 4 this 3 2861  5 other 1 2864  
217 0 0 6 289 2670 0 0 0 2 4 this 3 2861  5 other 1 2864  
218 0 0 4 290 2806 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2863  5 value 1 2864  
219 0 0 7 291 2866 1659 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2861  
220 0 0 7 292 2866 1659 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2861  
221 0 0 7 399 2866 1659 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2861  1 n 1 2812  
222 0 0 4 400 2806 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2863  1 n 1 2812  5 value 1 2864  
223 0 0 6 276 2864 0 0 0 1 4 this 3 2861  
224 0 0 7 296 2866 1659 0 37 /**
 * Creates an empty Filename.
 */ 0 
225 0 0 7 296 2866 1659 0 0 2 7 dirname 1 2864  8 basename 1 2864  
226 0 0 7 296 2866 1659 0 0 1 4 path 1 2798  
227 0 0 6 297 2798 0 0 0 1 4 this 3 2864  
228 0 0 7 298 2866 1659 0 168 // Static constructors to explicitly create a filename that refers to a text
// or binary file.  This is in lieu of calling set_text() or set_binary() or
// set_type(). 1 8 filename 1 2864  
229 0 0 7 298 2866 1659 0 10 /**
 *
 */ 1 8 filename 1 2802  
230 0 0 7 299 2866 1659 0 10 /**
 *
 */ 1 8 filename 1 2864  
231 0 0 7 299 2866 1659 0 10 /**
 *
 */ 1 8 filename 1 2802  
232 0 0 7 300 2866 1659 0 10 /**
 *
 */ 1 8 filename 1 2802  
233 0 0 7 301 2866 1659 0 10 /**
 *
 */ 1 8 filename 1 2802  
234 0 0 7 302 2866 1659 0 101 /**
 * Constructs a filename that represents a sequence of numbered files.  See
 * set_pattern().
 */ 1 8 filename 1 2802  
235 0 0 7 303 2866 1659 0 0 2 11 os_specific 1 2802  4 type 1 2685  
236 0 0 7 304 2866 1659 0 0 2 11 os_specific 1 2802  4 type 1 2685  
237 0 0 7 305 2866 1659 0 0 2 11 user_string 1 2802  4 type 1 2685  
238 0 0 7 306 2866 1659 0 0 4 7 dirname 1 2802  6 prefix 1 2802  6 suffix 1 2802  4 type 1 2685  
239 0 0 6 307 2864 0 0 0 0 
240 0 0 6 308 2864 0 0 0 0 
241 0 0 6 309 2864 0 0 0 0 
242 0 0 6 310 2864 0 0 0 0 
243 0 0 6 311 2866 0 0 10 /**
 *
 */ 2 4 this 3 2866  4 copy 1 2864  
244 0 0 6 311 2866 0 0 10 /**
 *
 */ 2 4 this 3 2866  8 filename 1 2802  
245 0 0 6 311 2866 0 0 36 // Assignment is via the = operator. 2 4 this 3 2866  8 filename 1 2802  
246 0 0 6 311 2866 0 0 10 /**
 *
 */ 2 4 this 3 2866  8 filename 1 2802  
247 0 0 6 313 2802 0 0 10 /**
 *
 */ 1 4 this 3 2864  
248 0 0 6 314 2670 0 0 10 /**
 *
 */ 1 4 this 3 2864  
249 0 0 6 315 2812 0 0 10 /**
 *
 */ 1 4 this 3 2864  
250 0 0 6 316 2865 0 0 0 2 4 this 3 2864  1 n 1 2812  
251 0 0 6 317 2798 0 0 0 1 4 this 3 2864  
252 0 0 6 318 2798 0 0 0 1 4 this 3 2864  
253 0 0 6 319 2802 0 0 10 /**
 *
 */ 2 4 this 3 2864  5 begin 1 2812  
254 0 0 6 319 2802 0 0 10 /**
 *
 */ 3 4 this 3 2864  5 begin 1 2812  3 end 1 2812  
255 0 0 6 320 2866 0 0 0 2 4 this 3 2866  5 other 1 2802  
256 0 0 7 321 2866 1659 0 0 2 4 this 3 2864  5 other 1 2802  
257 0 0 7 322 2866 1659 0 0 2 4 this 3 2864  5 other 1 2864  
258 0 0 6 323 2802 0 0 140 /**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator.
 */ 1 4 this 3 2864  
259 0 0 6 324 2802 0 0 66 /**
 * Returns the entire filename as a wide-character string.
 */ 1 4 this 3 2864  
260 0 0 6 325 2802 0 0 139 /**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */ 1 4 this 3 2864  
261 0 0 6 326 2802 0 0 145 /**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */ 1 4 this 3 2864  
262 0 0 6 327 2802 0 0 96 /**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */ 1 4 this 3 2864  
263 0 0 6 328 2802 0 0 81 /**
 * Returns the basename part of the filename, without the file extension.
 */ 1 4 this 3 2864  
264 0 0 6 329 2802 0 0 140 /**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */ 1 4 this 3 2864  
265 0 0 4 330 2806 0 0 68 // You can also use any of these to reassign pieces of the filename. 2 4 this 3 2866  1 s 1 2802  
266 0 0 4 331 2806 0 0 0 2 4 this 3 2866  1 s 1 2802  
267 0 0 4 332 2806 0 0 0 2 4 this 3 2866  1 s 1 2802  
268 0 0 4 333 2806 0 0 0 2 4 this 3 2866  1 s 1 2802  
269 0 0 4 334 2806 0 0 0 2 4 this 3 2866  1 s 1 2802  
270 0 0 4 335 2806 0 0 0 2 4 this 3 2866  1 s 1 2802  
271 0 0 4 336 2806 0 0 235 // Setting these flags appropriately is helpful when opening or searching
// for a file; it helps the Filename resolve OS-specific conventions (for
// instance, that dynamic library names should perhaps be changed from .so
// to .dll). 1 4 this 3 2866  
272 0 0 4 337 2806 0 0 190 /**
 * Indicates that the filename represents a text file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */ 1 4 this 3 2866  
273 0 0 6 338 2670 0 0 256 /**
 * Returns true if the Filename has been indicated to represent a binary file
 * via a previous call to set_binary().  It is possible that neither
 * is_binary() nor is_text() will be true, if neither set_binary() nor
 * set_text() was ever called.
 */ 1 4 this 3 2864  
274 0 0 6 339 2670 0 0 252 /**
 * Returns true if the Filename has been indicated to represent a text file
 * via a previous call to set_text().  It is possible that neither is_binary()
 * nor is_text() will be true, if neither set_binary() nor set_text() was ever
 * called.
 */ 1 4 this 3 2864  
275 0 0 6 340 2670 0 0 198 /**
 * Returns true either is_binary() or is_text() is true; that is, that the
 * filename has been specified as either binary or text.  If this is false,
 * the filename has not been specified.
 */ 1 4 this 3 2864  
276 0 0 4 341 2806 0 0 350 /**
 * Sets the type of the file represented by the filename.  This is useful for
 * to_os_specific(), resolve_filename(), test_existence(), and all such real-
 * world access functions.  It helps the Filename know how to map the internal
 * filename to the OS-specific filename (for instance, maybe executables
 * should have an .exe extension).
 */ 2 4 this 3 2866  4 type 1 2685  
277 0 0 6 342 2685 0 0 104 /**
 * Returns the type of the file represented by the filename, as previously set
 * by set_type().
 */ 1 4 this 3 2864  
278 0 0 4 343 2806 0 0 688 /**
 * Sets the flag indicating whether this is a filename pattern.  When this is
 * true, the filename is understood to be a placeholder for a numbered
 * sequence of filename, such as an image sequence.  In this case, a sequence
 * of one or more hash characters ("#") should appear in the filename string;
 * these characters will be filled in with the corresponding number (or more)
 * of digits representing the sequence number.  Sequence numbers always begin
 * counting at 0.
 *
 * When this is true, methods like has_hash() and get_hash_to_end() and
 * get_filename_index() may be called.  Methods like is_exists() will
 * implicitly test for existance of filename sequence 0.
 */ 2 4 this 3 2866  7 pattern 1 2670  
279 0 0 6 344 2670 0 0 97 /**
 * Returns the flag indicating whether this is a filename pattern.  See
 * set_pattern().
 */ 1 4 this 3 2864  
280 0 0 6 345 2670 0 0 354 /**
 * Returns true if the filename is indicated to be a filename pattern (that
 * is, set_pattern(true) was called), and the filename pattern did include a
 * sequence of hash marks, or false if it was not a filename pattern or did
 * not include hash marks.  If this is true, then get_filename_index() will
 * return a different filename each time.
 */ 1 4 this 3 2864  
281 0 0 7 346 2866 1659 0 0 2 4 this 3 2864  5 index 1 2671  
282 0 0 6 347 2802 0 0 130 /**
 * Returns the part of the filename beginning at the hash sequence (if any),
 * and continuing to the end of the filename.
 */ 1 4 this 3 2864  
283 0 0 4 348 2806 0 0 0 2 4 this 3 2866  1 s 1 2802  
284 0 0 4 349 2806 0 0 0 2 4 this 3 2864  10 components 1 2867  
285 0 0 4 350 2806 0 0 0 1 4 this 3 2866  
286 0 0 6 351 2670 0 0 146 /**
 * Returns true if the filename is local, e.g.  does not begin with a slash,
 * or false if the filename is fully specified from the root.
 */ 1 4 this 3 2864  
287 0 0 6 352 2670 0 0 444 /**
 * Returns true if the filename is fully qualified, e.g.  begins with a slash.
 * This is almost, but not quite, the same thing as !is_local().  It's not
 * exactly the same because a special case is made for filenames that begin
 * with a single dot followed by a slash--these are considered to be fully
 * qualified (they are explicitly relative to the current directory, and do
 * not refer to a filename on a search path somewhere).
 */ 1 4 this 3 2864  
288 0 0 4 353 2806 0 0 0 1 4 this 3 2866  
289 0 0 4 353 2806 0 0 0 2 4 this 3 2866  15 start_directory 1 2864  
290 0 0 6 354 2670 0 0 0 1 4 this 3 2866  
291 0 0 6 355 2670 0 0 0 1 4 this 3 2866  
292 0 0 6 356 2802 0 0 0 1 4 this 3 2864  
293 0 0 6 357 2802 0 0 0 1 4 this 3 2864  
294 0 0 6 358 2802 0 0 0 1 4 this 3 2864  
295 0 0 6 359 2802 0 0 0 1 4 this 3 2864  
296 0 0 6 360 2802 0 0 0 1 4 this 3 2864  
297 0 0 6 361 2670 0 0 0 1 4 this 3 2864  
298 0 0 6 362 2670 0 0 0 1 4 this 3 2864  
299 0 0 6 363 2670 0 0 0 1 4 this 3 2864  
300 0 0 6 364 2670 0 0 0 1 4 this 3 2864  
301 0 0 6 365 2670 0 0 0 1 4 this 3 2864  
302 0 0 6 366 2671 0 0 0 4 4 this 3 2864  5 other 1 2864  19 this_missing_is_old 1 2670  20 other_missing_is_old 1 2670  
303 0 0 6 367 2870 0 0 0 1 4 this 3 2864  
304 0 0 6 368 2870 0 0 0 1 4 this 3 2864  
305 0 0 6 369 2872 0 0 0 1 4 this 3 2864  
306 0 0 6 370 2670 0 0 0 3 4 this 3 2866  10 searchpath 1 2873  17 default_extension 1 2802  
307 0 0 6 371 2670 0 0 0 3 4 this 3 2866  9 directory 1 2866  13 allow_backups 1 2670  
308 0 0 6 372 2671 0 0 0 2 4 this 3 2866  10 searchpath 1 2873  
309 0 0 6 373 2798 0 0 0 1 4 this 3 2864  
310 0 0 6 373 2670 0 0 0 2 4 this 3 2864  8 contents 1 2867  
311 0 0 6 374 2670 0 0 0 2 4 this 3 2864  6 stream 1 2874  
312 0 0 6 374 2670 0 0 0 2 4 this 3 2864  6 stream 1 2875  
313 0 0 6 375 2670 0 0 0 3 4 this 3 2864  6 stream 1 2877  8 truncate 1 2670  
314 0 0 6 375 2670 0 0 0 3 4 this 3 2864  6 stream 1 2878  8 truncate 1 2670  
315 0 0 6 376 2670 0 0 0 2 4 this 3 2864  6 stream 1 2877  
316 0 0 6 376 2670 0 0 0 2 4 this 3 2864  6 stream 1 2878  
317 0 0 6 377 2670 0 0 0 3 4 this 3 2864  6 stream 1 2880  8 truncate 1 2670  
318 0 0 6 377 2670 0 0 0 3 4 this 3 2864  6 stream 1 2881  8 truncate 1 2670  
319 0 0 6 378 2670 0 0 0 2 4 this 3 2864  6 stream 1 2880  
320 0 0 6 378 2670 0 0 0 2 4 this 3 2864  6 stream 1 2881  
321 0 0 6 379 2670 0 0 0 1 4 this 3 2864  
322 0 0 6 380 2670 0 0 0 1 4 this 3 2864  
323 0 0 6 381 2670 0 0 0 1 4 this 3 2864  
324 0 0 6 382 2670 0 0 0 2 4 this 3 2864  5 other 1 2864  
325 0 0 6 383 2670 0 0 0 2 4 this 3 2864  5 other 1 2864  
326 0 0 6 384 2670 0 0 0 1 4 this 3 2864  
327 0 0 6 385 2670 0 0 0 1 4 this 3 2864  
328 0 0 6 386 2670 0 0 0 1 4 this 3 2864  
329 0 0 6 387 2670 0 0 34 // Comparison operators are handy. 2 4 this 3 2864  5 other 1 2802  
330 0 0 6 388 2670 0 0 0 2 4 this 3 2864  5 other 1 2802  
331 0 0 6 389 2670 0 0 0 2 4 this 3 2864  5 other 1 2802  
332 0 0 6 390 2671 0 0 10 /**
 *
 */ 2 4 this 3 2864  5 other 1 2864  
333 0 0 6 391 2670 0 0 349 /**
 * Returns true if the Filename is valid (not empty), or false if it is an
 * empty string.
 *
 * This implements the Python equivalent to operator bool.  Defining an actual
 * operator bool method for C++ use would work too, but it seems to cause too
 * many ambiguities for the C++ compiler, so we use this Python-only approach
 * instead.
 */ 1 4 this 3 2864  
334 0 0 6 392 2671 0 0 0 1 4 this 3 2864  
335 0 0 4 393 2806 0 0 10 /**
 *
 */ 2 4 this 3 2864  3 out 1 2723  
336 0 0 4 394 2806 0 0 266 /**
 * Specifies the default encoding to be used for all subsequent Filenames.
 * This is used to represent wide-character (Unicode) filenames internally.
 * On non-Windows-based systems, the encoded filename is also passed to the
 * underlying operating system.
 */ 1 8 encoding 1 2738  
337 0 0 6 395 2738 0 0 125 /**
 * Specifies the default encoding to be used for all subsequent Filenames
 * objects.  See set_filesystem_encoding().
 */ 0 
338 0 0 7 396 2883 2155 0 0 0 
339 0 0 6 312 2802 0 0 60 // And retrieval is by any of the classic string operations. 1 4 this 3 2864  
340 0 0 7 403 2886 1673 0 0 1 6 param0 0 2884  
341 0 0 7 403 2886 1673 0 10 /**
 *
 */ 1 4 name 1 2802  
342 0 0 7 403 2886 1673 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2671  11 description 1 2802  5 flags 1 2671  
343 0 0 7 403 2886 1673 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2802  11 description 1 2802  5 flags 1 2671  
344 0 0 6 404 2886 0 0 0 2 4 this 3 2886  5 value 1 2671  
345 0 0 6 406 2812 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2884  
346 0 0 6 407 2671 0 0 0 2 4 this 3 2884  1 n 1 2812  
347 0 0 4 408 2806 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2886  5 value 1 2671  
348 0 0 6 409 2671 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2884  
349 0 0 6 410 2671 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2884  
350 0 0 6 413 2671 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2884  1 n 1 2812  
351 0 0 4 414 2806 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2886  1 n 1 2812  5 value 1 2671  
352 0 0 6 405 2671 0 0 0 1 4 this 3 2884  
353 0 0 7 417 2889 1684 0 0 1 6 param0 0 2887  
354 0 0 7 417 2889 1684 0 10 /**
 *
 */ 1 4 name 1 2802  
355 0 0 7 417 2889 1684 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2688  11 description 1 2802  5 flags 1 2671  
356 0 0 7 417 2889 1684 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2802  11 description 1 2802  5 flags 1 2671  
357 0 0 6 418 2889 0 0 0 2 4 this 3 2889  5 value 1 2688  
358 0 0 6 420 2812 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2887  
359 0 0 6 421 2688 0 0 0 2 4 this 3 2887  1 n 1 2812  
360 0 0 4 422 2806 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2889  5 value 1 2688  
361 0 0 6 423 2688 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2887  
362 0 0 6 424 2688 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2887  
363 0 0 6 429 2688 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2887  1 n 1 2812  
364 0 0 4 430 2806 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2889  1 n 1 2812  5 value 1 2688  
365 0 0 6 419 2688 0 0 0 1 4 this 3 2887  
366 0 0 7 433 2892 1686 0 0 1 6 param0 0 2890  
367 0 0 7 433 2892 1686 0 10 /**
 *
 */ 3 4 name 1 2802  11 description 1 2802  5 flags 1 2671  
368 0 0 6 435 2812 0 0 56 /**
 * Returns the number of values in the variable.
 */ 1 4 this 3 2890  
369 0 0 6 436 2802 0 0 49 /**
 * Returns the nth value of the variable.
 */ 2 4 this 3 2890  1 n 1 2812  
370 0 0 6 437 2812 0 0 63 /**
 * Returns the number of unique values in the variable.
 */ 1 4 this 3 2890  
371 0 0 6 438 2802 0 0 56 /**
 * Returns the nth unique value of the variable.
 */ 2 4 this 3 2890  1 n 1 2812  
372 0 0 6 439 2812 0 0 63 /**
 * Returns the number of unique values of the variable.
 */ 1 4 this 3 2890  
373 0 0 6 440 2802 0 0 0 2 4 this 3 2890  1 n 1 2812  
374 0 0 4 441 2806 0 0 0 2 4 this 3 2890  3 out 1 2723  
375 0 0 4 442 2806 0 0 0 2 4 this 3 2890  3 out 1 2723  
376 0 0 6 444 2673 0 0 0 2 4 this 3 2893  4 name 1 2802  
377 0 0 6 445 2673 0 0 0 6 4 this 3 2893  7 pattern 1 2802  4 type 1 2663  13 default_value 1 2802  11 description 1 2802  5 flags 1 2671  
378 0 0 6 446 2812 0 0 81 /**
 * Returns the current number of active ConfigVariableCores in the world.
 */ 1 4 this 3 2894  
379 0 0 6 447 2673 0 0 66 /**
 * Returns the nth active ConfigVariableCore in the world.
 */ 2 4 this 3 2894  1 n 1 2812  
380 0 0 6 449 2802 0 0 0 2 4 this 3 2894  1 n 1 2812  
381 0 0 6 450 2670 0 0 0 2 4 this 3 2894  1 n 1 2812  
382 0 0 4 452 2806 0 0 0 2 4 this 3 2894  3 out 1 2723  
383 0 0 4 453 2806 0 0 0 2 4 this 3 2894  3 out 1 2723  
384 0 0 4 454 2806 0 0 0 2 4 this 3 2894  3 out 1 2723  
385 0 0 4 455 2806 0 0 0 1 4 this 3 2894  
386 0 0 4 456 2806 0 0 0 1 4 this 3 2894  
387 0 0 4 457 2806 0 0 0 1 4 this 3 2894  
388 0 0 6 458 2893 0 0 0 0 
389 0 0 7 460 2898 1709 0 0 1 6 param0 0 2896  
390 0 0 7 460 2898 1709 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2873  11 description 1 2802  5 flags 1 2671  
391 0 0 7 460 2898 1709 0 10 /**
 *
 */ 3 4 name 1 2802  11 description 1 2802  5 flags 1 2671  
392 0 0 7 460 2898 1709 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2802  11 description 1 2802  5 flags 1 2671  
393 0 0 6 463 2873 0 0 10 /**
 *
 */ 1 4 this 3 2896  
394 0 0 6 464 2873 0 0 10 /**
 *
 */ 1 4 this 3 2896  
395 0 0 6 499 2670 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 2898  
396 0 0 4 500 2806 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 2898  
397 0 0 4 501 2806 0 0 62 /**
 * Adds a new directory to the end of the search list.
 */ 2 4 this 3 2898  9 directory 1 2864  
398 0 0 4 502 2806 0 0 64 /**
 * Adds a new directory to the front of the search list.
 */ 2 4 this 3 2898  9 directory 1 2864  
399 0 0 4 503 2806 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 2 4 this 3 2898  4 path 1 2873  
400 0 0 4 503 2806 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 3 4 this 3 2898  4 path 1 2802  9 separator 1 2802  
401 0 0 4 504 2806 0 0 104 /**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */ 2 4 this 3 2898  4 path 1 2873  
402 0 0 6 505 2670 0 0 69 /**
 * Returns true if the search list is empty, false otherwise.
 */ 1 4 this 3 2896  
403 0 0 6 506 2812 0 0 64 /**
 * Returns the number of directories on the search list.
 */ 1 4 this 3 2896  
404 0 0 6 507 2864 0 0 56 /**
 * Returns the nth directory on the search list.
 */ 2 4 this 3 2896  1 n 1 2812  
405 0 0 7 510 2866 1659 0 197 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */ 2 4 this 3 2896  8 filename 1 2864  
406 0 0 7 511 2899 1715 0 184 /**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */ 2 4 this 3 2896  8 filename 1 2864  
407 0 0 6 511 2812 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 3 4 this 3 2896  8 filename 1 2864  7 results 1 2899  
408 0 0 4 512 2806 0 0 10 /**
 *
 */ 2 4 this 3 2896  3 out 1 2723  
409 0 0 4 513 2806 0 0 10 /**
 *
 */ 2 4 this 3 2896  3 out 1 2723  
410 0 0 6 462 2873 0 0 0 1 4 this 3 2896  
411 0 0 7 479 2848 1725 0 0 0 
412 0 0 7 479 2848 1725 0 0 1 4 copy 1 2873  
413 0 0 7 479 2848 1725 0 0 1 9 directory 1 2864  
414 0 0 7 479 2848 1725 0 0 2 4 path 1 2802  9 separator 1 2802  
415 0 0 6 480 2848 0 0 0 2 4 this 3 2848  4 copy 1 2873  
416 0 0 4 482 2806 0 0 0 1 4 this 3 2848  
417 0 0 4 483 2806 0 0 0 2 4 this 3 2848  9 directory 1 2864  
418 0 0 4 484 2806 0 0 0 2 4 this 3 2848  9 directory 1 2864  
419 0 0 4 485 2806 0 0 0 2 4 this 3 2848  4 path 1 2873  
420 0 0 4 485 2806 0 0 0 3 4 this 3 2848  4 path 1 2802  9 separator 1 2802  
421 0 0 4 486 2806 0 0 0 2 4 this 3 2848  4 path 1 2873  
422 0 0 6 487 2670 0 0 0 1 4 this 3 2873  
423 0 0 6 488 2812 0 0 0 1 4 this 3 2873  
424 0 0 6 489 2864 0 0 0 2 4 this 3 2873  1 n 1 2812  
425 0 0 7 493 2866 1659 0 0 2 4 this 3 2873  8 filename 1 2864  
426 0 0 7 494 2899 1715 0 184 /**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */ 2 4 this 3 2873  8 filename 1 2864  
427 0 0 6 494 2812 0 0 0 3 4 this 3 2873  8 filename 1 2864  7 results 1 2899  
428 0 0 7 495 2866 1659 0 251 /**
 * A quick-and-easy way to search a searchpath for a file when you don't feel
 * like building or keeping around a DSearchPath object.  This simply
 * constructs a temporary DSearchPath based on the indicated path string, and
 * searches that.
 */ 3 8 filename 1 2864  4 path 1 2802  9 separator 1 2802  
429 0 0 4 496 2806 0 0 0 3 4 this 3 2873  3 out 1 2723  9 separator 1 2802  
430 0 0 4 497 2806 0 0 0 3 4 this 3 2873  3 out 1 2723  12 indent_level 1 2671  
431 0 0 7 469 2899 1715 0 0 0 
432 0 0 7 469 2899 1715 0 0 1 4 copy 1 2900  
433 0 0 6 470 2899 0 0 0 2 4 this 3 2899  4 copy 1 2900  
434 0 0 4 472 2806 0 0 0 1 4 this 3 2899  
435 0 0 6 473 2812 0 0 0 1 4 this 3 2900  
436 0 0 6 474 2864 0 0 0 2 4 this 3 2900  1 n 1 2812  
437 0 0 7 475 2866 1659 0 0 2 4 this 3 2900  1 n 1 2812  
438 0 0 6 476 2812 0 0 136 /**
 * Returns the num of filenames in the set.  This method is defined to make
 * the Results object appear to be a list in Python.
 */ 1 4 this 3 2900  
439 0 0 4 477 2806 0 0 0 2 4 this 3 2900  3 out 1 2723  
440 0 0 4 478 2806 0 0 0 3 4 this 3 2900  3 out 1 2723  12 indent_level 1 2671  
441 0 0 7 515 2904 1767 0 0 1 6 param0 0 2902  
442 0 0 7 515 2904 1767 0 10 /**
 *
 */ 1 4 name 1 2802  
443 0 0 7 515 2904 1767 0 10 /**
 *
 */ 4 4 name 1 2802  13 default_value 1 2802  11 description 1 2802  5 flags 1 2671  
444 0 0 6 516 2904 0 0 0 2 4 this 3 2904  5 value 1 2802  
445 0 0 6 518 2802 0 0 76 // These methods help the ConfigVariableString act like a C++ string object. 1 4 this 3 2902  
446 0 0 6 519 2670 0 0 10 /**
 *
 */ 1 4 this 3 2902  
447 0 0 6 520 2812 0 0 10 /**
 *
 */ 1 4 this 3 2902  
448 0 0 6 521 2865 0 0 0 2 4 this 3 2902  1 n 1 2812  
449 0 0 6 522 2670 0 0 34 // Comparison operators are handy. 2 4 this 3 2902  5 other 1 2802  
450 0 0 6 523 2670 0 0 0 2 4 this 3 2902  5 other 1 2802  
451 0 0 6 524 2670 0 0 0 2 4 this 3 2902  5 other 1 2802  
452 0 0 4 525 2806 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2904  5 value 1 2802  
453 0 0 6 526 2802 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2902  
454 0 0 6 527 2802 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2902  
455 0 0 6 530 2802 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2902  1 n 1 2812  
456 0 0 4 531 2806 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2904  1 n 1 2812  5 value 1 2802  
457 0 0 6 517 2802 0 0 0 1 4 this 3 2902  
458 0 0 7 539 2905 1774 0 0 0 
459 0 0 7 539 2905 1774 0 0 1 6 param0 0 2906  
460 0 0 6 534 2670 0 0 0 2 3 sym 1 2802  3 def 1 2670  
461 0 0 6 535 2671 0 0 0 2 3 sym 1 2802  3 def 1 2671  
462 0 0 6 536 2783 0 0 0 2 3 sym 1 2802  3 def 1 2783  
463 0 0 6 537 2682 0 0 0 2 3 sym 1 2802  3 def 1 2682  
464 0 0 6 538 2802 0 0 0 2 3 sym 1 2802  3 def 1 2802  
465 0 0 7 555 2910 1789 0 0 1 6 param0 0 2908  
466 0 0 6 542 2670 0 0 73 /**
 * Returns true if the indicated environment variable is defined.
 */ 1 3 var 1 2802  
467 0 0 6 543 2802 0 0 125 /**
 * Returns the definition of the indicated environment variable, or the empty
 * string if the variable is undefined.
 */ 1 3 var 1 2802  
468 0 0 4 544 2806 0 0 72 /**
 * Changes the definition of the indicated environment variable.
 */ 2 3 var 1 2802  5 value 1 2802  
469 0 0 4 545 2806 0 0 269 /**
 * Changes the apparent definition of the indicated environment variable by
 * masking it within this class with a new value.  This does not change the
 * actual environment variable, but future calls to get_environment_variable()
 * will return this new value.
 */ 2 3 var 1 2802  5 value 1 2802  
470 0 0 4 546 2806 0 0 140 /**
 * Removes a value set by a previous call to shadow_environment_variable(),
 * and lets the actual value of the variable show again.
 */ 1 3 var 1 2802  
471 0 0 6 547 2802 0 0 0 1 3 str 1 2802  
472 0 0 6 548 2812 0 0 106 /**
 * Returns the number of command-line arguments available, not counting arg 0,
 * the binary name.
 */ 0 
473 0 0 6 549 2802 0 0 194 /**
 * Returns the nth command-line argument.  The index n must be in the range [0
 * .. get_num_args()).  The first parameter, n == 0, is the first actual
 * parameter, not the binary name.
 */ 1 1 n 1 2812  
474 0 0 6 550 2802 0 0 107 /**
 * Returns the name of the binary executable that started this program, if it
 * can be determined.
 */ 0 
475 0 0 6 551 2802 0 0 105 /**
 * Returns the name of the libdtool DLL that is used in this program, if it
 * can be determined.
 */ 0 
476 0 0 4 552 2806 0 0 22 /**
 * Do not use.
 */ 1 4 name 1 2802  
477 0 0 4 553 2806 0 0 22 /**
 * Do not use.
 */ 1 4 name 1 2802  
478 0 0 7 554 2866 1659 0 0 0 
479 0 0 7 589 2911 1815 0 10 /**
 *
 */ 0 
480 0 0 7 589 2911 1815 0 10 /**
 *
 */ 2 8 filename 1 2802  4 mode 1 2706  
481 0 0 4 591 2806 0 0 10 /**
 *
 */ 3 4 this 3 2911  8 filename 1 2802  4 mode 1 2706  
482 0 0 4 592 2806 0 0 10 /**
 *
 */ 1 4 this 3 2911  
483 0 0 4 587 2806 0 0 0 1 4 this 3 2735  
484 0 0 6 576 2713 0 0 0 1 4 this 3 2735  
485 0 0 6 577 2735 0 0 0 1 4 this 3 2713  
486 0 0 6 572 2671 0 0 0 1 4 this 3 2713  
487 0 0 6 573 2912 0 0 0 1 4 this 3 2713  
488 0 0 4 574 2806 0 0 0 2 4 this 3 2713  3 pos 1 2912  
489 0 0 4 574 2806 0 0 0 3 4 this 3 2713  3 off 1 2912  3 dir 1 2705  
490 0 0 6 571 2913 0 0 0 1 4 this 3 2713  
491 0 0 6 585 2723 0 0 0 1 4 this 3 2735  
492 0 0 6 586 2735 0 0 0 1 4 this 3 2723  
493 0 0 4 580 2806 0 0 0 2 4 this 3 2723  1 c 1 2865  
494 0 0 4 581 2806 0 0 0 1 4 this 3 2723  
495 0 0 6 582 2912 0 0 0 1 4 this 3 2723  
496 0 0 4 583 2806 0 0 0 2 4 this 3 2723  3 pos 1 2912  
497 0 0 4 583 2806 0 0 0 3 4 this 3 2723  3 off 1 2912  3 dir 1 2705  
498 0 0 6 579 2913 0 0 0 1 4 this 3 2723  
499 0 0 6 565 2670 0 0 0 1 4 this 3 2914  
500 0 0 6 566 2670 0 0 0 1 4 this 3 2914  
501 0 0 6 567 2670 0 0 0 1 4 this 3 2914  
502 0 0 6 568 2670 0 0 0 1 4 this 3 2914  
503 0 0 4 569 2806 0 0 0 1 4 this 3 2913  
504 0 0 7 594 2918 1834 0 10 /**
 *
 */ 1 4 copy 1 2916  
505 0 0 7 594 2918 1834 0 10 /**
 *
 */ 1 7 pattern 1 2802  
506 0 0 6 595 2918 0 0 0 2 4 this 3 2918  4 copy 1 2916  
507 0 0 6 596 2670 0 0 0 2 4 this 3 2916  5 other 1 2916  
508 0 0 6 597 2670 0 0 0 2 4 this 3 2916  5 other 1 2916  
509 0 0 6 598 2670 0 0 0 2 4 this 3 2916  5 other 1 2916  
510 0 0 4 599 2806 0 0 74 /**
 * Changes the pattern string that the GlobPattern object matches.
 */ 2 4 this 3 2918  7 pattern 1 2802  
511 0 0 6 600 2802 0 0 74 /**
 * Returns the pattern string that the GlobPattern object matches.
 */ 1 4 this 3 2916  
512 0 0 4 602 2806 0 0 122 /**
 * Sets whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */ 2 4 this 3 2918  14 case_sensitive 1 2670  
513 0 0 6 603 2670 0 0 125 /**
 * Returns whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */ 1 4 this 3 2916  
514 0 0 4 605 2806 0 0 72 /**
 * Specifies a set of characters that are not matched by * or ?.
 */ 2 4 this 3 2918  13 nomatch_chars 1 2802  
515 0 0 6 606 2802 0 0 72 /**
 * Returns the set of characters that are not matched by * or ?.
 */ 1 4 this 3 2916  
516 0 0 6 608 2670 0 0 85 /**
 * Returns true if the candidate string matches the pattern, false otherwise.
 */ 2 4 this 3 2916  9 candidate 1 2802  
517 0 0 4 609 2806 0 0 10 /**
 *
 */ 2 4 this 3 2916  3 out 1 2723  
518 0 0 6 610 2670 0 0 0 1 4 this 3 2916  
519 0 0 6 611 2802 0 0 0 1 4 this 3 2916  
520 0 0 6 612 2798 0 0 0 2 4 this 3 2916  3 cwd 1 2864  
521 0 0 6 612 2671 0 0 0 3 4 this 3 2916  7 results 1 2867  3 cwd 1 2864  
522 0 0 7 615 2919 1841 0 10 /**
 *
 */ 0 
523 0 0 7 615 2919 1841 0 10 /**
 *
 */ 3 6 source 1 2713  11 owns_source 1 2670  8 password 1 2802  
524 0 0 6 616 2919 0 0 10 /**
 *
 */ 4 4 this 3 2919  6 source 1 2713  11 owns_source 1 2670  8 password 1 2802  
525 0 0 6 617 2919 0 0 124 /**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */ 1 4 this 3 2919  
526 0 0 6 618 2802 0 0 74 /**
 * Returns the encryption algorithm that was read from the stream.
 */ 1 4 this 3 2920  
527 0 0 6 619 2671 0 0 85 /**
 * Returns the encryption key length, in bits, that was read from the stream.
 */ 1 4 this 3 2920  
528 0 0 6 620 2671 0 0 63 /**
 * Returns the value that was was read from the stream.
 */ 1 4 this 3 2920  
529 0 0 7 626 2922 1843 0 10 /**
 *
 */ 0 
530 0 0 7 626 2922 1843 0 10 /**
 *
 */ 2 8 filename 1 2802  4 mode 1 2706  
531 0 0 4 628 2806 0 0 10 /**
 *
 */ 3 4 this 3 2922  8 filename 1 2802  4 mode 1 2706  
532 0 0 4 629 2806 0 0 10 /**
 *
 */ 1 4 this 3 2922  
533 0 0 7 636 2923 1851 0 10 /**
 *
 */ 1 6 stream 1 2713  
534 0 0 6 638 2713 0 0 55 /**
 * Returns the istream this object is wrapping.
 */ 1 4 this 3 2924  
535 0 0 6 635 2926 0 0 0 1 4 this 3 2923  
536 0 0 4 632 2806 0 0 572 /**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */ 1 4 this 3 2926  
537 0 0 4 633 2806 0 0 135 /**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */ 1 4 this 3 2926  
538 0 0 7 642 2927 1857 0 10 /**
 *
 */ 0 
539 0 0 6 643 2670 0 0 198 /**
 * Returns true if there is at least one line of text (or even a partial line)
 * available in the LineStream object.  If this returns true, the line may
 * then be retrieved via get_line().
 */ 1 4 this 3 2928  
540 0 0 6 644 2802 0 0 275 /**
 * Extracts and returns the next line (or partial line) of text available in
 * the LineStream object.  Once the line has been extracted, you may call
 * has_newline() to determine whether or not there was an explicit newline
 * character written following this line.
 */ 1 4 this 3 2927  
541 0 0 6 645 2670 0 0 206 /**
 * Returns true if the line of text most recently returned by get_line() was
 * written out with a terminating newline, or false if a newline character has
 * not yet been written to the LineStream.
 */ 1 4 this 3 2928  
542 0 0 6 648 2812 0 0 110 /**
 * Returns the total number of bytes consumed by all the pages allocated
 * internally by this object.
 */ 0 
543 0 0 6 649 2812 0 0 114 /**
 * Returns the total number of bytes requested by the application in calls to
 * NeverFreeMemory::alloc().
 */ 0 
544 0 0 6 650 2812 0 0 178 /**
 * Returns the difference between get_total_alloc() and get_total_used().
 * This represents bytes in allocated pages that have not (yet) been used by
 * the application.
 */ 0 
545 0 0 7 653 2930 1863 0 0 0 
546 0 0 7 653 2930 1863 0 0 1 6 param0 0 2931  
547 0 0 4 655 2806 0 0 0 3 4 this 3 2930  11 ostream_ptr 1 2723  12 delete_later 1 2670  
548 0 0 6 656 2723 0 0 0 1 4 this 3 2931  
549 0 0 4 658 2806 0 0 0 1 4 this 3 2930  
550 0 0 6 659 2670 0 0 0 1 4 this 3 2931  
551 0 0 4 660 2806 0 0 0 1 4 this 3 2931  
552 0 0 6 661 2670 0 0 637 /**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */ 1 4 this 3 2931  
553 0 0 6 662 2802 0 0 100 /**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */ 1 4 this 3 2931  
554 0 0 4 663 2806 0 0 114 /**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */ 1 4 this 3 2930  
555 0 0 6 664 2719 0 0 0 1 4 this 3 2930  
556 0 0 6 665 2719 0 0 0 2 4 this 3 2930  8 fullname 1 2802  
557 0 0 6 665 2719 0 0 0 3 4 this 3 2930  8 basename 1 2802  15 parent_category 1 2719  
558 0 0 6 665 2719 0 0 0 3 4 this 3 2930  8 basename 1 2802  15 parent_fullname 1 2802  
559 0 0 6 666 2723 0 0 0 0 
560 0 0 6 667 2723 0 0 0 0 
561 0 0 4 668 2806 0 0 0 1 3 str 1 2802  
562 0 0 6 669 2930 0 0 0 0 
563 0 0 7 703 2719 1905 0 0 1 6 param0 0 2933  
564 0 0 6 675 2802 0 0 10 /**
 *
 */ 1 4 this 3 2933  
565 0 0 6 676 2802 0 0 10 /**
 *
 */ 1 4 this 3 2933  
566 0 0 6 677 2718 0 0 10 /**
 *
 */ 1 4 this 3 2933  
567 0 0 4 678 2806 0 0 150 /**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */ 2 4 this 3 2719  8 severity 1 2718  
568 0 0 6 683 2670 0 0 110 /**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */ 2 4 this 3 2933  8 severity 1 2718  
569 0 0 6 684 2670 0 0 51 /**
 * A shorthand way to write is_on(NS_spam).
 */ 1 4 this 3 2933  
570 0 0 6 685 2670 0 0 52 /**
 * A shorthand way to write is_on(NS_debug).
 */ 1 4 this 3 2933  
571 0 0 6 686 2670 0 0 51 /**
 * A shorthand way to write is_on(NS_info).
 */ 1 4 this 3 2933  
572 0 0 6 687 2670 0 0 54 /**
 * A shorthand way to write is_on(NS_warning).
 */ 1 4 this 3 2933  
573 0 0 6 688 2670 0 0 52 /**
 * A shorthand way to write is_on(NS_error).
 */ 1 4 this 3 2933  
574 0 0 6 689 2670 0 0 52 /**
 * A shorthand way to write is_on(NS_fatal).
 */ 1 4 this 3 2933  
575 0 0 6 690 2723 0 0 0 3 4 this 3 2933  8 severity 1 2718  6 prefix 1 2670  
576 0 0 6 691 2723 0 0 49 /**
 * A shorthand way to write out(NS_spam).
 */ 2 4 this 3 2933  6 prefix 1 2670  
577 0 0 6 692 2723 0 0 50 /**
 * A shorthand way to write out(NS_debug).
 */ 2 4 this 3 2933  6 prefix 1 2670  
578 0 0 6 693 2723 0 0 49 /**
 * A shorthand way to write out(NS_info).
 */ 2 4 this 3 2933  6 prefix 1 2670  
579 0 0 6 694 2723 0 0 52 /**
 * A shorthand way to write out(NS_warning).
 */ 2 4 this 3 2933  6 prefix 1 2670  
580 0 0 6 695 2723 0 0 50 /**
 * A shorthand way to write out(NS_error).
 */ 2 4 this 3 2933  6 prefix 1 2670  
581 0 0 6 696 2723 0 0 50 /**
 * A shorthand way to write out(NS_fatal).
 */ 2 4 this 3 2933  6 prefix 1 2670  
582 0 0 6 697 2812 0 0 0 1 4 this 3 2933  
583 0 0 6 698 2719 0 0 0 2 4 this 3 2933  1 i 1 2812  
584 0 0 4 702 2806 0 0 0 1 5 delta 1 2871  
585 0 0 6 671 2935 0 0 0 1 4 this 3 2719  
586 0 0 6 672 2719 0 0 0 1 4 this 3 2935  
587 0 0 6 673 2838 0 0 0 1 4 this 3 2719  
588 0 0 6 674 2719 0 0 0 1 4 this 3 2838  
589 0 0 7 706 2936 1915 0 10 /**
 *
 */ 0 
590 0 0 7 706 2936 1915 0 10 /**
 *
 */ 3 4 dest 1 2723  9 owns_dest 1 2670  8 password 1 2802  
591 0 0 6 707 2936 0 0 10 /**
 *
 */ 4 4 this 3 2936  4 dest 1 2723  9 owns_dest 1 2670  8 password 1 2802  
592 0 0 6 708 2936 0 0 120 /**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */ 1 4 this 3 2936  
593 0 0 4 709 2806 0 0 383 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */ 2 4 this 3 2936  9 algorithm 1 2802  
594 0 0 4 710 2806 0 0 347 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */ 2 4 this 3 2936  10 key_length 1 2671  
595 0 0 4 711 2806 0 0 495 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */ 2 4 this 3 2936  15 iteration_count 1 2671  
596 0 0 6 713 2802 0 0 74 /**
 * Returns the encryption algorithm that was read from the stream.
 */ 1 4 this 3 2937  
597 0 0 6 715 2671 0 0 85 /**
 * Returns the encryption key length, in bits, that was read from the stream.
 */ 1 4 this 3 2937  
598 0 0 6 717 2671 0 0 63 /**
 * Returns the value that was was read from the stream.
 */ 1 4 this 3 2937  
599 0 0 7 720 2939 1917 0 10 /**
 *
 */ 0 
600 0 0 7 720 2939 1917 0 10 /**
 *
 */ 2 8 filename 1 2802  4 mode 1 2706  
601 0 0 4 722 2806 0 0 10 /**
 *
 */ 3 4 this 3 2939  8 filename 1 2802  4 mode 1 2706  
602 0 0 4 723 2806 0 0 10 /**
 *
 */ 1 4 this 3 2939  
603 0 0 7 726 2940 1922 0 10 /**
 *
 */ 1 6 stream 1 2723  
604 0 0 6 728 2723 0 0 55 /**
 * Returns the ostream this object is wrapping.
 */ 1 4 this 3 2941  
605 0 0 6 725 2926 0 0 0 1 4 this 3 2940  
606 0 0 7 733 2943 1941 0 0 1 4 copy 1 2796  
607 0 0 7 733 2943 1941 0 0 1 6 source 1 2798  
608 0 0 7 733 2943 1941 0 0 1 11 type_handle 1 2883  
609 0 0 7 734 2943 1941 0 0 2 1 n 1 2801  11 type_handle 1 2883  
610 0 0 6 735 2801 0 0 0 1 4 this 3 2796  
611 0 0 4 736 2806 0 0 0 2 4 this 3 2943  1 x 1 2682  
612 0 0 4 737 2806 0 0 0 1 4 this 3 2943  
613 0 0 6 738 2682 0 0 0 2 4 this 3 2796  1 n 1 2801  
614 0 0 4 739 2806 0 0 0 3 4 this 3 2943  1 n 1 2801  5 value 1 2682  
615 0 0 6 740 2682 0 0 0 2 4 this 3 2796  1 n 1 2801  
616 0 0 4 741 2806 0 0 0 3 4 this 3 2943  1 n 1 2801  5 value 1 2682  
617 0 0 6 742 2802 0 0 0 1 4 this 3 2796  
618 0 0 4 743 2806 0 0 0 2 4 this 3 2943  4 data 1 2802  
619 0 0 6 744 2802 0 0 0 3 4 this 3 2796  1 n 1 2801  5 count 1 2801  
620 0 0 4 745 2806 0 0 0 4 4 this 3 2943  1 n 1 2801  5 count 1 2801  4 data 1 2802  
621 0 0 6 746 2671 0 0 0 1 4 this 3 2796  
622 0 0 6 747 2671 0 0 0 1 4 this 3 2796  
623 0 0 6 748 2671 0 0 0 3 4 this 3 2943  4 view 1 2803  5 flags 1 2671  
624 0 0 4 749 2806 0 0 0 2 4 this 3 2796  4 view 1 2803  
625 0 0 7 753 2944 1959 0 0 1 4 copy 1 2816  
626 0 0 7 753 2944 1959 0 0 1 6 source 1 2798  
627 0 0 7 753 2944 1959 0 0 1 11 type_handle 1 2883  
628 0 0 7 754 2944 1959 0 0 2 1 n 1 2801  11 type_handle 1 2883  
629 0 0 6 755 2801 0 0 0 1 4 this 3 2816  
630 0 0 4 756 2806 0 0 0 2 4 this 3 2944  1 x 1 2783  
631 0 0 4 757 2806 0 0 0 1 4 this 3 2944  
632 0 0 6 758 2783 0 0 0 2 4 this 3 2816  1 n 1 2801  
633 0 0 4 759 2806 0 0 0 3 4 this 3 2944  1 n 1 2801  5 value 1 2783  
634 0 0 6 760 2783 0 0 0 2 4 this 3 2816  1 n 1 2801  
635 0 0 4 761 2806 0 0 0 3 4 this 3 2944  1 n 1 2801  5 value 1 2783  
636 0 0 6 762 2802 0 0 0 1 4 this 3 2816  
637 0 0 4 763 2806 0 0 0 2 4 this 3 2944  4 data 1 2802  
638 0 0 6 764 2802 0 0 0 3 4 this 3 2816  1 n 1 2801  5 count 1 2801  
639 0 0 4 765 2806 0 0 0 4 4 this 3 2944  1 n 1 2801  5 count 1 2801  4 data 1 2802  
640 0 0 6 766 2671 0 0 0 1 4 this 3 2816  
641 0 0 6 767 2671 0 0 0 1 4 this 3 2816  
642 0 0 6 768 2671 0 0 0 3 4 this 3 2944  4 view 1 2803  5 flags 1 2671  
643 0 0 4 769 2806 0 0 0 2 4 this 3 2816  4 view 1 2803  
644 0 0 7 773 2945 1977 0 0 1 4 copy 1 2824  
645 0 0 7 773 2945 1977 0 0 1 6 source 1 2798  
646 0 0 7 773 2945 1977 0 0 1 11 type_handle 1 2883  
647 0 0 7 774 2945 1977 0 0 2 1 n 1 2801  11 type_handle 1 2883  
648 0 0 6 775 2801 0 0 0 1 4 this 3 2824  
649 0 0 4 776 2806 0 0 0 2 4 this 3 2945  1 x 1 2671  
650 0 0 4 777 2806 0 0 0 1 4 this 3 2945  
651 0 0 6 778 2671 0 0 0 2 4 this 3 2824  1 n 1 2801  
652 0 0 4 779 2806 0 0 0 3 4 this 3 2945  1 n 1 2801  5 value 1 2671  
653 0 0 6 780 2671 0 0 0 2 4 this 3 2824  1 n 1 2801  
654 0 0 4 781 2806 0 0 0 3 4 this 3 2945  1 n 1 2801  5 value 1 2671  
655 0 0 6 782 2802 0 0 0 1 4 this 3 2824  
656 0 0 4 783 2806 0 0 0 2 4 this 3 2945  4 data 1 2802  
657 0 0 6 784 2802 0 0 0 3 4 this 3 2824  1 n 1 2801  5 count 1 2801  
658 0 0 4 785 2806 0 0 0 4 4 this 3 2945  1 n 1 2801  5 count 1 2801  4 data 1 2802  
659 0 0 6 786 2671 0 0 0 1 4 this 3 2824  
660 0 0 6 787 2671 0 0 0 1 4 this 3 2824  
661 0 0 6 788 2671 0 0 0 3 4 this 3 2945  4 view 1 2803  5 flags 1 2671  
662 0 0 4 789 2806 0 0 0 2 4 this 3 2824  4 view 1 2803  
663 0 0 7 793 2946 1995 0 0 1 4 copy 1 2832  
664 0 0 7 793 2946 1995 0 0 1 6 source 1 2798  
665 0 0 7 793 2946 1995 0 0 1 11 type_handle 1 2883  
666 0 0 7 794 2946 1995 0 0 2 1 n 1 2801  11 type_handle 1 2883  
667 0 0 6 795 2801 0 0 0 1 4 this 3 2832  
668 0 0 4 796 2806 0 0 0 2 4 this 3 2946  1 x 1 2834  
669 0 0 4 797 2806 0 0 0 1 4 this 3 2946  
670 0 0 6 798 2834 0 0 0 2 4 this 3 2832  1 n 1 2801  
671 0 0 4 799 2806 0 0 0 3 4 this 3 2946  1 n 1 2801  5 value 1 2834  
672 0 0 6 800 2834 0 0 0 2 4 this 3 2832  1 n 1 2801  
673 0 0 4 801 2806 0 0 0 3 4 this 3 2946  1 n 1 2801  5 value 1 2834  
674 0 0 6 802 2802 0 0 0 1 4 this 3 2832  
675 0 0 4 803 2806 0 0 0 2 4 this 3 2946  4 data 1 2802  
676 0 0 6 804 2802 0 0 0 3 4 this 3 2832  1 n 1 2801  5 count 1 2801  
677 0 0 4 805 2806 0 0 0 4 4 this 3 2946  1 n 1 2801  5 count 1 2801  4 data 1 2802  
678 0 0 6 806 2671 0 0 0 1 4 this 3 2832  
679 0 0 6 807 2671 0 0 0 1 4 this 3 2832  
680 0 0 6 808 2671 0 0 0 3 4 this 3 2946  4 view 1 2803  5 flags 1 2671  
681 0 0 4 809 2806 0 0 0 2 4 this 3 2832  4 view 1 2803  
682 0 0 6 812 2802 0 0 0 0 
683 0 0 6 813 2802 0 0 0 0 
684 0 0 6 814 2802 0 0 0 0 
685 0 0 6 815 2802 0 0 0 0 
686 0 0 6 816 2671 0 0 0 0 
687 0 0 6 817 2671 0 0 0 0 
688 0 0 6 818 2671 0 0 0 0 
689 0 0 6 819 2670 0 0 0 0 
690 0 0 6 820 2671 0 0 0 0 
691 0 0 6 821 2802 0 0 0 0 
692 0 0 6 822 2802 0 0 0 0 
693 0 0 6 823 2802 0 0 0 0 
694 0 0 6 824 2802 0 0 0 0 
695 0 0 6 825 2802 0 0 0 0 
696 0 0 6 826 2670 0 0 0 2 4 this 3 2947  6 system 1 2802  
697 0 0 6 827 2812 0 0 0 1 4 this 3 2947  
698 0 0 6 828 2802 0 0 0 2 4 this 3 2947  1 n 1 2812  
699 0 0 6 831 2802 0 0 0 3 4 this 3 2947  6 system 1 2802  3 tag 1 2802  
700 0 0 4 832 2806 0 0 0 2 4 this 3 2949  6 system 1 2802  
701 0 0 4 833 2806 0 0 0 4 4 this 3 2949  6 system 1 2802  3 tag 1 2802  5 value 1 2802  
702 0 0 6 834 2670 0 0 0 2 4 this 3 2949  3 pad 1 2812  
703 0 0 4 835 2806 0 0 0 2 4 this 3 2947  3 out 1 2723  
704 0 0 4 836 2806 0 0 0 2 4 this 3 2947  3 out 1 2723  
705 0 0 6 837 2949 0 0 0 0 
706 0 0 7 838 2883 2155 0 0 0 
707 0 0 7 840 2952 2023 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 2950  
708 0 0 7 840 2952 2023 0 105 /**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */ 2 2 in 1 2713  11 owns_stream 1 2670  
709 0 0 6 841 2952 0 0 0 2 4 this 3 2952  4 copy 1 2950  
710 0 0 6 843 2713 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 2950  
711 0 0 6 845 2670 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 2952  
712 0 0 6 846 2953 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 2952  
713 0 0 6 847 2955 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 2952  
714 0 0 6 848 2956 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 2952  
715 0 0 6 849 2958 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 2952  
716 0 0 6 850 2688 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 2952  
717 0 0 6 851 2959 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 2952  
718 0 0 6 852 2961 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 2952  
719 0 0 6 853 2963 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 2952  
720 0 0 6 854 2783 0 0 186 /**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */ 1 4 this 3 2952  
721 0 0 6 855 2965 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 2952  
722 0 0 6 856 2956 0 0 55 /**
 * Extracts a signed big-endian 16-bit integer.
 */ 1 4 this 3 2952  
723 0 0 6 857 2958 0 0 55 /**
 * Extracts a signed big-endian 32-bit integer.
 */ 1 4 this 3 2952  
724 0 0 6 858 2688 0 0 55 /**
 * Extracts a signed big-endian 64-bit integer.
 */ 1 4 this 3 2952  
725 0 0 6 859 2959 0 0 58 /**
 * Extracts an unsigned big-endian 16-bit integer.
 */ 1 4 this 3 2952  
726 0 0 6 860 2961 0 0 58 /**
 * Extracts an unsigned big-endian 32-bit integer.
 */ 1 4 this 3 2952  
727 0 0 6 861 2963 0 0 58 /**
 * Extracts an unsigned big-endian 64-bit integer.
 */ 1 4 this 3 2952  
728 0 0 6 862 2783 0 0 197 /**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 1 4 this 3 2952  
729 0 0 6 863 2965 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 2952  
730 0 0 6 864 2802 0 0 0 1 4 this 3 2952  
731 0 0 6 865 2802 0 0 0 1 4 this 3 2952  
732 0 0 6 866 2802 0 0 0 1 4 this 3 2952  
733 0 0 6 867 2802 0 0 0 2 4 this 3 2952  4 size 1 2812  
734 0 0 4 868 2806 0 0 0 2 4 this 3 2952  4 size 1 2812  
735 0 0 6 869 2798 0 0 0 2 4 this 3 2952  4 size 1 2812  
736 0 0 6 870 2798 0 0 0 1 4 this 3 2952  
737 0 0 6 871 2798 0 0 0 1 4 this 3 2952  
738 0 0 7 877 2966 2057 0 10 /**
 *
 */ 1 6 stream 1 2735  
739 0 0 6 879 2735 0 0 56 /**
 * Returns the iostream this object is wrapping.
 */ 1 4 this 3 2967  
740 0 0 6 873 2923 0 0 0 1 4 this 3 2966  
741 0 0 6 874 2966 0 0 0 1 4 this 3 2923  
742 0 0 6 875 2940 0 0 0 1 4 this 3 2966  
743 0 0 6 876 2966 0 0 0 1 4 this 3 2940  
744 0 0 7 883 2971 2061 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 2969  
745 0 0 7 883 2971 2061 0 10 /**
 *
 */ 2 3 out 1 2723  11 owns_stream 1 2670  
746 0 0 6 884 2971 0 0 0 2 4 this 3 2971  4 copy 1 2969  
747 0 0 6 886 2723 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 2969  
748 0 0 4 888 2806 0 0 46 /**
 * Adds a boolean value to the stream.
 */ 2 4 this 3 2971  5 value 1 2670  
749 0 0 4 889 2806 0 0 53 /**
 * Adds a signed 8-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2953  
750 0 0 4 890 2806 0 0 56 /**
 * Adds an unsigned 8-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2955  
751 0 0 4 891 2806 0 0 54 /**
 * Adds a signed 16-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2956  
752 0 0 4 892 2806 0 0 54 /**
 * Adds a signed 32-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2958  
753 0 0 4 893 2806 0 0 54 /**
 * Adds a signed 64-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2688  
754 0 0 4 894 2806 0 0 57 /**
 * Adds an unsigned 16-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2959  
755 0 0 4 895 2806 0 0 57 /**
 * Adds an unsigned 32-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2961  
756 0 0 4 896 2806 0 0 57 /**
 * Adds an unsigned 64-bit integer to the stream.
 */ 2 4 this 3 2971  5 value 1 2963  
757 0 0 4 897 2806 0 0 196 /**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 2971  5 value 1 2783  
758 0 0 4 898 2806 0 0 61 /**
 * Adds a 64-bit floating-point number to the stream.
 */ 2 4 this 3 2971  5 value 1 2965  
759 0 0 4 899 2806 0 0 71 /**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 2971  5 value 1 2956  
760 0 0 4 900 2806 0 0 71 /**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 2971  5 value 1 2958  
761 0 0 4 901 2806 0 0 71 /**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 2971  5 value 1 2688  
762 0 0 4 902 2806 0 0 74 /**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 2971  5 value 1 2959  
763 0 0 4 903 2806 0 0 74 /**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 2971  5 value 1 2961  
764 0 0 4 904 2806 0 0 74 /**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 2971  5 value 1 2963  
765 0 0 4 905 2806 0 0 207 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */ 2 4 this 3 2971  5 value 1 2783  
766 0 0 4 906 2806 0 0 78 /**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */ 2 4 this 3 2971  5 value 1 2965  
767 0 0 4 907 2806 0 0 107 /**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 2971  3 str 1 2802  
768 0 0 4 908 2806 0 0 84 /**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */ 2 4 this 3 2971  3 str 1 2802  
769 0 0 4 909 2806 0 0 84 /**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */ 2 4 this 3 2971  3 str 1 2802  
770 0 0 4 910 2806 0 0 236 /**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 2971  3 str 1 2802  4 size 1 2812  
771 0 0 4 911 2806 0 0 0 2 4 this 3 2971  4 size 1 2812  
772 0 0 4 912 2806 0 0 0 2 4 this 3 2971  4 data 1 2798  
773 0 0 4 913 2806 0 0 50 /**
 * Calls flush() on the underlying stream.
 */ 1 4 this 3 2971  
774 0 0 4 914 2806 0 0 132 /**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */ 2 4 this 3 2971  3 str 1 2802  
775 0 0 4 916 2806 0 0 0 2 4 this 3 2971  5 value 1 2671  
776 0 0 6 915 2671 0 0 0 1 4 this 3 2969  
777 0 0 7 920 2972 2129 0 10 /**
 *
 */ 0 
778 0 0 7 920 2972 2129 0 10 /**
 *
 */ 1 4 copy 1 2973  
779 0 0 4 921 2806 0 0 374 /**
 * Specifies how the string set via set_text() is to be interpreted.  The
 * default, E_iso8859, means a standard string with one-byte characters (i.e.
 * ASCII).  Other encodings are possible to take advantage of character sets
 * with more than 256 characters.
 *
 * This affects only future calls to set_text(); it does not change text that
 * was set previously.
 */ 2 4 this 3 2972  8 encoding 1 2738  
780 0 0 6 922 2738 0 0 116 /**
 * Returns the encoding by which the string set via set_text() is to be
 * interpreted.  See set_encoding().
 */ 1 4 this 3 2973  
781 0 0 4 923 2806 0 0 126 /**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */ 1 8 encoding 1 2738  
782 0 0 6 924 2738 0 0 126 /**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */ 0 
783 0 0 4 925 2806 0 0 275 /**
 * Changes the text that is stored in the encoder.  The text should be encoded
 * according to the method indicated by set_encoding().  Subsequent calls to
 * get_text() will return this same string, while get_wtext() will return the
 * decoded version of the string.
 */ 2 4 this 3 2972  4 text 1 2802  
784 0 0 4 925 2806 0 0 285 /**
 * The two-parameter version of set_text() accepts an explicit encoding; the
 * text is immediately decoded and stored as a wide-character string.
 * Subsequent calls to get_text() will return the same text re-encoded using
 * whichever encoding is specified by set_encoding().
 */ 3 4 this 3 2972  4 text 1 2802  8 encoding 1 2738  
785 0 0 4 926 2806 0 0 49 /**
 * Removes the text from the TextEncoder.
 */ 1 4 this 3 2972  
786 0 0 6 927 2670 0 0 10 /**
 *
 */ 1 4 this 3 2973  
787 0 0 4 928 2806 0 0 0 1 4 this 3 2972  
788 0 0 4 929 2806 0 0 0 1 4 this 3 2972  
789 0 0 6 930 2802 0 0 80 /**
 * Returns the current text, as encoded via the current encoding system.
 */ 1 4 this 3 2973  
790 0 0 6 930 2802 0 0 82 /**
 * Returns the current text, as encoded via the indicated encoding system.
 */ 2 4 this 3 2973  8 encoding 1 2738  
791 0 0 4 931 2806 0 0 70 /**
 * Appends the indicates string to the end of the stored text.
 */ 2 4 this 3 2972  4 text 1 2802  
792 0 0 4 932 2806 0 0 128 /**
 * Appends a single character to the end of the stored text.  This may be a
 * wide character, up to 16 bits in Unicode.
 */ 2 4 this 3 2972  9 character 1 2671  
793 0 0 6 933 2812 0 0 169 /**
 * Returns the number of characters in the stored text.  This is a count of
 * wide characters, after the string has been decoded according to
 * set_encoding().
 */ 1 4 this 3 2973  
794 0 0 6 934 2671 0 0 196 /**
 * Returns the Unicode value of the nth character in the stored text.  This
 * may be a wide character (greater than 255), after the string has been
 * decoded according to set_encoding().
 */ 2 4 this 3 2973  5 index 1 2812  
795 0 0 4 935 2806 0 0 193 /**
 * Sets the Unicode value of the nth character in the stored text.  This may
 * be a wide character (greater than 255), after the string has been decoded
 * according to set_encoding().
 */ 3 4 this 3 2972  5 index 1 2812  9 character 1 2671  
796 0 0 6 936 2802 0 0 101 /**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */ 2 4 this 3 2973  5 index 1 2812  
797 0 0 6 936 2802 0 0 101 /**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */ 3 4 this 3 2973  5 index 1 2812  8 encoding 1 2738  
798 0 0 6 937 2802 0 0 723 /**
 * Returns the text associated with the node, converted as nearly as possible
 * to a fully-ASCII representation.  This means replacing accented letters
 * with their unaccented ASCII equivalents.
 *
 * It is possible that some characters in the string cannot be converted to
 * ASCII.  (The string may involve symbols like the copyright symbol, for
 * instance, or it might involve letters in some other alphabet such as Greek
 * or Cyrillic, or even Latin letters like thorn or eth that are not part of
 * the ASCII character set.)  In this case, as much of the string as possible
 * will be converted to ASCII, and the nonconvertible characters will remain
 * encoded in the encoding specified by set_encoding().
 */ 1 4 this 3 2973  
799 0 0 6 938 2802 0 0 277 /**
 * Given the indicated text string, which is assumed to be encoded via the
 * encoding "from", decodes it and then reencodes it into the encoding "to",
 * and returns the newly encoded string.  This does not change or affect any
 * properties on the TextEncoder itself.
 */ 3 4 text 1 2802  4 from 1 2738  2 to 1 2738  
800 0 0 6 939 2670 0 0 152 /**
 * Returns true if the indicated character is an alphabetic letter, false
 * otherwise.  This is akin to ctype's isalpha(), extended to Unicode.
 */ 1 9 character 1 2671  
801 0 0 6 940 2670 0 0 147 /**
 * Returns true if the indicated character is a numeric digit, false
 * otherwise.  This is akin to ctype's isdigit(), extended to Unicode.
 */ 1 9 character 1 2671  
802 0 0 6 941 2670 0 0 150 /**
 * Returns true if the indicated character is a punctuation mark, false
 * otherwise.  This is akin to ctype's ispunct(), extended to Unicode.
 */ 1 9 character 1 2671  
803 0 0 6 942 2670 0 0 150 /**
 * Returns true if the indicated character is a lowercase letter, false
 * otherwise.  This is akin to ctype's islower(), extended to Unicode.
 */ 1 9 character 1 2671  
804 0 0 6 943 2670 0 0 151 /**
 * Returns true if the indicated character is an uppercase letter, false
 * otherwise.  This is akin to ctype's isupper(), extended to Unicode.
 */ 1 9 character 1 2671  
805 0 0 6 944 2670 0 0 151 /**
 * Returns true if the indicated character is a whitespace letter, false
 * otherwise.  This is akin to ctype's isspace(), extended to Unicode.
 */ 1 9 character 1 2671  
806 0 0 6 945 2671 0 0 135 /**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's toupper(), extended to Unicode.
 */ 1 9 character 1 2671  
807 0 0 6 946 2671 0 0 135 /**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's tolower(), extended to Unicode.
 */ 1 9 character 1 2671  
808 0 0 6 947 2802 0 0 103 /**
 * Converts the string to uppercase, assuming the string is encoded in the
 * default encoding.
 */ 1 6 source 1 2802  
809 0 0 6 947 2802 0 0 105 /**
 * Converts the string to uppercase, assuming the string is encoded in the
 * indicated encoding.
 */ 2 6 source 1 2802  8 encoding 1 2738  
810 0 0 6 948 2802 0 0 103 /**
 * Converts the string to lowercase, assuming the string is encoded in the
 * default encoding.
 */ 1 6 source 1 2802  
811 0 0 6 948 2802 0 0 105 /**
 * Converts the string to lowercase, assuming the string is encoded in the
 * indicated encoding.
 */ 2 6 source 1 2802  8 encoding 1 2738  
812 0 0 4 949 2806 0 0 191 /**
 * Changes the text that is stored in the encoder.  Subsequent calls to
 * get_wtext() will return this same string, while get_text() will return the
 * encoded version of the string.
 */ 2 4 this 3 2972  5 wtext 1 2802  
813 0 0 6 950 2802 0 0 91 /**
 * Returns the text associated with the TextEncoder, as a wide-character
 * string.
 */ 1 4 this 3 2973  
814 0 0 4 951 2806 0 0 85 /**
 * Appends the indicates string to the end of the stored wide-character text.
 */ 2 4 this 3 2972  4 text 1 2802  
815 0 0 6 952 2802 0 0 0 1 4 this 3 2973  
816 0 0 6 953 2670 0 0 0 1 4 this 3 2973  
817 0 0 6 954 2802 0 0 0 2 2 ch 1 2975  8 encoding 1 2738  
818 0 0 6 955 2802 0 0 102 /**
 * Encodes a wide-text string into a single-char string, according to the
 * current encoding.
 */ 2 4 this 3 2973  5 wtext 1 2802  
819 0 0 6 955 2802 0 0 0 2 5 wtext 1 2802  8 encoding 1 2738  
820 0 0 6 956 2802 0 0 105 /**
 * Returns the given wstring decoded to a single-byte string, via the current
 * encoding system.
 */ 2 4 this 3 2973  4 text 1 2802  
821 0 0 6 956 2802 0 0 0 2 4 text 1 2802  8 encoding 1 2738  
822 0 0 7 988 2883 2155 0 0 0 
823 0 0 7 988 2883 2155 0 0 1 6 param0 0 2976  
824 0 0 7 960 2883 2155 0 0 1 8 classobj 1 2978  
825 0 0 6 961 2670 0 0 0 2 4 this 3 2976  5 other 1 2976  
826 0 0 6 962 2670 0 0 0 2 4 this 3 2976  5 other 1 2976  
827 0 0 6 963 2670 0 0 0 2 4 this 3 2976  5 other 1 2976  
828 0 0 6 964 2670 0 0 0 2 4 this 3 2976  5 other 1 2976  
829 0 0 6 965 2670 0 0 0 2 4 this 3 2976  5 other 1 2976  
830 0 0 6 966 2670 0 0 0 2 4 this 3 2976  5 other 1 2976  
831 0 0 6 967 2671 0 0 207 /**
 * Sorts TypeHandles arbitrarily (according to <, >, etc.).  Returns a number
 * less than 0 if this type sorts before the other one, greater than zero if
 * it sorts after, 0 if they are equivalent.
 */ 2 4 this 3 2976  5 other 1 2976  
832 0 0 6 968 2812 0 0 54 /**
 * Returns a hash code suitable for phash_map.
 */ 1 4 this 3 2976  
833 0 0 6 969 2802 0 0 216 /**
 * Returns the name of the type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 2 4 this 3 2976  6 object 1 2981  
834 0 0 6 970 2670 0 0 268 /**
 * Returns true if this type is derived from the indicated type, false
 * otherwise.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 3 4 this 3 2976  6 parent 1 2883  6 object 1 2981  
835 0 0 6 971 2671 0 0 506 /**
 * Returns the number of parent classes that this type is known to have.  This
 * may then be used to index into get_parent_class().  The result will be 0 if
 * this class does not inherit from any other classes, 1 if normal, single
 * inheritance is in effect, or greater than one if multiple inheritance is in
 * effect.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 2 4 this 3 2976  6 object 1 2981  
836 0 0 7 972 2883 2155 0 129 /**
 * Returns the nth parent class of this type.  The index should be in the
 * range 0 <= index < get_num_parent_classes().
 */ 2 4 this 3 2976  5 index 1 2671  
837 0 0 6 973 2671 0 0 314 /**
 * Returns the number of child classes that this type is known to have.  This
 * may then be used to index into get_child_class().
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 2 4 this 3 2976  6 object 1 2981  
838 0 0 7 974 2883 2155 0 127 /**
 * Returns the nth child class of this type.  The index should be in the range
 * 0 <= index < get_num_child_classes().
 */ 2 4 this 3 2976  5 index 1 2671  
839 0 0 7 975 2883 2155 0 577 /**
 * Returns the parent class that is in a direct line of inheritance to the
 * indicated ancestor class.  This is useful in the presence of multiple
 * inheritance to try to determine what properties an unknown type may have.
 *
 * The return value is TypeHandle::none() if the type does not inherit from
 * the ancestor.  If ancestor is the same as this type, the return value is
 * this type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 3 4 this 3 2976  8 ancestor 1 2883  6 object 1 2981  
840 0 0 6 976 2671 0 0 0 2 4 this 3 2976  10 legal_vals 1 2982  
841 0 0 6 977 2812 0 0 0 2 4 this 3 2976  12 memory_class 1 2740  
842 0 0 4 978 2806 0 0 0 3 4 this 3 2883  12 memory_class 1 2740  4 size 1 2812  
843 0 0 4 979 2806 0 0 0 3 4 this 3 2883  12 memory_class 1 2740  4 size 1 2812  
844 0 0 6 980 2671 0 0 354 /**
 * Returns the integer index associated with this TypeHandle.  Each different
 * TypeHandle will have a different index.  However, you probably shouldn't be
 * using this method; you should just treat the TypeHandles as opaque classes.
 * This is provided for the convenience of non-C++ scripting languages to
 * build a hashtable of TypeHandles.
 */ 1 4 this 3 2976  
845 0 0 4 981 2806 0 0 10 /**
 *
 */ 2 4 this 3 2976  3 out 1 2723  
846 0 0 7 982 2883 2155 0 85 /**
 * Returns a special zero-valued TypeHandle that is used to indicate no type.
 */ 0 
847 0 0 6 983 2670 0 0 0 1 4 this 3 2976  
848 0 0 7 1014 2987 2176 0 0 1 6 param0 0 2985  
849 0 0 7 991 2883 2155 0 0 2 4 this 3 2987  4 name 1 2802  
850 0 0 4 992 2806 0 0 0 3 4 this 3 2987  5 child 1 2883  6 parent 1 2883  
851 0 0 4 993 2806 0 0 0 3 4 this 3 2987  4 type 1 2883  4 name 1 2802  
852 0 0 7 994 2883 2155 0 0 2 4 this 3 2985  4 name 1 2802  
853 0 0 7 995 2883 2155 0 0 2 4 this 3 2985  2 id 1 2671  
854 0 0 6 996 2802 0 0 0 3 4 this 3 2985  4 type 1 2883  6 object 1 2981  
855 0 0 6 997 2670 0 0 0 4 4 this 3 2987  5 child 1 2883  4 base 1 2883  12 child_object 1 2981  
856 0 0 6 998 2671 0 0 0 1 4 this 3 2987  
857 0 0 7 999 2883 2155 0 0 2 4 this 3 2987  1 n 1 2671  
858 0 0 6 1001 2671 0 0 0 1 4 this 3 2987  
859 0 0 7 1002 2883 2155 0 0 2 4 this 3 2987  1 n 1 2671  
860 0 0 6 1004 2671 0 0 0 3 4 this 3 2985  5 child 1 2883  12 child_object 1 2981  
861 0 0 7 1005 2883 2155 0 0 3 4 this 3 2985  5 child 1 2883  5 index 1 2671  
862 0 0 6 1006 2671 0 0 0 3 4 this 3 2985  5 child 1 2883  12 child_object 1 2981  
863 0 0 7 1007 2883 2155 0 0 3 4 this 3 2985  5 child 1 2883  5 index 1 2671  
864 0 0 7 1008 2883 2155 0 0 4 4 this 3 2987  5 child 1 2883  4 base 1 2883  12 child_object 1 2981  
865 0 0 4 1009 2806 0 0 0 0 
866 0 0 4 1010 2806 0 0 0 2 4 this 3 2985  3 out 1 2723  
867 0 0 6 1011 2987 0 0 65 /**
 * Returns the pointer to the global TypeRegistry object.
 */ 0 
868 0 0 7 1020 2883 2155 0 76 // Derived classes should override this function to return get_class_type(). 1 4 this 3 2988  
869 0 0 6 1022 2671 0 0 180 /**
 * Returns the internal index number associated with this object's TypeHandle,
 * a unique number for each different type.  This is equivalent to
 * get_type().get_index().
 */ 1 4 this 3 2988  
870 0 0 6 1023 2670 0 0 84 /**
 * Returns true if the current object is or derives from the indicated type.
 */ 2 4 this 3 2988  6 handle 1 2883  
871 0 0 6 1024 2670 0 0 76 /**
 * Returns true if the current object is the indicated type exactly.
 */ 2 4 this 3 2988  6 handle 1 2883  
872 0 0 7 1025 2883 2155 0 0 0 
873 0 0 6 1017 2935 0 0 0 1 4 this 3 2981  
874 0 0 6 1018 2981 0 0 0 1 4 this 3 2935  
875 0 0 7 1027 2880 2187 0 0 0 
876 0 0 4 1028 2806 0 0 0 1 4 this 3 2880  
877 0 0 7 1031 2874 2190 0 0 0 
878 0 0 4 1032 2806 0 0 0 1 4 this 3 2874  
879 0 0 7 1035 2877 2193 0 0 0 
880 0 0 4 1036 2806 0 0 0 1 4 this 3 2877  
881 0 0 6 1043 2671 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2990  
882 0 0 4 1044 2806 0 0 538 /**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 2990  
883 0 0 6 1045 2670 0 0 865 /**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2990  
884 0 0 6 1047 2670 0 0 135 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 2990  
885 0 0 6 1048 2670 0 0 144 /**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 2990  
886 0 0 7 1049 2883 2155 0 0 0 
887 0 0 6 1040 2935 0 0 0 1 4 this 3 2992  
888 0 0 7 1041 2992 2197 0 0 1 4 this 3 2935  
889 0 0 7 1052 2995 2197 0 0 1 6 param0 0 2993  
890 0 0 6 1051 2671 0 0 10 /**
 *
 */ 1 4 this 3 2993  
891 0 0 7 1062 2996 2215 0 0 0 
892 0 0 7 1062 2996 2215 0 0 1 6 param0 0 2997  
893 0 0 4 1061 2806 0 0 0 2 4 this 3 2996  5 level 1 2682  
894 0 0 6 1065 2671 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2999  
895 0 0 4 1066 2806 0 0 107 /**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 2999  
896 0 0 6 1067 2670 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2999  
897 0 0 6 1068 2670 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2999  
898 0 0 4 1069 2806 0 0 186 /**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */ 1 4 this 3 2999  
899 0 0 7 1070 2883 2155 0 0 0 
900 0 0 7 1072 3001 2179 0 40 /**
 * Constructs an empty datagram.
 */ 0 
901 0 0 7 1072 3001 2179 0 10 /**
 *
 */ 1 4 copy 1 3002  
902 0 0 7 1072 3001 2179 0 64 /**
 * Constructs a datagram from an existing block of data.
 */ 1 4 data 1 2802  
903 0 0 6 1073 3001 0 0 0 2 4 this 3 3001  4 copy 1 3002  
904 0 0 4 1074 2806 0 0 90 /**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */ 1 4 this 3 3001  
905 0 0 4 1075 2806 0 0 111 /**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */ 3 4 this 3 3002  3 out 1 2723  6 indent 1 2962  
906 0 0 4 1076 2806 0 0 48 /**
 * Adds a boolean value to the datagram.
 */ 2 4 this 3 3001  5 value 1 2670  
907 0 0 4 1077 2806 0 0 55 /**
 * Adds a signed 8-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2953  
908 0 0 4 1078 2806 0 0 58 /**
 * Adds an unsigned 8-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2955  
909 0 0 4 1079 2806 0 0 56 /**
 * Adds a signed 16-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2956  
910 0 0 4 1080 2806 0 0 56 /**
 * Adds a signed 32-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2958  
911 0 0 4 1081 2806 0 0 56 /**
 * Adds a signed 64-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2688  
912 0 0 4 1082 2806 0 0 59 /**
 * Adds an unsigned 16-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2959  
913 0 0 4 1083 2806 0 0 59 /**
 * Adds an unsigned 32-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2961  
914 0 0 4 1084 2806 0 0 59 /**
 * Adds an unsigned 64-bit integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2963  
915 0 0 4 1085 2806 0 0 197 /**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 3001  5 value 1 3004  
916 0 0 4 1086 2806 0 0 63 /**
 * Adds a 64-bit floating-point number to the datagram.
 */ 2 4 this 3 3001  5 value 1 2965  
917 0 0 4 1087 2806 0 0 105 /**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */ 2 4 this 3 3001  5 value 1 2782  
918 0 0 4 1088 2806 0 0 67 // These functions pack numbers big-endian, in case that's desired. 2 4 this 3 3001  5 value 1 2956  
919 0 0 4 1089 2806 0 0 67 /**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2958  
920 0 0 4 1090 2806 0 0 67 /**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2688  
921 0 0 4 1091 2806 0 0 70 /**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2959  
922 0 0 4 1092 2806 0 0 70 /**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2961  
923 0 0 4 1093 2806 0 0 70 /**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 3001  5 value 1 2963  
924 0 0 4 1094 2806 0 0 94 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */ 2 4 this 3 3001  5 value 1 3004  
925 0 0 4 1095 2806 0 0 74 /**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */ 2 4 this 3 3001  5 value 1 2965  
926 0 0 4 1096 2806 0 0 109 /**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 3001  3 str 1 2802  
927 0 0 4 1097 2806 0 0 116 /**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */ 2 4 this 3 3001  3 str 1 2802  
928 0 0 4 1098 2806 0 0 86 /**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */ 2 4 this 3 3001  3 str 1 2802  
929 0 0 4 1099 2806 0 0 238 /**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 3001  3 str 1 2802  4 size 1 2812  
930 0 0 4 1100 2806 0 0 58 /**
 * Adds a variable-length wstring to the datagram.
 */ 2 4 this 3 3001  3 str 1 2802  
931 0 0 4 1101 2806 0 0 67 /**
 * Adds the indicated number of zero bytes to the datagram.
 */ 2 4 this 3 3001  4 size 1 2812  
932 0 0 4 1102 2806 0 0 65 /**
 * Appends some more raw data to the end of the datagram.
 */ 2 4 this 3 3001  4 data 1 2802  
933 0 0 6 1104 2802 0 0 51 /**
 * Returns the datagram's data as a string.
 */ 1 4 this 3 3002  
934 0 0 4 1105 2806 0 0 69 /**
 * Returns a pointer to the beginning of the datagram's data.
 */ 1 4 this 3 3002  
935 0 0 6 1106 2812 0 0 55 /**
 * Returns the number of bytes in the datagram.
 */ 1 4 this 3 3002  
936 0 0 4 1107 2806 0 0 199 /**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */ 2 4 this 3 3001  4 data 1 3005  
937 0 0 4 1108 2806 0 0 237 /**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */ 2 4 this 3 3001  4 data 1 3006  
938 0 0 7 1109 3006 0 0 70 /**
 * Returns a const pointer to the actual data in the Datagram.
 */ 1 4 this 3 3002  
939 0 0 7 1110 3005 0 0 75 /**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */ 1 4 this 3 3001  
940 0 0 4 1111 2806 0 0 343 /**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */ 2 4 this 3 3001  15 stdfloat_double 1 2670  
941 0 0 6 1112 2670 0 0 72 /**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */ 1 4 this 3 3002  
942 0 0 6 1113 2670 0 0 0 2 4 this 3 3002  5 other 1 3002  
943 0 0 6 1114 2670 0 0 0 2 4 this 3 3002  5 other 1 3002  
944 0 0 6 1115 2670 0 0 0 2 4 this 3 3002  5 other 1 3002  
945 0 0 4 1116 2806 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 3002  3 out 1 2723  
946 0 0 4 1117 2806 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 3002  3 out 1 2723  6 indent 1 2962  
947 0 0 7 1118 2883 2155 0 0 0 
948 0 0 6 1121 2670 0 0 0 2 4 this 3 3007  4 data 1 3001  
949 0 0 6 1122 2670 0 0 391 /**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */ 2 4 this 3 3007  4 info 1 3008  
950 0 0 6 1123 2670 0 0 0 1 4 this 3 3007  
951 0 0 6 1124 2670 0 0 0 1 4 this 3 3007  
952 0 0 6 1125 2864 0 0 159 /**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 3007  
953 0 0 6 1126 2870 0 0 138 /**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */ 1 4 this 3 3009  
954 0 0 7 1127 3012 0 0 156 /**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 3007  
955 0 0 7 1128 3013 2512 0 153 /**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */ 1 4 this 3 3007  
956 0 0 6 1129 2912 0 0 327 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */ 1 4 this 3 3007  
957 0 0 7 1131 3014 2314 0 10 /**
 *
 */ 0 
958 0 0 7 1131 3014 2314 0 10 /**
 *
 */ 2 8 datagram 1 3002  6 offset 1 2812  
959 0 0 7 1131 3014 2314 0 0 1 6 param0 0 3015  
960 0 0 6 1132 2670 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 3014  
961 0 0 6 1133 2953 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 3014  
962 0 0 6 1134 2955 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 3014  
963 0 0 6 1135 2956 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 3014  
964 0 0 6 1136 2958 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 3014  
965 0 0 6 1137 2688 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 3014  
966 0 0 6 1138 2959 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 3014  
967 0 0 6 1139 2961 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 3014  
968 0 0 6 1140 2963 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 3014  
969 0 0 6 1141 3004 0 0 68 /**
 * Extracts a 32-bit single-precision floating-point number.
 */ 1 4 this 3 3014  
970 0 0 6 1142 2965 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 3014  
971 0 0 6 1143 2782 0 0 119 /**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */ 1 4 this 3 3014  
972 0 0 6 1144 2956 0 0 55 /**
 * Extracts a signed 16-bit big-endian integer.
 */ 1 4 this 3 3014  
973 0 0 6 1145 2958 0 0 55 /**
 * Extracts a signed 32-bit big-endian integer.
 */ 1 4 this 3 3014  
974 0 0 6 1146 2688 0 0 55 /**
 * Extracts a signed 64-bit big-endian integer.
 */ 1 4 this 3 3014  
975 0 0 6 1147 2959 0 0 58 /**
 * Extracts an unsigned 16-bit big-endian integer.
 */ 1 4 this 3 3014  
976 0 0 6 1148 2961 0 0 58 /**
 * Extracts an unsigned 32-bit big-endian integer.
 */ 1 4 this 3 3014  
977 0 0 6 1149 2963 0 0 58 /**
 * Extracts an unsigned 64-bit big-endian integer.
 */ 1 4 this 3 3014  
978 0 0 6 1150 3004 0 0 79 /**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */ 1 4 this 3 3014  
979 0 0 6 1151 2965 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 3014  
980 0 0 6 1152 2802 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 3014  
981 0 0 6 1153 2802 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 3014  
982 0 0 6 1154 2802 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 3014  
983 0 0 6 1155 2802 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 3014  4 size 1 2812  
984 0 0 6 1156 2802 0 0 75 /**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */ 1 4 this 3 3014  
985 0 0 4 1157 2806 0 0 68 /**
 * Skips over the indicated number of bytes in the datagram.
 */ 2 4 this 3 3014  4 size 1 2812  
986 0 0 6 1158 2802 0 0 98 /**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */ 2 4 this 3 3014  4 size 1 2812  
987 0 0 6 1159 2802 0 0 115 /**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */ 1 4 this 3 3015  
988 0 0 6 1160 2812 0 0 49 /**
 * Return the bytes left in the datagram.
 */ 1 4 this 3 3015  
989 0 0 6 1161 3002 0 0 48 /**
 * Return the datagram of this iterator.
 */ 1 4 this 3 3015  
990 0 0 6 1162 2812 0 0 100 /**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */ 1 4 this 3 3015  
991 0 0 4 1163 2806 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 3015  3 out 1 2723  
992 0 0 4 1164 2806 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 3015  3 out 1 2723  6 indent 1 2962  
993 0 0 7 1165 2883 2155 0 0 0 
994 0 0 6 1169 2670 0 0 0 2 4 this 3 3017  4 data 1 3002  
995 0 0 6 1170 2670 0 0 349 /**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 3017  6 result 1 3008  8 filename 1 2864  
996 0 0 6 1170 2670 0 0 362 /**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 3017  6 result 1 3008  6 source 1 3018  
997 0 0 6 1171 2670 0 0 0 1 4 this 3 3017  
998 0 0 4 1172 2806 0 0 0 1 4 this 3 3017  
999 0 0 6 1173 2864 0 0 159 /**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */ 1 4 this 3 3017  
1000 0 0 7 1174 3012 0 0 152 /**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */ 1 4 this 3 3017  
1001 0 0 6 1175 2912 0 0 322 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */ 1 4 this 3 3017  
1002 0 0 7 1192 2883 2155 0 0 0 
1003 0 0 6 1188 2981 0 0 0 1 4 this 3 3020  
1004 0 0 7 1189 3020 2338 0 0 1 4 this 3 2981  
1005 0 0 7 1190 2992 2197 0 0 1 4 this 3 3020  
1006 0 0 7 1191 3020 2338 0 0 1 4 this 3 2992  
1007 0 0 7 1195 3021 2342 0 0 1 6 param0 0 3012  
1008 0 0 7 1195 3021 2342 0 10 /**
 *
 */ 1 8 filename 1 2864  
1009 0 0 6 1196 2864 0 0 49 /**
 * Returns the filename of the reference.
 */ 1 4 this 3 3012  
1010 0 0 7 1197 2883 2155 0 0 0 
1011 0 0 7 1200 3022 2352 0 10 /**
 *
 */ 0 
1012 0 0 7 1200 3022 2352 0 0 1 6 param0 0 3023  
1013 0 0 4 1201 2806 0 0 130 /**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */ 2 4 this 3 3022  3 pos 1 2812  
1014 0 0 6 1202 2812 0 0 106 /**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */ 1 4 this 3 3023  
1015 0 0 6 1203 2798 0 0 319 /**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */ 2 4 this 3 3022  6 length 1 2812  
1016 0 0 6 1204 2798 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */ 1 4 this 3 3022  
1017 0 0 6 1205 2798 0 0 0 1 4 this 3 3022  
1018 0 0 6 1206 2798 0 0 101 /**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */ 1 4 this 3 3023  
1019 0 0 6 1207 2812 0 0 58 /**
 * Returns the size of the entire buffer contents.
 */ 1 4 this 3 3023  
1020 0 0 4 1208 2806 0 0 47 /**
 * Empties the current buffer contents.
 */ 1 4 this 3 3022  
1021 0 0 7 1211 3025 2383 0 10 /**
 *
 */ 0 
1022 0 0 7 1211 3025 2383 0 10 /**
 *
 */ 1 4 copy 1 3026  
1023 0 0 6 1212 3025 0 0 0 2 4 this 3 3025  4 copy 1 3026  
1024 0 0 6 1213 2670 0 0 0 2 4 this 3 3026  5 other 1 3026  
1025 0 0 6 1214 2670 0 0 0 2 4 this 3 3026  5 other 1 3026  
1026 0 0 6 1215 2670 0 0 0 2 4 this 3 3026  5 other 1 3026  
1027 0 0 6 1216 2671 0 0 10 /**
 *
 */ 2 4 this 3 3026  5 other 1 3026  
1028 0 0 4 1217 2806 0 0 86 /**
 * Generates a new HashVal representing the xor of this one and the other one.
 */ 2 4 this 3 3025  5 other 1 3026  
1029 0 0 4 1218 2806 0 0 65 /**
 * Outputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 3026  3 out 1 2723  
1030 0 0 4 1219 2806 0 0 64 /**
 * Inputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 3025  2 in 1 2713  
1031 0 0 4 1220 2806 0 0 64 /**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 3026  3 out 1 2723  
1032 0 0 4 1221 2806 0 0 63 /**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 3025  2 in 1 2713  
1033 0 0 4 1222 2806 0 0 128 /**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */ 2 4 this 3 3026  3 out 1 2723  
1034 0 0 4 1223 2806 0 0 125 /**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */ 2 4 this 3 3025  2 in 1 2713  
1035 0 0 4 1224 2806 0 0 10 /**
 *
 */ 2 4 this 3 3026  3 out 1 2723  
1036 0 0 6 1225 2802 0 0 69 /**
 * Returns the HashVal as a string with four decimal numbers.
 */ 1 4 this 3 3026  
1037 0 0 6 1226 2670 0 0 112 /**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */ 2 4 this 3 3025  4 text 1 2802  
1038 0 0 6 1227 2802 0 0 63 /**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */ 1 4 this 3 3026  
1039 0 0 6 1228 2670 0 0 111 /**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */ 2 4 this 3 3025  4 text 1 2802  
1040 0 0 6 1229 2802 0 0 58 /**
 * Returns the HashVal as a 16-byte binary string.
 */ 1 4 this 3 3026  
1041 0 0 6 1230 2670 0 0 106 /**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */ 2 4 this 3 3025  4 text 1 2802  
1042 0 0 4 1231 2806 0 0 10 /**
 *
 */ 2 4 this 3 3026  11 destination 1 3001  
1043 0 0 4 1232 2806 0 0 10 /**
 *
 */ 2 4 this 3 3025  6 source 1 3014  
1044 0 0 4 1233 2806 0 0 10 /**
 *
 */ 2 4 this 3 3026  11 destination 1 2971  
1045 0 0 4 1234 2806 0 0 10 /**
 *
 */ 2 4 this 3 3025  6 source 1 2952  
1046 0 0 6 1235 2670 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 3025  8 filename 1 2864  
1047 0 0 6 1236 2670 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 3025  6 stream 1 2713  
1048 0 0 4 1237 2806 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 3025  7 ramfile 1 3023  
1049 0 0 4 1238 2806 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 3025  4 data 1 2802  
1050 0 0 4 1239 2806 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 3025  4 data 1 3027  
1051 0 0 4 1240 2806 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 3 4 this 3 3025  6 buffer 1 2802  6 length 1 2671  
1052 0 0 7 1243 3028 2387 0 10 /**
 *
 */ 0 
1053 0 0 7 1243 3028 2387 0 10 /**
 *
 */ 3 6 source 1 2923  5 start 1 2912  3 end 1 2912  
1054 0 0 6 1244 3028 0 0 391 /**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */ 4 4 this 3 3028  6 source 1 2923  5 start 1 2912  3 end 1 2912  
1055 0 0 6 1245 3028 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */ 1 4 this 3 3028  
1056 0 0 7 1248 3029 2391 0 10 /**
 *
 */ 0 
1057 0 0 7 1248 3029 2391 0 10 /**
 *
 */ 4 4 dest 1 2940  5 start 1 2912  3 end 1 2912  6 append 1 2670  
1058 0 0 6 1249 3029 0 0 383 /**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */ 5 4 this 3 3029  4 dest 1 2940  5 start 1 2912  3 end 1 2912  6 append 1 2670  
1059 0 0 6 1250 3029 0 0 90 /**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */ 1 4 this 3 3029  
1060 0 0 7 1253 3030 2395 0 10 /**
 *
 */ 0 
1061 0 0 7 1253 3030 2395 0 10 /**
 *
 */ 4 6 nested 1 2966  5 start 1 2912  3 end 1 2912  6 append 1 2670  
1062 0 0 6 1254 3030 0 0 278 /**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */ 5 4 this 3 3030  6 nested 1 2966  5 start 1 2912  3 end 1 2912  6 append 1 2670  
1063 0 0 6 1255 3030 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */ 1 4 this 3 3030  
1064 0 0 7 1258 3031 2197 0 10 /**
 *
 */ 0 
1065 0 0 6 1259 2670 0 0 352 /**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 3 4 this 3 3031  14 multifile_name 1 2864  6 offset 1 2912  
1066 0 0 6 1259 2670 0 0 333 /**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 4 4 this 3 3031  16 multifile_stream 1 2923  12 owns_pointer 1 2670  6 offset 1 2912  
1067 0 0 6 1260 2670 0 0 420 /**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 3031  14 multifile_name 1 2864  
1068 0 0 6 1260 2670 0 0 333 /**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 3031  16 multifile_stream 1 2723  12 owns_pointer 1 2670  
1069 0 0 6 1261 2670 0 0 360 /**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 3031  14 multifile_name 1 2864  
1070 0 0 6 1261 2670 0 0 365 /**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 3031  16 multifile_stream 1 2735  12 owns_pointer 1 2670  
1071 0 0 4 1262 2806 0 0 169 /**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 3031  
1072 0 0 6 1263 2864 0 0 69 /**
 * Returns the filename of the Multifile, if it is available.
 */ 1 4 this 3 3032  
1073 0 0 4 1264 2806 0 0 209 /**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 3031  14 multifile_name 1 2864  
1074 0 0 6 1265 2670 0 0 154 /**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 3032  
1075 0 0 6 1266 2670 0 0 162 /**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */ 1 4 this 3 3032  
1076 0 0 6 1267 2670 0 0 118 /**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */ 1 4 this 3 3032  
1077 0 0 6 1268 2870 0 0 299 /**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */ 1 4 this 3 3032  
1078 0 0 4 1269 2806 0 0 529 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */ 2 4 this 3 3031  16 record_timestamp 1 2670  
1079 0 0 6 1270 2670 0 0 137 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */ 1 4 this 3 3032  
1080 0 0 4 1271 2806 0 0 782 /**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */ 2 4 this 3 3031  12 scale_factor 1 2812  
1081 0 0 6 1272 2812 0 0 92 /**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */ 1 4 this 3 3032  
1082 0 0 4 1273 2806 0 0 461 /**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */ 2 4 this 3 3031  4 flag 1 2670  
1083 0 0 6 1274 2670 0 0 163 /**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */ 1 4 this 3 3032  
1084 0 0 4 1275 2806 0 0 369 /**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */ 2 4 this 3 3031  19 encryption_password 1 2802  
1085 0 0 6 1276 2802 0 0 141 /**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */ 1 4 this 3 3032  
1086 0 0 4 1277 2806 0 0 659 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */ 2 4 this 3 3031  20 encryption_algorithm 1 2802  
1087 0 0 6 1278 2802 0 0 96 /**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */ 1 4 this 3 3032  
1088 0 0 4 1279 2806 0 0 611 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */ 2 4 this 3 3031  21 encryption_key_length 1 2671  
1089 0 0 6 1280 2671 0 0 108 /**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */ 1 4 this 3 3032  
1090 0 0 4 1281 2806 0 0 740 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */ 2 4 this 3 3031  26 encryption_iteration_count 1 2671  
1091 0 0 6 1282 2671 0 0 84 /**
 * Returns the value that was specified by set_encryption_iteration_count().
 */ 1 4 this 3 3032  
1092 0 0 6 1283 2802 0 0 618 /**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 3031  12 subfile_name 1 2802  8 filename 1 2864  17 compression_level 1 2671  
1093 0 0 6 1283 2802 0 0 777 /**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 3031  12 subfile_name 1 2802  12 subfile_data 1 2713  17 compression_level 1 2671  
1094 0 0 6 1284 2802 0 0 451 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 3031  12 subfile_name 1 2802  8 filename 1 2864  17 compression_level 1 2671  
1095 0 0 6 1285 2670 0 0 1292 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */ 5 4 this 3 3031  11 certificate 1 2864  5 chain 1 2864  4 pkey 1 2864  8 password 1 2802  
1096 0 0 6 1285 2670 0 0 724 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */ 3 4 this 3 3031  9 composite 1 2864  8 password 1 2802  
1097 0 0 6 1286 2671 0 0 555 /**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */ 1 4 this 3 3032  
1098 0 0 6 1287 2802 0 0 352 /**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */ 2 4 this 3 3032  1 n 1 2671  
1099 0 0 6 1288 2802 0 0 299 /**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */ 2 4 this 3 3032  1 n 1 2671  
1100 0 0 6 1289 2802 0 0 379 /**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */ 2 4 this 3 3032  1 n 1 2671  
1101 0 0 4 1290 2806 0 0 158 /**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 3032  1 n 1 2671  3 out 1 2723  
1102 0 0 4 1291 2806 0 0 140 /**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 3032  1 n 1 2671  3 out 1 2723  
1103 0 0 6 1292 2671 0 0 289 /**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */ 2 4 this 3 3032  1 n 1 2671  
1104 0 0 6 1293 2670 0 0 691 /**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 3031  
1105 0 0 6 1294 2670 0 0 587 /**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 3031  
1106 0 0 6 1295 2671 0 0 169 /**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 3032  
1107 0 0 6 1296 2671 0 0 127 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */ 2 4 this 3 3032  12 subfile_name 1 2802  
1108 0 0 6 1297 2670 0 0 203 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 3032  12 subfile_name 1 2802  
1109 0 0 6 1298 2670 0 0 420 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 3032  8 contents 1 2867  12 subfile_name 1 2802  
1110 0 0 4 1299 2806 0 0 435 /**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 3031  5 index 1 2671  
1111 0 0 6 1299 2670 0 0 475 /**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 3031  12 subfile_name 1 2802  
1112 0 0 6 1300 2802 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 3032  5 index 1 2671  
1113 0 0 6 1302 2812 0 0 170 /**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */ 2 4 this 3 3032  5 index 1 2671  
1114 0 0 6 1303 2870 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */ 2 4 this 3 3032  5 index 1 2671  
1115 0 0 6 1304 2670 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 3032  5 index 1 2671  
1116 0 0 6 1305 2670 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 3032  5 index 1 2671  
1117 0 0 6 1306 2670 0 0 343 /**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */ 2 4 this 3 3032  5 index 1 2671  
1118 0 0 6 1307 2912 0 0 371 /**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */ 1 4 this 3 3032  
1119 0 0 6 1308 2912 0 0 338 /**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 3032  5 index 1 2671  
1120 0 0 6 1309 2812 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 3032  5 index 1 2671  
1121 0 0 6 1310 2802 0 0 90 /**
 * Returns a string that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 3031  5 index 1 2671  
1122 0 0 6 1311 2713 0 0 745 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 3031  5 index 1 2671  
1123 0 0 4 1312 2806 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2713  
1124 0 0 6 1313 2670 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 3031  5 index 1 2671  8 filename 1 2864  
1125 0 0 6 1314 2670 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 3031  5 index 1 2671  3 out 1 2723  
1126 0 0 6 1315 2670 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 3031  5 index 1 2671  8 filename 1 2864  
1127 0 0 4 1316 2806 0 0 10 /**
 *
 */ 2 4 this 3 3032  3 out 1 2723  
1128 0 0 4 1317 2806 0 0 61 /**
 * Shows a list of all subfiles within the Multifile.
 */ 2 4 this 3 3032  3 out 1 2723  
1129 0 0 6 1318 2802 0 0 108 /**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */ 0 
1130 0 0 4 1319 2806 0 0 644 /**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */ 2 4 this 3 3031  13 header_prefix 1 2802  
1131 0 0 6 1320 2802 0 0 113 /**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */ 1 4 this 3 3032  
1132 0 0 7 1322 3036 2465 0 0 1 6 param0 0 3034  
1133 0 0 7 1322 3036 2465 0 10 /**
 *
 */ 1 12 initial_name 1 2802  
1134 0 0 4 1323 2806 0 0 10 /**
 *
 */ 2 4 this 3 3036  4 name 1 2802  
1135 0 0 4 1324 2806 0 0 46 /**
 * Resets the Namable's name to empty.
 */ 1 4 this 3 3036  
1136 0 0 6 1325 2670 0 0 94 /**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */ 1 4 this 3 3034  
1137 0 0 6 1326 2802 0 0 10 /**
 *
 */ 1 4 this 3 3034  
1138 0 0 4 1328 2806 0 0 148 /**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */ 2 4 this 3 3034  3 out 1 2723  
1139 0 0 7 1329 2883 2155 0 0 0 
1140 0 0 4 1332 2806 0 0 200 /**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */ 1 4 this 3 3037  
1141 0 0 6 1333 2671 0 0 436 /**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 3037  8 filename 1 2864  
1142 0 0 6 1334 2671 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 3037  4 data 1 2802  9 data_size 1 2812  
1143 0 0 6 1334 2671 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 3037  4 data 1 2802  
1144 0 0 6 1335 2671 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 3037  4 data 1 2802  9 data_size 1 2812  
1145 0 0 6 1335 2671 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 3037  4 data 1 2802  
1146 0 0 6 1336 3038 0 0 378 /**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */ 1 4 this 3 3037  
1147 0 0 4 1337 2806 0 0 277 /**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */ 1 4 this 3 3037  
1148 0 0 4 1338 2806 0 0 84 /**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */ 1 4 this 3 3037  
1149 0 0 6 1339 3037 0 0 10 /**
 *
 */ 0 
1150 0 0 7 1341 3008 2482 0 10 /**
 *
 */ 0 
1151 0 0 7 1341 3008 2482 0 10 /**
 *
 */ 3 4 file 1 3012  5 start 1 2912  4 size 1 2872  
1152 0 0 7 1341 3008 2482 0 10 /**
 *
 */ 3 8 filename 1 2864  5 start 1 2912  4 size 1 2872  
1153 0 0 7 1341 3008 2482 0 10 /**
 *
 */ 1 4 copy 1 3018  
1154 0 0 6 1342 3008 0 0 0 2 4 this 3 3008  4 copy 1 3018  
1155 0 0 6 1343 2670 0 0 98 /**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */ 1 4 this 3 3018  
1156 0 0 7 1344 3012 0 0 63 /**
 * Returns the FileReference that represents this file.
 */ 1 4 this 3 3018  
1157 0 0 6 1345 2864 0 0 38 /**
 * A shortcut to the filename.
 */ 1 4 this 3 3018  
1158 0 0 6 1346 2912 0 0 77 /**
 * Returns the offset within the file at which this file data begins.
 */ 1 4 this 3 3018  
1159 0 0 6 1347 2872 0 0 115 /**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */ 1 4 this 3 3018  
1160 0 0 4 1348 2806 0 0 10 /**
 *
 */ 2 4 this 3 3018  3 out 1 2723  
1161 0 0 6 1351 3043 0 0 0 1 4 this 3 3041  
1162 0 0 7 1352 2866 1659 0 0 1 4 this 3 3041  
1163 0 0 6 1353 2864 0 0 166 /**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */ 1 4 this 3 3041  
1164 0 0 6 1354 2670 0 0 61 /**
 * Returns true if this file exists, false otherwise.
 */ 1 4 this 3 3041  
1165 0 0 6 1355 2670 0 0 117 /**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */ 1 4 this 3 3041  
1166 0 0 6 1356 2670 0 0 115 /**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */ 1 4 this 3 3041  
1167 0 0 6 1357 2670 0 0 153 /**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */ 1 4 this 3 3041  
1168 0 0 6 1358 2670 0 0 199 /**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */ 1 4 this 3 3013  
1169 0 0 6 1359 2670 0 0 589 /**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 2 4 this 3 3013  8 new_file 1 3013  
1170 0 0 6 1360 2670 0 0 123 /**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 3013  8 new_file 1 3013  
1171 0 0 7 1361 3044 2197 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 1 4 this 3 3041  
1172 0 0 4 1362 2806 0 0 10 /**
 *
 */ 2 4 this 3 3041  3 out 1 2723  
1173 0 0 4 1363 2806 0 0 66 /**
 * If the file represents a directory, lists its contents.
 */ 2 4 this 3 3041  3 out 1 2723  
1174 0 0 4 1364 2806 0 0 113 /**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */ 2 4 this 3 3041  3 out 1 2723  
1175 0 0 6 1365 2798 0 0 63 /**
 * Returns the entire contents of the file as a string.
 */ 2 4 this 3 3041  11 auto_unwrap 1 2670  
1176 0 0 6 1366 2713 0 0 179 /**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */ 2 4 this 3 3041  11 auto_unwrap 1 2670  
1177 0 0 4 1367 2806 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 3041  6 stream 1 2713  
1178 0 0 6 1368 2670 0 0 324 /**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */ 1 4 this 3 3041  
1179 0 0 6 1369 2798 0 0 0 3 4 this 3 3013  4 data 1 2798  9 auto_wrap 1 2670  
1180 0 0 6 1370 2723 0 0 179 /**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 3 4 this 3 3013  9 auto_wrap 1 2670  8 truncate 1 2670  
1181 0 0 6 1371 2723 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 1 4 this 3 3013  
1182 0 0 4 1372 2806 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 3013  6 stream 1 2723  
1183 0 0 6 1373 2735 0 0 180 /**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 2 4 this 3 3013  8 truncate 1 2670  
1184 0 0 6 1374 2735 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 1 4 this 3 3013  
1185 0 0 4 1375 2806 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 3013  6 stream 1 2735  
1186 0 0 6 1376 2872 0 0 105 /**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */ 1 4 this 3 3041  
1187 0 0 6 1376 2872 0 0 222 /**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */ 2 4 this 3 3041  6 stream 1 2713  
1188 0 0 6 1377 2870 0 0 434 /**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */ 1 4 this 3 3041  
1189 0 0 6 1378 2670 0 0 330 /**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */ 2 4 this 3 3013  4 info 1 3008  
1190 0 0 7 1379 2883 2155 0 0 0 
1191 0 0 7 1382 2883 2155 0 0 0 
1192 0 0 6 1385 3043 0 0 68 /**
 * Returns the file system this mount object is attached to.
 */ 1 4 this 3 3045  
1193 0 0 6 1386 2864 0 0 161 /**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */ 1 4 this 3 3045  
1194 0 0 6 1387 2671 0 0 100 /**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */ 1 4 this 3 3045  
1195 0 0 4 1388 2806 0 0 10 /**
 *
 */ 2 4 this 3 3045  3 out 1 2723  
1196 0 0 4 1389 2806 0 0 10 /**
 *
 */ 2 4 this 3 3045  3 out 1 2723  
1197 0 0 7 1390 2883 2155 0 0 0 
1198 0 0 7 1392 3047 2338 0 10 /**
 *
 */ 1 9 multifile 1 3031  
1199 0 0 7 1393 3031 2197 0 76 /**
 * Returns the Multifile pointer that this mount object is based on.
 */ 1 4 this 3 3048  
1200 0 0 7 1394 2883 2155 0 0 0 
1201 0 0 7 1396 3050 2526 0 10 /**
 *
 */ 0 
1202 0 0 7 1397 2883 2155 0 0 0 
1203 0 0 7 1400 3051 2530 0 10 /**
 *
 */ 1 17 physical_filename 1 2864  
1204 0 0 6 1401 2864 0 0 112 /**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */ 1 4 this 3 3052  
1205 0 0 7 1402 2883 2155 0 0 0 
1206 0 0 7 1405 3056 2338 0 69 /**
 * Returns the VirtualFileMount this file is associated with.
 */ 1 4 this 3 3054  
1207 0 0 6 1406 2670 0 0 174 /**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */ 1 4 this 3 3054  
1208 0 0 7 1407 2883 2155 0 0 0 
1209 0 0 7 1410 3057 2342 0 10 /**
 *
 */ 1 8 filename 1 2864  
1210 0 0 7 1410 3057 2342 0 0 1 6 param0 0 3058  
1211 0 0 7 1411 2883 2155 0 0 0 
1212 0 0 7 1413 3060 2540 0 10 /**
 *
 */ 0 
1213 0 0 7 1413 3060 2540 0 10 /**
 *
 */ 2 6 source 1 2713  11 owns_source 1 2670  
1214 0 0 6 1414 3060 0 0 10 /**
 *
 */ 3 4 this 3 3060  6 source 1 2713  11 owns_source 1 2670  
1215 0 0 6 1415 3060 0 0 118 /**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */ 1 4 this 3 3060  
1216 0 0 7 1418 3061 2544 0 10 /**
 *
 */ 0 
1217 0 0 7 1418 3061 2544 0 10 /**
 *
 */ 3 4 dest 1 2723  9 owns_dest 1 2670  17 compression_level 1 2671  
1218 0 0 6 1419 3061 0 0 10 /**
 *
 */ 4 4 this 3 3061  4 dest 1 2723  9 owns_dest 1 2670  17 compression_level 1 2671  
1219 0 0 6 1420 3061 0 0 114 /**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */ 1 4 this 3 3061  
1220 0 0 7 1430 3044 2197 0 0 1 6 param0 0 3062  
1221 0 0 6 1423 2812 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 3062  
1222 0 0 7 1424 3013 2512 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 3062  1 n 1 2812  
1223 0 0 7 1426 3013 2512 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 3062  1 n 1 2812  
1224 0 0 6 1427 2812 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 3062  
1225 0 0 7 1428 3044 2197 0 0 2 4 this 3 3044  5 other 1 3062  
1226 0 0 7 1429 3044 2197 0 0 2 4 this 3 3062  5 other 1 3062  
1227 0 0 7 1432 3043 2553 0 10 /**
 *
 */ 0 
1228 0 0 6 1435 2670 0 0 1009 /**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */ 5 4 this 3 3043  17 physical_filename 1 2864  11 mount_point 1 2864  5 flags 1 2671  8 password 1 2802  
1229 0 0 6 1435 2670 0 0 67 /**
 * Mounts the indicated Multifile at the given mount point.
 */ 4 4 this 3 3043  9 multifile 1 3031  11 mount_point 1 2864  5 flags 1 2671  
1230 0 0 6 1435 2670 0 0 208 /**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function that the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */ 4 4 this 3 3043  5 mount 1 3056  11 mount_point 1 2864  5 flags 1 2671  
1231 0 0 6 1436 2670 0 0 587 /**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */ 5 4 this 3 3043  16 virtual_filename 1 2864  11 mount_point 1 2864  5 flags 1 2671  8 password 1 2802  
1232 0 0 6 1437 2671 0 0 156 /**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 3043  17 physical_filename 1 2864  
1233 0 0 6 1437 2671 0 0 132 /**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 3043  9 multifile 1 3031  
1234 0 0 6 1437 2671 0 0 127 /**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 3043  5 mount 1 3056  
1235 0 0 6 1438 2671 0 0 136 /**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 3043  11 mount_point 1 2864  
1236 0 0 6 1439 2671 0 0 96 /**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */ 1 4 this 3 3043  
1237 0 0 6 1440 2671 0 0 65 /**
 * Returns the number of individual mounts in the system.
 */ 1 4 this 3 3064  
1238 0 0 7 1441 3056 2338 0 47 /**
 * Returns the nth mount in the system.
 */ 2 4 this 3 3064  1 n 1 2671  
1239 0 0 6 1454 2670 0 0 171 /**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */ 2 4 this 3 3043  13 new_directory 1 2864  
1240 0 0 7 1455 2866 1659 0 60 /**
 * Returns the current directory name.  See chdir().
 */ 1 4 this 3 3064  
1241 0 0 6 1456 2670 0 0 263 /**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */ 2 4 this 3 3043  8 filename 1 2864  
1242 0 0 6 1457 2670 0 0 169 /**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */ 2 4 this 3 3043  8 filename 1 2864  
1243 0 0 7 1458 3013 2512 0 537 /**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */ 3 4 this 3 3064  8 filename 1 2864  11 status_only 1 2670  
1244 0 0 7 1459 3013 2512 0 298 /**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */ 2 4 this 3 3043  8 filename 1 2864  
1245 0 0 7 1460 3013 2512 0 173 /**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */ 4 4 this 3 3064  8 filename 1 2864  10 searchpath 1 2873  11 status_only 1 2670  
1246 0 0 6 1461 2670 0 0 208 /**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */ 2 4 this 3 3043  8 filename 1 2864  
1247 0 0 6 1462 2670 0 0 599 /**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 3 4 this 3 3043  13 orig_filename 1 2864  12 new_filename 1 2864  
1248 0 0 6 1463 2670 0 0 131 /**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */ 3 4 this 3 3043  13 orig_filename 1 2864  12 new_filename 1 2864  
1249 0 0 6 1464 2670 0 0 174 /**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */ 4 4 this 3 3064  8 filename 1 2866  10 searchpath 1 2873  17 default_extension 1 2802  
1250 0 0 6 1465 2671 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 4 4 this 3 3064  8 filename 1 2864  10 searchpath 1 2873  7 results 1 2899  
1251 0 0 6 1466 2670 0 0 71 /**
 * Convenience function; returns true if the named file exists.
 */ 2 4 this 3 3064  8 filename 1 2864  
1252 0 0 6 1467 2670 0 0 93 /**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */ 2 4 this 3 3064  8 filename 1 2864  
1253 0 0 6 1468 2670 0 0 96 /**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */ 2 4 this 3 3064  8 filename 1 2864  
1254 0 0 7 1469 3044 2197 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 2 4 this 3 3064  8 filename 1 2864  
1255 0 0 4 1470 2806 0 0 80 /**
 * Convenience function; lists the files within the indicated directory.
 */ 2 4 this 3 3064  8 filename 1 2864  
1256 0 0 4 1471 2806 0 0 117 /**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */ 2 4 this 3 3064  8 filename 1 2864  
1257 0 0 4 1472 2806 0 0 75 /**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */ 2 4 this 3 3064  3 out 1 2723  
1258 0 0 6 1473 3043 0 0 423 /**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */ 0 
1259 0 0 6 1474 2798 0 0 365 /**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 3064  8 filename 1 2864  11 auto_unwrap 1 2670  
1260 0 0 6 1475 2713 0 0 424 /**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 3064  8 filename 1 2864  11 auto_unwrap 1 2670  
1261 0 0 4 1476 2806 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2713  
1262 0 0 6 1477 2798 0 0 0 4 4 this 3 3043  8 filename 1 2864  4 data 1 2798  9 auto_wrap 1 2670  
1263 0 0 6 1478 2723 0 0 345 /**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */ 4 4 this 3 3043  8 filename 1 2864  9 auto_wrap 1 2670  8 truncate 1 2670  
1264 0 0 6 1479 2723 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 2 4 this 3 3043  8 filename 1 2864  
1265 0 0 4 1480 2806 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2723  
1266 0 0 6 1481 2735 0 0 169 /**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */ 3 4 this 3 3043  8 filename 1 2864  8 truncate 1 2670  
1267 0 0 6 1482 2735 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 2 4 this 3 3043  8 filename 1 2864  
1268 0 0 4 1483 2806 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2735  
1269 0 0 7 1448 3066 2568 0 0 0 
1270 0 0 7 1448 3066 2568 0 0 1 4 copy 1 3056  
1271 0 0 7 1448 3066 2568 0 0 1 3 ptr 1 3056  
1272 0 0 7 1449 3056 2338 0 289 // If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness. 1 4 this 3 3067  
1273 0 0 6 1450 3066 0 0 0 2 4 this 3 3066  4 copy 1 3056  
1274 0 0 6 1450 3066 0 0 0 2 4 this 3 3066  3 ptr 1 3056  
1275 0 0 6 1451 2670 0 0 0 1 4 this 3 3067  
1276 0 0 4 1452 2806 0 0 0 1 4 this 3 3066  
1277 0 0 4 1446 2806 0 0 0 1 4 this 3 3069  
1278 0 0 4 1447 2806 0 0 0 2 4 this 3 3070  3 out 1 2723  
1279 0 0 7 1485 3072 2600 0 60 /**
 * Create a patch file and initializes internal data
 */ 0 
1280 0 0 7 1485 3072 2600 0 49 /**
 * Create patch file with buffer to patch
 */ 1 6 buffer 1 2995  
1281 0 0 6 1487 2670 0 0 359 /**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */ 4 4 this 3 3072  9 file_orig 1 2866  8 file_new 1 2866  10 patch_name 1 2866  
1282 0 0 6 1488 2671 0 0 193 /**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */ 2 4 this 3 3072  10 patch_file 1 2864  
1283 0 0 6 1489 2671 0 0 107 /**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */ 3 4 this 3 3072  10 patch_file 1 2864  4 file 1 2864  
1284 0 0 6 1489 2671 0 0 127 /**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */ 4 4 this 3 3072  10 patch_file 1 2864  9 orig_file 1 2864  11 target_file 1 2864  
1285 0 0 6 1490 2671 0 0 350 /**
 * Perform one buffer's worth of patching Returns EU_ok while patching Returns
 * EU_success when done If error happens will return one of: EU_error_abort :
 * Patching has not been initiated EU_error_file_invalid : file is corrupted
 * EU_error_invalid_checksum : incompatible patch file
 * EU_error_write_file_rename : could not rename file
 */ 1 4 this 3 3072  
1286 0 0 6 1491 2670 0 0 171 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */ 3 4 this 3 3072  10 patch_file 1 2866  4 file 1 2866  
1287 0 0 6 1491 2670 0 0 138 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */ 4 4 this 3 3072  10 patch_file 1 2866  9 orig_file 1 2866  11 target_file 1 2864  
1288 0 0 6 1492 2782 0 0 125 /**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */ 1 4 this 3 3073  
1289 0 0 4 1496 2806 0 0 362 /**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */ 2 4 this 3 3072  15 allow_multifile 1 2670  
1290 0 0 6 1497 2670 0 0 37 /**
 * See set_allow_multifile().
 */ 1 4 this 3 3072  
1291 0 0 4 1499 2806 0 0 10 /**
 *
 */ 2 4 this 3 3072  6 length 1 2671  
1292 0 0 6 1500 2671 0 0 10 /**
 *
 */ 1 4 this 3 3072  
1293 0 0 4 1501 2806 0 0 10 /**
 *
 */ 1 4 this 3 3072  
1294 0 0 6 1503 2670 0 0 145 /**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */ 1 4 this 3 3073  
1295 0 0 6 1504 3026 0 0 52 /**
 * Returns the MD5 hash for the source file.
 */ 1 4 this 3 3073  
1296 0 0 6 1505 3026 0 0 78 /**
 * Returns the MD5 hash for the file after the patch has been applied.
 */ 1 4 this 3 3073  
1297 0 0 6 1511 2682 0 0 203 // get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul. 1 4 this 3 3075  
1298 0 0 6 1513 2682 0 0 206 // get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely. 1 4 this 3 3075  
1299 0 0 6 1515 2682 0 0 144 // get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS. 1 4 this 3 3075  
1300 0 0 6 1517 2671 0 0 369 /**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */ 1 4 this 3 3076  
1301 0 0 6 1519 3075 0 0 70 /**
 * Returns a pointer to the one TrueClock object in the world.
 */ 0 
1302 0 0 6 1520 2670 0 0 0 2 4 this 3 3076  4 mask 1 2961  
1303 0 0 7 1522 3080 2623 0 0 1 5 other 1 3078  
1304 0 0 7 1522 3080 2623 0 0 2 4 name 1 2802  10 maxEntries 1 2671  
1305 0 0 4 1524 2806 0 0 0 3 4 this 3 3080  4 name 1 2802  10 maxEntries 1 2671  
1306 0 0 4 1525 2806 0 0 0 1 4 this 3 3080  
1307 0 0 4 1526 2806 0 0 0 2 4 this 3 3080  3 tag 1 2802  
1308 0 0 4 1527 2806 0 0 0 1 4 this 3 3080  
1309 0 0 4 1527 2806 0 0 0 2 4 this 3 3080  3 tag 1 2802  
1310 0 0 6 1528 2682 0 0 110 // Don't call any of the following during timing: (Because they are slow,
// not because anything will break). 1 4 this 3 3078  
1311 0 0 4 1529 2806 0 0 0 1 3 out 1 2723  
1312 0 0 4 1530 2806 0 0 0 2 4 this 3 3078  3 out 1 2723  
1313 0 0 4 1531 2806 0 0 0 1 3 out 1 2723  
1314 0 0 4 1532 2806 0 0 0 2 4 this 3 3078  3 out 1 2723  
1315 0 0 6 1534 2670 0 0 94 /**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.
 */ 1 4 this 3 3081  
1316 0 0 6 1535 2670 0 0 90 /**
 * Returns true if the pointer is not null and the object has not been
 * deleted.
 */ 1 4 this 3 3081  
1317 0 0 7 1545 3083 2642 0 0 0 
1318 0 0 7 1545 3083 2642 0 0 1 6 param0 0 3084  
1319 0 0 6 1539 2670 0 0 302 /**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */ 4 3 key 1 2802  4 name 1 2802  5 value 1 2802  2 rl 1 2789  
1320 0 0 6 1540 2670 0 0 142 /**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */ 4 3 key 1 2802  4 name 1 2802  5 value 1 2671  2 rl 1 2789  
1321 0 0 6 1542 2790 0 0 115 /**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */ 3 3 key 1 2802  4 name 1 2802  2 rl 1 2789  
1322 0 0 6 1543 2802 0 0 291 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */ 4 3 key 1 2802  4 name 1 2802  13 default_value 1 2802  2 rl 1 2789  
1323 0 0 6 1544 2671 0 0 206 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */ 4 3 key 1 2802  4 name 1 2802  13 default_value 1 2671  2 rl 1 2789  
1324 0 0 6 1038 2905 0 0 92 // Returns the configure object for accessing config variables from a
// scripting language. 0 
1325 0 0 6 1053 2802 0 0 0 2 6 source 1 2802  17 compression_level 1 2671  
1326 0 0 6 1054 2802 0 0 0 1 6 source 1 2802  
1327 0 0 6 1055 2670 0 0 0 3 6 source 1 2864  4 dest 1 2864  17 compression_level 1 2671  
1328 0 0 6 1056 2670 0 0 0 2 6 source 1 2864  4 dest 1 2864  
1329 0 0 6 1057 2670 0 0 0 3 6 source 1 2713  4 dest 1 2723  17 compression_level 1 2671  
1330 0 0 6 1058 2670 0 0 0 2 6 source 1 2713  4 dest 1 2723  
1331 0 0 6 1059 2670 0 0 0 2 6 source 1 2713  4 dest 1 2723  
1332 0 0 6 1176 2802 0 0 0 5 6 source 1 2802  8 password 1 2802  9 algorithm 1 2802  10 key_length 1 2671  15 iteration_count 1 2671  
1333 0 0 6 1177 2802 0 0 0 2 6 source 1 2802  8 password 1 2802  
1334 0 0 6 1178 2670 0 0 0 6 6 source 1 2864  4 dest 1 2864  8 password 1 2802  9 algorithm 1 2802  10 key_length 1 2671  15 iteration_count 1 2671  
1335 0 0 6 1179 2670 0 0 0 3 6 source 1 2864  4 dest 1 2864  8 password 1 2802  
1336 0 0 6 1180 2670 0 0 0 6 6 source 1 2713  4 dest 1 2723  8 password 1 2802  9 algorithm 1 2802  10 key_length 1 2671  15 iteration_count 1 2671  
1337 0 0 6 1181 2670 0 0 0 3 6 source 1 2713  4 dest 1 2723  8 password 1 2802  
1338 0 0 6 1183 2802 0 0 10 /**
 *
 */ 1 3 err 1 2754  
1339 0 0 6 1184 2671 0 0 0 0 
1340 0 0 6 1185 2802 0 0 10 /**
 *
 */ 0 
1341 0 0 6 1186 2671 0 0 0 0 
1342 0 0 6 1509 2802 0 0 0 4 8 password 1 2802  4 salt 1 2802  5 iters 1 2671  6 keylen 1 2671  
443
2643 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 2644 0 0 0 0 0 0 0 0 0 0

2644 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 1349 1359 0 9 1350 1351 1352 1353 1354 1355 1356 1357 1358 0 0 1 0 2645 0 0 0 0 0

2645 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 1348 0 0 0 0 1 0 2646 0 0 0 0 0

2646 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 1346 1347 0 0 1 0 2647 0 0 0 0 0

2647 13 PointerToVoid 0 141313 13 PointerToVoid 13 PointerToVoid 0 0 0 0 1345 0 2 1343 1344 0 0 1 0 2648 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

2648 10 MemoryBase 0 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

2649 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 2650 0 0 0 0 0 0 0 0 0 0

2650 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 1363 1373 0 9 1364 1365 1366 1367 1368 1369 1370 1371 1372 0 0 1 0 2651 0 0 0 0 0

2651 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 1362 0 0 0 0 1 0 2652 0 0 0 0 0

2652 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 1360 1361 0 0 1 0 2647 0 0 0 0 0

2653 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 2654 0 0 0 0 0 0 0 0 0 0

2654 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 1377 1387 0 9 1378 1379 1380 1381 1382 1383 1384 1385 1386 0 0 1 0 2655 0 0 0 0 0

2655 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 1376 0 0 0 0 1 0 2656 0 0 0 0 0

2656 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 1374 1375 0 0 1 0 2647 0 0 0 0 0

2657 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 2658 0 0 0 0 0 0 0 0 0 0

2658 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 1391 1401 0 9 1392 1393 1394 1395 1396 1397 1398 1399 1400 0 0 1 0 2659 0 0 0 0 0

2659 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 1390 0 0 0 0 1 0 2660 0 0 0 0 0

2660 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 1388 1389 0 0 1 0 2647 0 0 0 0 0

2661 17 ConfigDeclaration 0 43009 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 2 3086 3095 23 1404 1405 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 0 0 1 0 2662 0 0 0 0 249
/**
 * A single declaration of a config variable, typically defined as one line in
 * a .prc file, e.g.  "show-frame-rate-meter 1".  This is really just a
 * pairing of a string name (actually, a ConfigVariableCore pointer) to a
 * string value.
 */

2662 11 ConfigFlags 0 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 1 1402 1403 0 0 0 0 0 0 2 2663 2664 195
/**
 * This class is the base class of both ConfigVariable and ConfigVariableCore.
 * It exists only to provide a convenient name scoping for some enumerated
 * values common to both classes.
 */

2663 9 ValueType 0 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 2662 0 0 0 0 0 0 0 0 0 11 12 VT_undefined 25 ConfigFlags::VT_undefined 0
0 7 VT_list 20 ConfigFlags::VT_list 0
1 9 VT_string 22 ConfigFlags::VT_string 0
2 11 VT_filename 24 ConfigFlags::VT_filename 0
3 7 VT_bool 20 ConfigFlags::VT_bool 0
4 6 VT_int 19 ConfigFlags::VT_int 0
5 9 VT_double 22 ConfigFlags::VT_double 0
6 7 VT_enum 20 ConfigFlags::VT_enum 0
7 14 VT_search_path 27 ConfigFlags::VT_search_path 0
8 8 VT_int64 21 ConfigFlags::VT_int64 0
9 8 VT_color 21 ConfigFlags::VT_color 0
10 0 0

2664 13 VariableFlags 0 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 2662 0 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 138
// Trust level.  We have the bottom twelve bits reserved for a trust level
// indicator; then the open and closed bits are a special case.
4095 6 F_open 19 ConfigFlags::F_open 0
4096 8 F_closed 21 ConfigFlags::F_closed 0
8192 9 F_dynamic 22 ConfigFlags::F_dynamic 171
// F_dynamic means that the variable name is generated dynamically
// (possibly from a very large pool) and should not be included in the
// normal list of variable names.
16384 9 F_dconfig 22 ConfigFlags::F_dconfig 162
// F_dconfig means that the variable was constructed from the legacy
// DConfig system, rather than directly by the user.  You shouldn't pass
// this in directly.
32768 0 0

2665 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2666 0 0 0 0 0 0 0 0 0 0

2666 10 ConfigPage 0 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 8 3087 3088 3089 3090 3091 3092 3093 3094 25 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

2667 12 string const 0 8832 17 std::string const 17 std::string const 0 0 2668 0 0 0 0 0 0 0 0 0 0

2668 6 string 0 2105344 11 std::string 11 std::string 0 0 2669 0 0 0 0 0 0 0 0 0 0

2669 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

2670 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2671 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2672 19 ConfigDeclaration * 0 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 2661 0 0 0 0 0 0 0 0 0 0

2673 20 ConfigVariableCore * 0 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 2674 0 0 0 0 0 0 0 0 0 0

2674 18 ConfigVariableCore 0 43009 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 12 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 28 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 4 3170 3171 3172 3173 0 1 0 2662 0 0 0 0 345
/**
 * The internal definition of a ConfigVariable.  This object is shared between
 * all instances of a ConfigVariable that use the same variable name.
 *
 * You cannot create a ConfigVariableCore instance directly; instead, use the
 * make() method, which may return a shared instance.  Once created, these
 * objects are never destructed.
 */

2675 25 ConfigDeclaration const * 0 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 2676 0 0 0 0 0 0 0 0 0 0

2676 23 ConfigDeclaration const 0 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 2661 0 0 0 0 0 0 0 0 0 0

2677 17 ConfigPageManager 0 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 0 19 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 0 0 1 0 2662 0 0 0 0 124
/**
 * A global object that maintains the set of ConfigPages everywhere in the
 * world, and keeps them in sorted order.
 */

2678 14 ConfigVariable 0 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 1511 1512 0 4 1513 1514 1515 1516 0 0 1 0 2679 0 0 0 0 415
/**
 * This is a generic, untyped ConfigVariable.  It is also the base class for
 * the typed ConfigVariables, and contains all of the code common to
 * ConfigVariables of all types (except ConfigVariableList, which is a bit of
 * a special case).
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

2679 18 ConfigVariableBase 0 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 6 3108 3109 3110 3111 3112 3113 12 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 0 0 1 0 2662 0 0 0 0 417
/**
 * This class is the base class for both ConfigVariableList and ConfigVariable
 * (and hence for all of the ConfigVariableBool, ConfigVaribleString, etc.
 * classes).  It collects together the common interface for all generic
 * ConfigVariables.
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

2680 18 ConfigVariableBool 0 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 1517 1527 2 3114 3115 8 1518 1520 1521 1522 1523 1524 1525 1526 0 1 1519 1 0 2678 0 0 0 0 86
/**
 * This is a convenience class to specialize ConfigVariable as a boolean type.
 */

2681 20 ConfigVariableDouble 0 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 1528 1538 2 3116 3117 8 1529 1531 1532 1533 1534 1535 1536 1537 0 1 1530 1 0 2678 0 0 0 0 97
/**
 * This is a convenience class to specialize ConfigVariable as a floating-
 * point type.
 */

2682 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2683 22 ConfigVariableFilename 0 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 1539 1662 2 3118 3119 19 1540 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1660 1661 0 1 1541 1 0 2678 0 0 0 0 327
/**
 * This is a convenience class to specialize ConfigVariable as a Filename
 * type.  It is almost the same thing as ConfigVariableString, except it
 * handles an implicit Filename::expand_from() operation so that the user may
 * put OS-specific filenames, or filenames based on environment variables, in
 * the prc file.
 */

2684 8 Filename 0 141313 8 Filename 8 Filename 0 0 0 1 1558 1659 0 99 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 0 1 1574 0 0 1 2685 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

2685 4 Type 0 794624 14 Filename::Type 14 Filename::Type 2684 0 0 0 0 0 0 0 0 0 3 9 T_general 19 Filename::T_general 74
// These type values must fit within the bits allocated for F_type, below.
0 5 T_dso 15 Filename::T_dso 0
1 12 T_executable 22 Filename::T_executable 0
2 0 0

2686 17 ConfigVariableInt 0 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 1663 1673 2 3120 3121 8 1664 1666 1667 1668 1669 1670 1671 1672 0 1 1665 1 0 2678 0 0 0 0 90
/**
 * This is a convenience class to specialize ConfigVariable as an integer
 * type.
 */

2687 19 ConfigVariableInt64 0 141313 19 ConfigVariableInt64 19 ConfigVariableInt64 0 0 0 1 1674 1684 2 3122 3123 8 1675 1677 1678 1679 1680 1681 1682 1683 0 1 1676 1 0 2678 0 0 0 0 96
/**
 * This is a convenience class to specialize ConfigVariable as a 64-bit
 * integer type.
 */

2688 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 2689 0 0 0 0 0 0 0 0 0 0

2689 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2690 18 ConfigVariableList 0 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 1685 1686 0 8 1687 1688 1689 1690 1691 1692 1693 1694 0 0 1 0 2679 0 0 0 0 481
/**
 * This class is similar to ConfigVariable, but it reports its value as a list
 * of strings.  In this special case, all of the declarations of the variable
 * are returned as the elements of this list, in order.
 *
 * Note that this is different from a normal ConfigVariableString, which just
 * returns its topmost value, which can optionally be treated as a number of
 * discrete words by dividing it at the spaces.
 *
 * A ConfigVariableList cannot be modified locally.
 */

2691 21 ConfigVariableManager 0 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 1 3124 13 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1 3174 0 0 0 0 163
/**
 * A global object that maintains the set of ConfigVariables (actually,
 * ConfigVariableCores) everywhere in the world, and keeps them in sorted
 * order.
 */

2692 24 ConfigVariableSearchPath 0 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 1708 1709 3 3125 3127 3128 15 1711 1712 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1 3176 1 1710 1 0 2679 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

2693 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 2694 0 0 0 0 0 0 0 0 0 0

2694 11 DSearchPath 0 26625 11 DSearchPath 11 DSearchPath 0 0 0 1 1723 1725 1 3126 14 1724 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1 3175 0 0 0 1 2695 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

2695 7 Results 0 288769 20 DSearchPath::Results 20 DSearchPath::Results 2694 0 0 1 1713 1715 0 8 1714 1716 1717 1718 1719 1720 1721 1722 0 0 0 0 0 0

2696 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 2684 0 0 0 0 0 0 0 0 0 0

2697 20 ConfigVariableString 0 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 1752 1767 2 3129 3130 13 1753 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 0 1 1754 1 0 2678 0 0 0 0 85
/**
 * This is a convenience class to specialize ConfigVariable as a string type.
 */

2698 7 DConfig 0 141313 7 DConfig 7 DConfig 0 0 0 1 1773 1774 0 5 1768 1769 1770 1771 1772 0 0 0 0 0 290
/**
 * This class emulates the old dconfig-style interface to our Panda config
 * system.  It exists only to provide backward-compatible support, and it is
 * used primarily by Python code.  For modern code, use the new
 * ConfigVariable* interface instead of this deprecated interface.
 */

2699 20 ExecutionEnvironment 0 141313 20 ExecutionEnvironment 20 ExecutionEnvironment 0 0 0 1 1788 1789 0 13 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 0 0 0 0 0 232
/**
 * Encapsulates access to the environment variables and command-line arguments
 * at the time of execution.  This is encapsulated to support accessing these
 * things during static init time, which seems to be risky at best.
 */

2700 10 FileStream 0 26625 10 FileStream 10 FileStream 0 0 0 1 1814 1815 0 2 1816 1817 0 0 1 0 2701 0 0 0 0 324
/**
 * Implements a C++ stream object suitable for reading from and/or writing to
 * files on disk.  This is similar to fstream, but it provides low-level
 * support for Panda's simple-threading implementation (using this interface
 * will block only the current thread, rather than the entire process, on I/O
 * waits).
 */

2701 8 iostream 0 141313 8 iostream 8 iostream 0 0 0 0 1813 0 1 1812 0 0 2 3 2702 1802 1803 3 2707 1810 1811 0 0 0

2702 7 istream 0 141313 7 istream 7 istream 0 0 0 0 1801 0 3 1798 1799 1800 0 0 1 5 2703 1797 0 0 0 0

2703 3 ios 0 141313 3 ios 3 ios 0 0 0 0 1796 0 5 1791 1792 1793 1794 1795 0 0 1 0 2704 0 0 0 0 0

2704 8 ios_base 0 141313 8 ios_base 8 ios_base 0 0 0 0 1790 0 0 0 0 0 0 2 2705 2706 144
// We need to expose one method in each class to force it to publish.
// But we'd like to expose some of these methods anyway, so no
// problem.

2705 7 seekdir 0 794624 17 ios_base::seekdir 17 ios_base::seekdir 2704 0 0 0 0 0 0 0 0 0 3 3 beg 13 ios_base::beg 0
0 3 cur 13 ios_base::cur 0
1 3 end 13 ios_base::end 0
2 0 0

2706 8 openmode 0 794624 18 ios_base::openmode 18 ios_base::openmode 2704 0 0 0 0 0 0 0 0 0 0 0 0

2707 7 ostream 0 141313 7 ostream 7 ostream 0 0 0 0 1809 0 4 1805 1806 1807 1808 0 0 1 5 2703 1804 0 0 0 0

2708 11 GlobPattern 0 141313 11 GlobPattern 11 GlobPattern 0 0 0 1 1818 1834 3 3131 3132 3133 15 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 0 0 0 0 0 538
/**
 * This class can be used to test for string matches against standard Unix-
 * shell filename globbing conventions.  It serves as a portable standin for
 * the Posix fnmatch() call.
 *
 * A GlobPattern is given a pattern string, which can contain operators like
 * *, ?, and [].  Then it can be tested against any number of candidate
 * strings; for each candidate, it will indicate whether the string matches
 * the pattern or not.  It can be used, for example, to scan a directory for
 * all files matching a particular pattern.
 */

2709 14 IDecryptStream 0 141313 14 IDecryptStream 14 IDecryptStream 0 0 0 1 1835 1841 3 3134 3135 3136 5 1836 1837 1838 1839 1840 0 0 1 0 2702 0 0 0 0 340
/**
 * An input stream object that uses OpenSSL to decrypt the input from another
 * source stream on-the-fly.
 *
 * Attach an IDecryptStream to an existing istream that provides encrypted
 * data, as generated by an OEncryptStream, and read the corresponding
 * unencrypted data from the IDecryptStream.
 *
 * Seeking is not supported.
 */

2710 11 IFileStream 0 26625 11 IFileStream 11 IFileStream 0 0 0 1 1842 1843 0 2 1844 1845 0 0 1 0 2702 0 0 0 0 303
/**
 * Implements a C++ stream object suitable for reading from files on disk.
 * This is similar to ifstream, but it provides low-level support for Panda's
 * simple-threading implementation (using this interface will block only the
 * current thread, rather than the entire process, on I/O waits).
 */

2711 14 IStreamWrapper 0 26625 14 IStreamWrapper 14 IStreamWrapper 0 0 0 1 1850 1851 1 3137 1 1852 0 0 1 5 2712 1849 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

2712 17 StreamWrapperBase 0 141313 17 StreamWrapperBase 17 StreamWrapperBase 0 0 0 0 1848 0 2 1846 1847 0 0 0 0 0 116
/**
 * The base class for both IStreamWrapper and OStreamWrapper, this provides
 * the common locking interface.
 */

2713 9 istream * 0 8576 9 istream * 9 istream * 0 0 2702 0 0 0 0 0 0 0 0 0 0

2714 10 LineStream 0 141313 10 LineStream 10 LineStream 0 0 0 1 1853 1857 0 3 1854 1855 1856 0 0 1 0 2707 0 0 0 0 454
/**
 * This is a special ostream that writes to a memory buffer, like ostrstream.
 * However, its contents can be continuously extracted as a sequence of lines
 * of text.
 *
 * Unlike ostrstream, which can only be extracted from once (and then the
 * buffer freezes and it can no longer be written to), the LineStream is not
 * otherwise affected when a line of text is extracted.  More text can still
 * be written to it and continuously extracted.
 */

2715 15 NeverFreeMemory 0 141313 15 NeverFreeMemory 15 NeverFreeMemory 0 0 0 0 1861 0 3 1858 1859 1860 0 0 0 0 0 505
/**
 * This class is used to allocate bytes of memory from a pool that is never
 * intended to be freed.  It is particularly useful to support DeletedChain,
 * which allocates memory in just such a fashion.
 *
 * When it is known that memory will not be freed, it is preferable to use
 * this instead of the standard malloc() (or global_operator_new()) call,
 * since this will help reduce fragmentation problems in the dynamic heap.
 * Also, memory allocated from here will exhibit less wasted space.
 */

2716 6 Notify 0 26625 6 Notify 6 Notify 0 0 0 1 1862 1863 0 15 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 0 0 0 0 0 529
/**
 * An object that handles general error reporting to the user.  It contains a
 * pointer to an ostream, initially cerr, which can be reset at will to point
 * to different output devices, according to the needs of the application.
 * All output generated within Panda should vector through the Notify ostream.
 *
 * This also includes a collection of Categories and Severities, which may be
 * independently enabled or disabled, so that error messages may be squelched
 * or respected according to the wishes of the user.
 */

2717 14 NotifyCategory 0 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 1 1904 1905 4 3138 3139 3140 3141 21 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1 3177 0 2 3 2648 1879 1880 3 2662 1881 1882 0 0 284
/**
 * A particular category of error messages.  Typically there will be one of
 * these per package, so that we can turn on or off error messages at least at
 * a package level; further nested categories can be created within a package
 * if a finer grain of control is required.
 */

2718 14 NotifySeverity 0 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 41
// Never used, a special case internally.
0 7 NS_spam 7 NS_spam 0
1 8 NS_debug 8 NS_debug 0
2 7 NS_info 7 NS_info 0
3 10 NS_warning 10 NS_warning 0
4 8 NS_error 8 NS_error 37
// Specifically, a recoverable error.
5 8 NS_fatal 8 NS_fatal 55
// A nonrecoverable error--expect abort() or core dump.
6 0 0

2719 16 NotifyCategory * 0 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 2717 0 0 0 0 0 0 0 0 0 0

2720 14 OEncryptStream 0 141313 14 OEncryptStream 14 OEncryptStream 0 0 0 1 1906 1915 3 3142 3143 3144 5 1907 1908 1909 1910 1911 0 0 1 0 2707 0 0 0 0 296
/**
 * An input stream object that uses OpenSSL to encrypt data to another
 * destination stream on-the-fly.
 *
 * Attach an OEncryptStream to an existing ostream that will accept encrypted
 * data, and write your unencrypted source data to the OEncryptStream.
 *
 * Seeking is not supported.
 */

2721 11 OFileStream 0 26625 11 OFileStream 11 OFileStream 0 0 0 1 1916 1917 0 2 1918 1919 0 0 1 0 2707 0 0 0 0 302
/**
 * Implements a C++ stream object suitable for writing to files on disk.  This
 * is similar to ofstream, but it provides low-level support for Panda's
 * simple-threading implementation (using this interface will block only the
 * current thread, rather than the entire process, on I/O waits).
 */

2722 14 OStreamWrapper 0 26625 14 OStreamWrapper 14 OStreamWrapper 0 0 0 1 1921 1922 1 3145 1 1923 0 0 1 5 2712 1920 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

2723 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2707 0 0 0 0 0 0 0 0 0 0

2724 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 2725 0 0 0 0 0 0 0 0 0 0

2725 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 1924 1941 0 16 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 0 0 1 0 2645 0 0 0 0 0

2726 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 2727 0 0 0 0 0 0 0 0 0 0

2727 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 1942 1959 0 16 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 0 0 1 0 2651 0 0 0 0 0

2728 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 2729 0 0 0 0 0 0 0 0 0 0

2729 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 1960 1977 0 16 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 0 0 1 0 2655 0 0 0 0 0

2730 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 2731 0 0 0 0 0 0 0 0 0 0

2731 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 1978 1995 0 16 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 0 0 1 0 2659 0 0 0 0 0

2732 11 PandaSystem 0 43009 11 PandaSystem 11 PandaSystem 0 0 0 0 0 1 3146 25 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 1 3178 0 0 0 0 217
/**
 * This class is used as a namespace to group several global properties of
 * Panda.  Application developers can use this class to query the runtime
 * version or capabilities of the current Panda environment.
 */

2733 12 StreamReader 0 26625 12 StreamReader 12 StreamReader 0 0 0 1 2021 2023 1 3147 29 2022 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

2734 13 StreamWrapper 0 26625 13 StreamWrapper 13 StreamWrapper 0 0 0 1 2056 2057 1 3148 1 2058 0 0 2 3 2711 2052 2053 3 2722 2054 2055 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

2735 10 iostream * 0 8576 10 iostream * 10 iostream * 0 0 2701 0 0 0 0 0 0 0 0 0 0

2736 12 StreamWriter 0 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 2059 2061 2 3149 3150 29 2060 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

2737 11 TextEncoder 0 141313 11 TextEncoder 11 TextEncoder 0 0 0 1 2092 2129 0 36 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 0 0 0 0 1 2738 400
/**
 * This class can be used to convert text between multiple representations,
 * e.g.  utf-8 to Unicode.  You may use it as a static class object, passing
 * the encoding each time, or you may create an instance and use that object,
 * which will record the current encoding and retain the current string.
 *
 * This class is also a base class of TextNode, which inherits this
 * functionality.
 */

2738 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 2737 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_unicode 22 TextEncoder::E_unicode 0
2 0 0

2739 10 TypeHandle 0 141313 10 TypeHandle 10 TypeHandle 0 0 0 1 2154 2155 4 3151 3152 3153 3154 23 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 0 1 2153 0 0 1 2740 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

2740 11 MemoryClass 0 794624 23 TypeHandle::MemoryClass 23 TypeHandle::MemoryClass 2739 0 0 0 0 0 0 0 0 0 5 12 MC_singleton 24 TypeHandle::MC_singleton 0
0 8 MC_array 20 TypeHandle::MC_array 0
1 23 MC_deleted_chain_active 35 TypeHandle::MC_deleted_chain_active 0
2 25 MC_deleted_chain_inactive 37 TypeHandle::MC_deleted_chain_inactive 0
3 8 MC_limit 20 TypeHandle::MC_limit 70
// Not a real value, just a placeholder for the maximum
// enum value.
4 0 0

2741 12 TypeRegistry 0 141313 12 TypeRegistry 12 TypeRegistry 0 0 0 1 2175 2176 2 3155 3156 19 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2 3179 3180 0 1 0 2648 0 0 0 0 324
/**
 * The TypeRegistry class maintains all the assigned TypeHandles in a given
 * system.  There should be only one TypeRegistry class during the lifetime of
 * the application.  It will be created on the local heap initially, and it
 * should be migrated to shared memory as soon as shared memory becomes
 * available.
 */

2742 11 TypedObject 0 26625 11 TypedObject 11 TypedObject 0 0 0 0 2179 1 3157 5 2180 2181 2182 2183 2184 0 0 1 3 2648 2177 2178 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

2743 7 fstream 0 141313 7 fstream 7 fstream 0 0 0 1 2185 2187 0 1 2186 0 0 1 0 2701 0 0 0 0 0

2744 8 ifstream 0 141313 8 ifstream 8 ifstream 0 0 0 1 2188 2190 0 1 2189 0 0 1 0 2702 0 0 0 0 0

2745 8 ofstream 0 141313 8 ofstream 8 ofstream 0 0 0 1 2191 2193 0 1 2192 0 0 1 0 2707 0 0 0 0 0

2746 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 2197 1 3158 6 2198 2199 2200 2201 2202 2203 0 0 1 3 2648 2195 2196 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

2747 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 1 2205 2197 0 1 2204 0 0 1 0 2746 0 0 0 0 10
/**
 *
 */

2748 25 PStatCollectorForwardBase 0 141313 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 1 2214 2215 0 1 2213 0 0 1 0 2746 0 0 0 0 282
/**
 * This class serves as a cheap forward reference to a PStatCollector, which
 * is defined in the pstatclient module (and is not directly accessible here
 * in the express module).
 *
 * This is subclassed as PStatCollectorForward, which defines the actual
 * functionality.
 */

2749 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 6 2216 2217 2218 2219 2220 2221 0 0 1 0 2746 0 0 0 0 603
/**
 * This class specializes ReferenceCount to add an additional counter, called
 * node_ref_count, for the purposes of counting the number of times the object
 * is referenced by a "node", whatever that may mean in context.
 *
 * The new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  There also exists a
 * NodePointerTo<> class to maintain the node_ref counters automatically.
 *
 * See also CachedTypedWritableReferenceCount, which is similar in principle,
 * as well as NodeCachedReferenceCount, which combines both of these.
 */

2750 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 2222 2179 0 46 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 0 0 1 0 2742 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

2751 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 2269 0 9 2270 2271 2272 2273 2274 2275 2276 2277 2278 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

2752 16 DatagramIterator 0 141313 16 DatagramIterator 16 DatagramIterator 0 0 0 1 2279 2314 0 34 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

2753 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 2315 0 7 2316 2317 2318 2319 2320 2321 2322 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

2754 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

2755 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 2338 0 1 2337 0 0 2 3 2742 2333 2334 3 2746 2335 2336 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

2756 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 2339 2342 0 2 2340 2341 0 0 1 0 2755 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

2757 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 2343 2352 0 8 2344 2345 2346 2347 2348 2349 2350 2351 0 0 0 0 0 85
/**
 * An in-memory buffer specifically designed for downloading files to memory.
 */

2758 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 2353 2383 0 29 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 0 0 0 0 0 109
/**
 * Stores a 128-bit value that represents the hashed contents (typically MD5)
 * of a file or buffer.
 */

2759 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 2384 2387 0 2 2385 2386 0 0 1 0 2702 0 0 0 0 392
/**
 * An istream object that presents a subwindow into another istream.  The
 * first character read from this stream will be the "start" character from
 * the source istream; just before the file pointer reaches the "end"
 * character, eof is returned.
 *
 * The source stream must be one that we can randomly seek within.  The
 * resulting ISubStream will also support arbitrary seeks.
 */

2760 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 2388 2391 0 2 2389 2390 0 0 1 0 2707 0 0 0 0 391
/**
 * An ostream object that presents a subwindow into another ostream.  The
 * first character written to this stream will be the "start" character in the
 * dest istream; no characters may be written to character "end" or later
 * (unless end is zero).
 *
 * The dest stream must be one that we can randomly seek within.  The
 * resulting OSubStream will also support arbitrary seeks.
 */

2761 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 2392 2395 0 2 2393 2394 0 0 1 0 2701 0 0 0 0 68
/**
 * Combined ISubStream and OSubStream for bidirectional I/O.
 */

2762 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 2396 2197 0 61 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 1 3181 0 1 0 2746 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

2763 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 2458 2465 1 3159 6 2459 2460 2461 2462 2463 2464 0 0 1 0 2648 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

2764 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 2466 2467 2468 2469 2470 2471 2472 2473 0 0 0 0 0 205
/**
 * Provides an interface wrapper around the OpenSSL library, to ensure that
 * the library is properly initialized in the application, and to provide some
 * hooks into global OpenSSL context data.
 */

2765 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 2474 2482 0 7 2475 2476 2477 2478 2479 2480 2481 0 0 0 0 0 200
/**
 * This class records a particular byte sub-range within an existing file on
 * disk.  Generally, the filename is understood as a physical file on disk,
 * and not to be looked up via the vfs.
 */

2766 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 2512 0 29 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 0 0 1 0 2755 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

2767 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 2514 0 1 2513 0 0 1 0 2766 0 0 0 0 223
/**
 * A composite directory within the VirtualFileSystem: this maps to more than
 * one directory on different mount points.  The resulting directory appears
 * to be the union of all the individual simple directories.
 */

2768 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 2338 0 6 2515 2516 2517 2518 2519 2520 0 0 1 0 2755 0 0 0 0 159
/**
 * The abstract base class for a mount definition used within a
 * VirtualFileSystem.  Normally users don't need to monkey with this class
 * directly.
 */

2769 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 2521 2338 0 2 2522 2523 0 0 1 0 2768 0 0 0 0 66
/**
 * Maps a Multifile's contents into the VirtualFileSystem.
 */

2770 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 2524 2526 0 1 2525 0 0 1 0 2768 0 0 0 0 384
/**
 * Simulates an actual directory on disk with in-memory storage.  This is
 * useful mainly for performing high level functions that expect disk I/O
 * without actually writing files to disk.  Naturally, there are significant
 * limits to the size of the files that may be written with this system; and
 * "files" written here are not automatically persistent between sessions.
 */

2771 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 2527 2530 0 2 2528 2529 0 0 1 0 2768 0 0 0 0 66
/**
 * Maps an actual OS directory into the VirtualFileSystem.
 */

2772 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 2534 0 3 2531 2532 2533 0 0 1 0 2766 0 0 0 0 183
/**
 * A simple file or directory within the VirtualFileSystem: this maps to
 * exactly one file on one mount point.  Most directories, and all regular
 * files, are of this kind.
 */

2773 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 2535 2342 0 1 2536 0 0 1 0 2756 0 0 0 0 206
/**
 * This is a special kind of FileReference class that automatically deletes
 * the file in question when it is deleted.  It is not responsible for
 * creating, opening, or closing the file, however.
 */

2774 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 2537 2540 0 2 2538 2539 0 0 1 0 2702 0 0 0 0 323
/**
 * An input stream object that uses zlib to decompress (inflate) the input
 * from another source stream on-the-fly.
 *
 * Attach an IDecompressStream to an existing istream that provides compressed
 * data, and read the corresponding uncompressed data from the
 * IDecompressStream.
 *
 * Seeking is not supported.
 */

2775 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 2541 2544 0 2 2542 2543 0 0 1 0 2707 0 0 0 0 311
/**
 * An input stream object that uses zlib to compress (deflate) data to another
 * destination stream on-the-fly.
 *
 * Attach an OCompressStream to an existing ostream that will accept
 * compressed data, and write your uncompressed source data to the
 * OCompressStream.
 *
 * Seeking is not supported.
 */

2776 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 1 2551 2197 0 6 2545 2546 2547 2548 2549 2550 1 3182 0 1 0 2746 0 0 0 0 80
/**
 * A list of VirtualFiles, as returned by VirtualFile::scan_directory().
 */

2777 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 2552 2553 1 3160 37 2554 2555 2556 2557 2558 2559 2560 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 1 3183 0 0 0 1 2778 352
/**
 * A hierarchy of directories and files that appears to be one continuous file
 * system, even though the files may originate from several different sources
 * that may not be related to the actual OS's file system.
 *
 * For instance, a VirtualFileSystem can transparently mount one or more
 * Multifiles as their own subdirectory hierarchies.
 */

2778 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 2777 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

2779 29 PointerTo< VirtualFileMount > 0 141313 29 PointerTo< VirtualFileMount > 29 PointerTo< VirtualFileMount > 0 0 0 1 2563 2568 0 4 2564 2565 2566 2567 0 0 1 0 2780 0 0 0 0 0

2780 33 PointerToBase< VirtualFileMount > 0 43009 33 PointerToBase< VirtualFileMount > 33 PointerToBase< VirtualFileMount > 0 0 0 0 0 0 2 2561 2562 0 0 1 0 2647 0 0 0 0 0

2781 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 2599 2600 5 3161 3162 3163 3164 3165 14 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 0 0 0 0 0 10
/**
 *
 */

2782 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2783 0 0 0 0 0 0 0 0 0 0

2783 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2784 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 2758 0 0 0 0 0 0 0 0 0 0

2785 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 4 3166 3167 3168 3169 6 2616 2617 2618 2619 2620 2621 0 0 0 0 0 467
/**
 * An interface to whatever real-time clock we might have available in the
 * current environment.  There is only one TrueClock in existence, and it
 * constructs itself.
 *
 * The TrueClock returns elapsed real time in seconds since some undefined
 * epoch.  Since it is not defined at what time precisely the clock indicates
 * zero, this value can only be meaningfully used to measure elapsed time, by
 * sampling it at two different times and subtracting.
 */

2786 12 ProfileTimer 0 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 2622 2623 0 9 2624 2625 2626 2627 2628 2629 2630 2631 2632 0 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

2787 17 WeakPointerToVoid 0 141313 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 2635 0 2 2633 2634 0 0 1 0 2647 0 0 0 0 152
/**
 * This is the specialization of PointerToVoid for weak pointers.  It needs an
 * additional flag to indicate that the pointer has been deleted.
 */

2788 15 WindowsRegistry 0 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 1 2641 2642 0 5 2636 2637 2638 2639 2640 0 0 0 0 2 2789 2790 249
/**
 * This class provides a hook to Python to read and write strings and integers
 * to the windows registry.  It automatically converts strings from utf-8
 * encoding and stores them in Unicode (and conversely reconverts them on
 * retrieval).
 */

2789 8 RegLevel 0 794624 25 WindowsRegistry::RegLevel 25 WindowsRegistry::RegLevel 2788 0 0 0 0 0 0 0 0 0 2 10 rl_machine 27 WindowsRegistry::rl_machine 0
0 7 rl_user 24 WindowsRegistry::rl_user 0
1 0 0

2790 4 Type 0 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 2788 0 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0
0 5 T_int 22 WindowsRegistry::T_int 0
1 8 T_string 25 WindowsRegistry::T_string 0
2 0 0

2791 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 2726 0 0 0 0 0 0 0 0 0 0

2792 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 2649 0 0 0 0 0 0 0 0 0 0

2793 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 2794 0 0 0 0 0 0 0 0 0 0

2794 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 2644 0 0 0 0 0 0 0 0 0 0

2795 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 2644 0 0 0 0 0 0 0 0 0 0

2796 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 2797 0 0 0 0 0 0 0 0 0 0

2797 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 2725 0 0 0 0 0 0 0 0 0 0

2798 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2799 0 0 0 0 0 0 0 0 0 0

2799 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 2800 0 0 0 0 0 0 0 0 0 0

2800 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

2801 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2802 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2803 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 2804 0 0 0 0 0 0 0 0 0 0

2804 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 2805 0 0 0 0 0 0 0 0 0 0

2805 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

2806 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2807 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 2646 0 0 0 0 0 0 0 0 0 0

2808 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 2809 0 0 0 0 0 0 0 0 0 0

2809 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 2646 0 0 0 0 0 0 0 0 0 0

2810 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 2811 0 0 0 0 0 0 0 0 0 0

2811 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 2647 0 0 0 0 0 0 0 0 0 0

2812 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 2801 0 0 0 0 0 0 0 0 0 0

2813 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 2814 0 0 0 0 0 0 0 0 0 0

2814 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 2650 0 0 0 0 0 0 0 0 0 0

2815 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 2650 0 0 0 0 0 0 0 0 0 0

2816 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 2817 0 0 0 0 0 0 0 0 0 0

2817 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 2727 0 0 0 0 0 0 0 0 0 0

2818 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 2652 0 0 0 0 0 0 0 0 0 0

2819 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 2820 0 0 0 0 0 0 0 0 0 0

2820 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 2652 0 0 0 0 0 0 0 0 0 0

2821 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 2822 0 0 0 0 0 0 0 0 0 0

2822 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 2654 0 0 0 0 0 0 0 0 0 0

2823 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 2654 0 0 0 0 0 0 0 0 0 0

2824 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 2825 0 0 0 0 0 0 0 0 0 0

2825 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 2729 0 0 0 0 0 0 0 0 0 0

2826 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 2656 0 0 0 0 0 0 0 0 0 0

2827 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 2828 0 0 0 0 0 0 0 0 0 0

2828 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 2656 0 0 0 0 0 0 0 0 0 0

2829 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 2830 0 0 0 0 0 0 0 0 0 0

2830 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 2658 0 0 0 0 0 0 0 0 0 0

2831 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 2658 0 0 0 0 0 0 0 0 0 0

2832 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 2833 0 0 0 0 0 0 0 0 0 0

2833 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 2731 0 0 0 0 0 0 0 0 0 0

2834 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

2835 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 2660 0 0 0 0 0 0 0 0 0 0

2836 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 2837 0 0 0 0 0 0 0 0 0 0

2837 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 2660 0 0 0 0 0 0 0 0 0 0

2838 13 ConfigFlags * 0 8576 13 ConfigFlags * 13 ConfigFlags * 0 0 2662 0 0 0 0 0 0 0 0 0 0

2839 19 ConfigFlags const * 0 8576 19 ConfigFlags const * 19 ConfigFlags const * 0 0 2840 0 0 0 0 0 0 0 0 0 0

2840 17 ConfigFlags const 0 8832 17 ConfigFlags const 17 ConfigFlags const 0 0 2662 0 0 0 0 0 0 0 0 0 0

2841 18 ConfigPage const * 0 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 2842 0 0 0 0 0 0 0 0 0 0

2842 16 ConfigPage const 0 8832 16 ConfigPage const 16 ConfigPage const 0 0 2666 0 0 0 0 0 0 0 0 0 0

2843 26 ConfigVariableCore const * 0 8576 26 ConfigVariableCore const * 26 ConfigVariableCore const * 0 0 2844 0 0 0 0 0 0 0 0 0 0

2844 24 ConfigVariableCore const 0 8832 24 ConfigVariableCore const 24 ConfigVariableCore const 0 0 2674 0 0 0 0 0 0 0 0 0 0

2845 25 ConfigPageManager const * 0 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 2846 0 0 0 0 0 0 0 0 0 0

2846 23 ConfigPageManager const 0 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 2677 0 0 0 0 0 0 0 0 0 0

2847 19 ConfigPageManager * 0 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 2677 0 0 0 0 0 0 0 0 0 0

2848 13 DSearchPath * 0 8576 13 DSearchPath * 13 DSearchPath * 0 0 2694 0 0 0 0 0 0 0 0 0 0

2849 22 ConfigVariable const * 0 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 2850 0 0 0 0 0 0 0 0 0 0

2850 20 ConfigVariable const 0 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 2678 0 0 0 0 0 0 0 0 0 0

2851 16 ConfigVariable * 0 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 2678 0 0 0 0 0 0 0 0 0 0

2852 26 ConfigVariableBase const * 0 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 2853 0 0 0 0 0 0 0 0 0 0

2853 24 ConfigVariableBase const 0 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 2679 0 0 0 0 0 0 0 0 0 0

2854 20 ConfigVariableBase * 0 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 2679 0 0 0 0 0 0 0 0 0 0

2855 26 ConfigVariableBool const * 0 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 2856 0 0 0 0 0 0 0 0 0 0

2856 24 ConfigVariableBool const 0 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 2680 0 0 0 0 0 0 0 0 0 0

2857 20 ConfigVariableBool * 0 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 2680 0 0 0 0 0 0 0 0 0 0

2858 28 ConfigVariableDouble const * 0 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 2859 0 0 0 0 0 0 0 0 0 0

2859 26 ConfigVariableDouble const 0 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 2681 0 0 0 0 0 0 0 0 0 0

2860 22 ConfigVariableDouble * 0 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 2681 0 0 0 0 0 0 0 0 0 0

2861 30 ConfigVariableFilename const * 0 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 2862 0 0 0 0 0 0 0 0 0 0

2862 28 ConfigVariableFilename const 0 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 2683 0 0 0 0 0 0 0 0 0 0

2863 24 ConfigVariableFilename * 0 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 2683 0 0 0 0 0 0 0 0 0 0

2864 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 2696 0 0 0 0 0 0 0 0 0 0

2865 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

2866 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 2684 0 0 0 0 0 0 0 0 0 0

2867 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 2868 0 0 0 0 0 0 0 0 0 0

2868 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 2869 0 0 0 0 0 0 0 0 0 0

2869 17 pvector< string > 0 2048 22 pvector< std::string > 22 pvector< std::string > 0 0 0 0 0 0 0 0 0 0 0 0 0

2870 6 time_t 0 2105344 6 time_t 6 time_t 0 0 2871 0 0 0 0 0 0 0 0 0 0

2871 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2872 10 streamsize 0 2105344 10 streamsize 10 streamsize 0 0 2671 0 0 0 0 0 0 0 0 0 0

2873 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2693 0 0 0 0 0 0 0 0 0 0

2874 10 ifstream * 0 8576 10 ifstream * 10 ifstream * 0 0 2744 0 0 0 0 0 0 0 0 0 0

2875 11 pifstream * 0 8576 11 pifstream * 11 pifstream * 0 0 2876 0 0 0 0 0 0 0 0 0 0

2876 9 pifstream 0 2105344 9 pifstream 9 pifstream 0 0 2710 0 0 0 0 0 0 0 0 0 0

2877 10 ofstream * 0 8576 10 ofstream * 10 ofstream * 0 0 2745 0 0 0 0 0 0 0 0 0 0

2878 11 pofstream * 0 8576 11 pofstream * 11 pofstream * 0 0 2879 0 0 0 0 0 0 0 0 0 0

2879 9 pofstream 0 2105344 9 pofstream 9 pofstream 0 0 2721 0 0 0 0 0 0 0 0 0 0

2880 9 fstream * 0 8576 9 fstream * 9 fstream * 0 0 2743 0 0 0 0 0 0 0 0 0 0

2881 10 pfstream * 0 8576 10 pfstream * 10 pfstream * 0 0 2882 0 0 0 0 0 0 0 0 0 0

2882 8 pfstream 0 2105344 8 pfstream 8 pfstream 0 0 2700 0 0 0 0 0 0 0 0 0 0

2883 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2739 0 0 0 0 0 0 0 0 0 0

2884 25 ConfigVariableInt const * 0 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 2885 0 0 0 0 0 0 0 0 0 0

2885 23 ConfigVariableInt const 0 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 2686 0 0 0 0 0 0 0 0 0 0

2886 19 ConfigVariableInt * 0 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 2686 0 0 0 0 0 0 0 0 0 0

2887 27 ConfigVariableInt64 const * 0 8576 27 ConfigVariableInt64 const * 27 ConfigVariableInt64 const * 0 0 2888 0 0 0 0 0 0 0 0 0 0

2888 25 ConfigVariableInt64 const 0 8832 25 ConfigVariableInt64 const 25 ConfigVariableInt64 const 0 0 2687 0 0 0 0 0 0 0 0 0 0

2889 21 ConfigVariableInt64 * 0 8576 21 ConfigVariableInt64 * 21 ConfigVariableInt64 * 0 0 2687 0 0 0 0 0 0 0 0 0 0

2890 26 ConfigVariableList const * 0 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 2891 0 0 0 0 0 0 0 0 0 0

2891 24 ConfigVariableList const 0 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 2690 0 0 0 0 0 0 0 0 0 0

2892 20 ConfigVariableList * 0 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 2690 0 0 0 0 0 0 0 0 0 0

2893 23 ConfigVariableManager * 0 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 2691 0 0 0 0 0 0 0 0 0 0

2894 29 ConfigVariableManager const * 0 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 2895 0 0 0 0 0 0 0 0 0 0

2895 27 ConfigVariableManager const 0 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 2691 0 0 0 0 0 0 0 0 0 0

2896 32 ConfigVariableSearchPath const * 0 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 2897 0 0 0 0 0 0 0 0 0 0

2897 30 ConfigVariableSearchPath const 0 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 2692 0 0 0 0 0 0 0 0 0 0

2898 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2692 0 0 0 0 0 0 0 0 0 0

2899 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 2695 0 0 0 0 0 0 0 0 0 0

2900 15 Results const * 0 8576 28 DSearchPath::Results const * 28 DSearchPath::Results const * 0 0 2901 0 0 0 0 0 0 0 0 0 0

2901 13 Results const 0 8832 26 DSearchPath::Results const 26 DSearchPath::Results const 0 0 2695 0 0 0 0 0 0 0 0 0 0

2902 28 ConfigVariableString const * 0 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 2903 0 0 0 0 0 0 0 0 0 0

2903 26 ConfigVariableString const 0 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 2697 0 0 0 0 0 0 0 0 0 0

2904 22 ConfigVariableString * 0 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 2697 0 0 0 0 0 0 0 0 0 0

2905 9 DConfig * 0 8576 9 DConfig * 9 DConfig * 0 0 2698 0 0 0 0 0 0 0 0 0 0

2906 15 DConfig const * 0 8576 15 DConfig const * 15 DConfig const * 0 0 2907 0 0 0 0 0 0 0 0 0 0

2907 13 DConfig const 0 8832 13 DConfig const 13 DConfig const 0 0 2698 0 0 0 0 0 0 0 0 0 0

2908 28 ExecutionEnvironment const * 0 8576 28 ExecutionEnvironment const * 28 ExecutionEnvironment const * 0 0 2909 0 0 0 0 0 0 0 0 0 0

2909 26 ExecutionEnvironment const 0 8832 26 ExecutionEnvironment const 26 ExecutionEnvironment const 0 0 2699 0 0 0 0 0 0 0 0 0 0

2910 22 ExecutionEnvironment * 0 8576 22 ExecutionEnvironment * 22 ExecutionEnvironment * 0 0 2699 0 0 0 0 0 0 0 0 0 0

2911 12 FileStream * 0 8576 12 FileStream * 12 FileStream * 0 0 2700 0 0 0 0 0 0 0 0 0 0

2912 9 streamoff 0 2105344 9 streamoff 9 streamoff 0 0 2871 0 0 0 0 0 0 0 0 0 0

2913 5 ios * 0 8576 5 ios * 5 ios * 0 0 2703 0 0 0 0 0 0 0 0 0 0

2914 11 ios const * 0 8576 11 ios const * 11 ios const * 0 0 2915 0 0 0 0 0 0 0 0 0 0

2915 9 ios const 0 8832 9 ios const 9 ios const 0 0 2703 0 0 0 0 0 0 0 0 0 0

2916 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2917 0 0 0 0 0 0 0 0 0 0

2917 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 2708 0 0 0 0 0 0 0 0 0 0

2918 13 GlobPattern * 0 8576 13 GlobPattern * 13 GlobPattern * 0 0 2708 0 0 0 0 0 0 0 0 0 0

2919 16 IDecryptStream * 0 8576 16 IDecryptStream * 16 IDecryptStream * 0 0 2709 0 0 0 0 0 0 0 0 0 0

2920 22 IDecryptStream const * 0 8576 22 IDecryptStream const * 22 IDecryptStream const * 0 0 2921 0 0 0 0 0 0 0 0 0 0

2921 20 IDecryptStream const 0 8832 20 IDecryptStream const 20 IDecryptStream const 0 0 2709 0 0 0 0 0 0 0 0 0 0

2922 13 IFileStream * 0 8576 13 IFileStream * 13 IFileStream * 0 0 2710 0 0 0 0 0 0 0 0 0 0

2923 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 2711 0 0 0 0 0 0 0 0 0 0

2924 22 IStreamWrapper const * 0 8576 22 IStreamWrapper const * 22 IStreamWrapper const * 0 0 2925 0 0 0 0 0 0 0 0 0 0

2925 20 IStreamWrapper const 0 8832 20 IStreamWrapper const 20 IStreamWrapper const 0 0 2711 0 0 0 0 0 0 0 0 0 0

2926 19 StreamWrapperBase * 0 8576 19 StreamWrapperBase * 19 StreamWrapperBase * 0 0 2712 0 0 0 0 0 0 0 0 0 0

2927 12 LineStream * 0 8576 12 LineStream * 12 LineStream * 0 0 2714 0 0 0 0 0 0 0 0 0 0

2928 18 LineStream const * 0 8576 18 LineStream const * 18 LineStream const * 0 0 2929 0 0 0 0 0 0 0 0 0 0

2929 16 LineStream const 0 8832 16 LineStream const 16 LineStream const 0 0 2714 0 0 0 0 0 0 0 0 0 0

2930 8 Notify * 0 8576 8 Notify * 8 Notify * 0 0 2716 0 0 0 0 0 0 0 0 0 0

2931 14 Notify const * 0 8576 14 Notify const * 14 Notify const * 0 0 2932 0 0 0 0 0 0 0 0 0 0

2932 12 Notify const 0 8832 12 Notify const 12 Notify const 0 0 2716 0 0 0 0 0 0 0 0 0 0

2933 22 NotifyCategory const * 0 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 2934 0 0 0 0 0 0 0 0 0 0

2934 20 NotifyCategory const 0 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 2717 0 0 0 0 0 0 0 0 0 0

2935 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 2648 0 0 0 0 0 0 0 0 0 0

2936 16 OEncryptStream * 0 8576 16 OEncryptStream * 16 OEncryptStream * 0 0 2720 0 0 0 0 0 0 0 0 0 0

2937 22 OEncryptStream const * 0 8576 22 OEncryptStream const * 22 OEncryptStream const * 0 0 2938 0 0 0 0 0 0 0 0 0 0

2938 20 OEncryptStream const 0 8832 20 OEncryptStream const 20 OEncryptStream const 0 0 2720 0 0 0 0 0 0 0 0 0 0

2939 13 OFileStream * 0 8576 13 OFileStream * 13 OFileStream * 0 0 2721 0 0 0 0 0 0 0 0 0 0

2940 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 2722 0 0 0 0 0 0 0 0 0 0

2941 22 OStreamWrapper const * 0 8576 22 OStreamWrapper const * 22 OStreamWrapper const * 0 0 2942 0 0 0 0 0 0 0 0 0 0

2942 20 OStreamWrapper const 0 8832 20 OStreamWrapper const 20 OStreamWrapper const 0 0 2722 0 0 0 0 0 0 0 0 0 0

2943 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 2725 0 0 0 0 0 0 0 0 0 0

2944 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 2727 0 0 0 0 0 0 0 0 0 0

2945 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 2729 0 0 0 0 0 0 0 0 0 0

2946 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 2731 0 0 0 0 0 0 0 0 0 0

2947 19 PandaSystem const * 0 8576 19 PandaSystem const * 19 PandaSystem const * 0 0 2948 0 0 0 0 0 0 0 0 0 0

2948 17 PandaSystem const 0 8832 17 PandaSystem const 17 PandaSystem const 0 0 2732 0 0 0 0 0 0 0 0 0 0

2949 13 PandaSystem * 0 8576 13 PandaSystem * 13 PandaSystem * 0 0 2732 0 0 0 0 0 0 0 0 0 0

2950 20 StreamReader const * 0 8576 20 StreamReader const * 20 StreamReader const * 0 0 2951 0 0 0 0 0 0 0 0 0 0

2951 18 StreamReader const 0 8832 18 StreamReader const 18 StreamReader const 0 0 2733 0 0 0 0 0 0 0 0 0 0

2952 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 2733 0 0 0 0 0 0 0 0 0 0

2953 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 2954 0 0 0 0 0 0 0 0 0 0

2954 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

2955 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 2834 0 0 0 0 0 0 0 0 0 0

2956 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 2957 0 0 0 0 0 0 0 0 0 0

2957 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2958 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 2671 0 0 0 0 0 0 0 0 0 0

2959 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 2960 0 0 0 0 0 0 0 0 0 0

2960 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2961 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 2962 0 0 0 0 0 0 0 0 0 0

2962 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2963 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 2964 0 0 0 0 0 0 0 0 0 0

2964 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2965 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 2682 0 0 0 0 0 0 0 0 0 0

2966 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 2734 0 0 0 0 0 0 0 0 0 0

2967 21 StreamWrapper const * 0 8576 21 StreamWrapper const * 21 StreamWrapper const * 0 0 2968 0 0 0 0 0 0 0 0 0 0

2968 19 StreamWrapper const 0 8832 19 StreamWrapper const 19 StreamWrapper const 0 0 2734 0 0 0 0 0 0 0 0 0 0

2969 20 StreamWriter const * 0 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 2970 0 0 0 0 0 0 0 0 0 0

2970 18 StreamWriter const 0 8832 18 StreamWriter const 18 StreamWriter const 0 0 2736 0 0 0 0 0 0 0 0 0 0

2971 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 2736 0 0 0 0 0 0 0 0 0 0

2972 13 TextEncoder * 0 8576 13 TextEncoder * 13 TextEncoder * 0 0 2737 0 0 0 0 0 0 0 0 0 0

2973 19 TextEncoder const * 0 8576 19 TextEncoder const * 19 TextEncoder const * 0 0 2974 0 0 0 0 0 0 0 0 0 0

2974 17 TextEncoder const 0 8832 17 TextEncoder const 17 TextEncoder const 0 0 2737 0 0 0 0 0 0 0 0 0 0

2975 7 wchar_t 0 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0 0

2976 18 TypeHandle const * 0 8576 18 TypeHandle const * 18 TypeHandle const * 0 0 2977 0 0 0 0 0 0 0 0 0 0

2977 16 TypeHandle const 0 8832 16 TypeHandle const 16 TypeHandle const 0 0 2739 0 0 0 0 0 0 0 0 0 0

2978 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 2979 0 0 0 0 0 0 0 0 0 0

2979 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 2980 0 0 0 0 0 0 0 0 0 0

2980 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

2981 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 2742 0 0 0 0 0 0 0 0 0 0

2982 18 set< int > const * 0 8576 18 set< int > const * 18 set< int > const * 0 0 2983 0 0 0 0 0 0 0 0 0 0

2983 16 set< int > const 0 8832 16 set< int > const 16 set< int > const 0 0 2984 0 0 0 0 0 0 0 0 0 0

2984 10 set< int > 0 2048 10 set< int > 10 set< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

2985 20 TypeRegistry const * 0 8576 20 TypeRegistry const * 20 TypeRegistry const * 0 0 2986 0 0 0 0 0 0 0 0 0 0

2986 18 TypeRegistry const 0 8832 18 TypeRegistry const 18 TypeRegistry const 0 0 2741 0 0 0 0 0 0 0 0 0 0

2987 14 TypeRegistry * 0 8576 14 TypeRegistry * 14 TypeRegistry * 0 0 2741 0 0 0 0 0 0 0 0 0 0

2988 19 TypedObject const * 0 8576 19 TypedObject const * 19 TypedObject const * 0 0 2989 0 0 0 0 0 0 0 0 0 0

2989 17 TypedObject const 0 8832 17 TypedObject const 17 TypedObject const 0 0 2742 0 0 0 0 0 0 0 0 0 0

2990 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 2991 0 0 0 0 0 0 0 0 0 0

2991 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 2746 0 0 0 0 0 0 0 0 0 0

2992 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 2746 0 0 0 0 0 0 0 0 0 0

2993 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 2994 0 0 0 0 0 0 0 0 0 0

2994 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 2747 0 0 0 0 0 0 0 0 0 0

2995 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 2747 0 0 0 0 0 0 0 0 0 0

2996 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 2748 0 0 0 0 0 0 0 0 0 0

2997 33 PStatCollectorForwardBase const * 0 8576 33 PStatCollectorForwardBase const * 33 PStatCollectorForwardBase const * 0 0 2998 0 0 0 0 0 0 0 0 0 0

2998 31 PStatCollectorForwardBase const 0 8832 31 PStatCollectorForwardBase const 31 PStatCollectorForwardBase const 0 0 2748 0 0 0 0 0 0 0 0 0 0

2999 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 3000 0 0 0 0 0 0 0 0 0 0

3000 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 2749 0 0 0 0 0 0 0 0 0 0

3001 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 2750 0 0 0 0 0 0 0 0 0 0

3002 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 3003 0 0 0 0 0 0 0 0 0 0

3003 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 2750 0 0 0 0 0 0 0 0 0 0

3004 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 2783 0 0 0 0 0 0 0 0 0 0

3005 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 2730 0 0 0 0 0 0 0 0 0 0

3006 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 2657 0 0 0 0 0 0 0 0 0 0

3007 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 2751 0 0 0 0 0 0 0 0 0 0

3008 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 2765 0 0 0 0 0 0 0 0 0 0

3009 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 3010 0 0 0 0 0 0 0 0 0 0

3010 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 2751 0 0 0 0 0 0 0 0 0 0

3011 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2756 0 0 0 0 0 0 0 0 0 0

3012 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 3011 0 0 0 0 0 0 0 0 0 0

3013 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 2766 0 0 0 0 0 0 0 0 0 0

3014 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2752 0 0 0 0 0 0 0 0 0 0

3015 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 3016 0 0 0 0 0 0 0 0 0 0

3016 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 2752 0 0 0 0 0 0 0 0 0 0

3017 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 2753 0 0 0 0 0 0 0 0 0 0

3018 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 3019 0 0 0 0 0 0 0 0 0 0

3019 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 2765 0 0 0 0 0 0 0 0 0 0

3020 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 2755 0 0 0 0 0 0 0 0 0 0

3021 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 2756 0 0 0 0 0 0 0 0 0 0

3022 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 2757 0 0 0 0 0 0 0 0 0 0

3023 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 3024 0 0 0 0 0 0 0 0 0 0

3024 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 2757 0 0 0 0 0 0 0 0 0 0

3025 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2758 0 0 0 0 0 0 0 0 0 0

3026 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 2784 0 0 0 0 0 0 0 0 0 0

3027 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

3028 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 2759 0 0 0 0 0 0 0 0 0 0

3029 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 2760 0 0 0 0 0 0 0 0 0 0

3030 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 2761 0 0 0 0 0 0 0 0 0 0

3031 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 2762 0 0 0 0 0 0 0 0 0 0

3032 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 3033 0 0 0 0 0 0 0 0 0 0

3033 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 2762 0 0 0 0 0 0 0 0 0 0

3034 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 3035 0 0 0 0 0 0 0 0 0 0

3035 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 2763 0 0 0 0 0 0 0 0 0 0

3036 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 2763 0 0 0 0 0 0 0 0 0 0

3037 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 2764 0 0 0 0 0 0 0 0 0 0

3038 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 3039 0 0 0 0 0 0 0 0 0 0

3039 10 X509_STORE 0 2105344 10 X509_STORE 10 X509_STORE 0 0 3040 0 0 0 0 0 0 0 0 0 0

3040 13 x509_store_st 0 1024 13 x509_store_st 13 x509_store_st 0 0 0 0 0 0 0 0 0 0 0 0 0

3041 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 3042 0 0 0 0 0 0 0 0 0 0

3042 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 2766 0 0 0 0 0 0 0 0 0 0

3043 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 2777 0 0 0 0 0 0 0 0 0 0

3044 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 2776 0 0 0 0 0 0 0 0 0 0

3045 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 3046 0 0 0 0 0 0 0 0 0 0

3046 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 2768 0 0 0 0 0 0 0 0 0 0

3047 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 2769 0 0 0 0 0 0 0 0 0 0

3048 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 3049 0 0 0 0 0 0 0 0 0 0

3049 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 2769 0 0 0 0 0 0 0 0 0 0

3050 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 2770 0 0 0 0 0 0 0 0 0 0

3051 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 2771 0 0 0 0 0 0 0 0 0 0

3052 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 3053 0 0 0 0 0 0 0 0 0 0

3053 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 2771 0 0 0 0 0 0 0 0 0 0

3054 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 3055 0 0 0 0 0 0 0 0 0 0

3055 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 2772 0 0 0 0 0 0 0 0 0 0

3056 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 2768 0 0 0 0 0 0 0 0 0 0

3057 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 2773 0 0 0 0 0 0 0 0 0 0

3058 21 TemporaryFile const * 0 8576 21 TemporaryFile const * 21 TemporaryFile const * 0 0 3059 0 0 0 0 0 0 0 0 0 0

3059 19 TemporaryFile const 0 8832 19 TemporaryFile const 19 TemporaryFile const 0 0 2773 0 0 0 0 0 0 0 0 0 0

3060 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 2774 0 0 0 0 0 0 0 0 0 0

3061 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 2775 0 0 0 0 0 0 0 0 0 0

3062 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 3063 0 0 0 0 0 0 0 0 0 0

3063 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 2776 0 0 0 0 0 0 0 0 0 0

3064 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 3065 0 0 0 0 0 0 0 0 0 0

3065 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 2777 0 0 0 0 0 0 0 0 0 0

3066 31 PointerTo< VirtualFileMount > * 0 8576 31 PointerTo< VirtualFileMount > * 31 PointerTo< VirtualFileMount > * 0 0 2779 0 0 0 0 0 0 0 0 0 0

3067 37 PointerTo< VirtualFileMount > const * 0 8576 37 PointerTo< VirtualFileMount > const * 37 PointerTo< VirtualFileMount > const * 0 0 3068 0 0 0 0 0 0 0 0 0 0

3068 35 PointerTo< VirtualFileMount > const 0 8832 35 PointerTo< VirtualFileMount > const 35 PointerTo< VirtualFileMount > const 0 0 2779 0 0 0 0 0 0 0 0 0 0

3069 35 PointerToBase< VirtualFileMount > * 0 8576 35 PointerToBase< VirtualFileMount > * 35 PointerToBase< VirtualFileMount > * 0 0 2780 0 0 0 0 0 0 0 0 0 0

3070 41 PointerToBase< VirtualFileMount > const * 0 8576 41 PointerToBase< VirtualFileMount > const * 41 PointerToBase< VirtualFileMount > const * 0 0 3071 0 0 0 0 0 0 0 0 0 0

3071 39 PointerToBase< VirtualFileMount > const 0 8832 39 PointerToBase< VirtualFileMount > const 39 PointerToBase< VirtualFileMount > const 0 0 2780 0 0 0 0 0 0 0 0 0 0

3072 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 2781 0 0 0 0 0 0 0 0 0 0

3073 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 3074 0 0 0 0 0 0 0 0 0 0

3074 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 2781 0 0 0 0 0 0 0 0 0 0

3075 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 2785 0 0 0 0 0 0 0 0 0 0

3076 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 3077 0 0 0 0 0 0 0 0 0 0

3077 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 2785 0 0 0 0 0 0 0 0 0 0

3078 20 ProfileTimer const * 0 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 3079 0 0 0 0 0 0 0 0 0 0

3079 18 ProfileTimer const 0 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 2786 0 0 0 0 0 0 0 0 0 0

3080 14 ProfileTimer * 0 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 2786 0 0 0 0 0 0 0 0 0 0

3081 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 3082 0 0 0 0 0 0 0 0 0 0

3082 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 2787 0 0 0 0 0 0 0 0 0 0

3083 17 WindowsRegistry * 0 8576 17 WindowsRegistry * 17 WindowsRegistry * 0 0 2788 0 0 0 0 0 0 0 0 0 0

3084 23 WindowsRegistry const * 0 8576 23 WindowsRegistry const * 23 WindowsRegistry const * 0 0 3085 0 0 0 0 0 0 0 0 0 0

3085 21 WindowsRegistry const 0 8832 21 WindowsRegistry const 21 WindowsRegistry const 0 0 2788 0 0 0 0 0 0 0 0 0 0

0
84
3086 4 page 0 2 2665 1404 0 0 0 0 0 23 ConfigDeclaration::page 0

3087 4 name 0 2 2667 1408 0 0 0 0 0 16 ConfigPage::name 0

3088 7 special 0 2 2670 1409 0 0 0 0 0 19 ConfigPage::special 0

3089 8 implicit 0 2 2670 1410 0 0 0 0 0 20 ConfigPage::implicit 0

3090 4 sort 0 6 2671 1412 1411 0 0 0 0 16 ConfigPage::sort 0

3091 8 page_seq 0 2 2671 1413 0 0 0 0 0 20 ConfigPage::page_seq 0

3092 11 trust_level 0 6 2671 1414 1415 0 0 0 0 23 ConfigPage::trust_level 0

3093 9 signature 0 2 2667 1416 0 0 0 0 0 21 ConfigPage::signature 0

3094 12 declarations 0 66 2672 1424 0 0 0 0 1422 24 ConfigPage::declarations 0

3095 8 variable 0 2 2673 1405 0 0 0 0 0 27 ConfigDeclaration::variable 0

3096 12 declarations 0 66 2675 1450 0 0 0 0 1449 32 ConfigVariableCore::declarations 0

3097 4 name 0 2 2667 1431 0 0 0 0 0 24 ConfigVariableCore::name 0

3098 4 used 0 2 2670 1432 0 0 0 0 0 24 ConfigVariableCore::used 0

3099 6 closed 0 2 2670 1436 0 0 0 0 0 26 ConfigVariableCore::closed 0

3100 11 trust_level 0 2 2671 1437 0 0 0 0 0 31 ConfigVariableCore::trust_level 0

3101 7 dynamic 0 2 2670 1438 0 0 0 0 0 27 ConfigVariableCore::dynamic 0

3102 10 value_type 0 6 2663 1433 1440 0 0 0 0 30 ConfigVariableCore::value_type 0

3103 11 description 0 6 2667 1434 1442 0 0 0 0 31 ConfigVariableCore::description 0

3104 13 default_value 0 6 2675 1439 1443 0 0 0 0 33 ConfigVariableCore::default_value 0

3105 10 references 0 66 2675 1452 0 0 0 0 1451 30 ConfigVariableCore::references 0

3106 18 trusted_references 0 66 2675 1454 0 0 0 0 1453 38 ConfigVariableCore::trusted_references 0

3107 17 unique_references 0 66 2675 1456 0 0 0 0 1455 37 ConfigVariableCore::unique_references 0

3108 4 name 0 2 2667 1499 0 0 0 0 0 24 ConfigVariableBase::name 0

3109 10 value_type 0 2 2663 1500 0 0 0 0 0 30 ConfigVariableBase::value_type 0

3110 11 description 0 2 2667 1501 0 0 0 0 0 31 ConfigVariableBase::description 0

3111 6 closed 0 2 2670 1503 0 0 0 0 0 26 ConfigVariableBase::closed 0

3112 11 trust_level 0 2 2671 1504 0 0 0 0 0 31 ConfigVariableBase::trust_level 0

3113 7 dynamic 0 2 2670 1505 0 0 0 0 0 27 ConfigVariableBase::dynamic 0

3114 5 value 0 6 2670 1523 1522 0 0 0 0 25 ConfigVariableBool::value 0

3115 13 default_value 0 2 2670 1524 0 0 0 0 0 33 ConfigVariableBool::default_value 0

3116 5 value 0 6 2682 1534 1533 0 0 0 0 27 ConfigVariableDouble::value 0

3117 13 default_value 0 2 2682 1535 0 0 0 0 0 35 ConfigVariableDouble::default_value 0

3118 5 value 0 6 2684 1556 1555 0 0 0 0 29 ConfigVariableFilename::value 0

3119 13 default_value 0 2 2684 1557 0 0 0 0 0 37 ConfigVariableFilename::default_value 0

3120 5 value 0 6 2671 1669 1668 0 0 0 0 24 ConfigVariableInt::value 0

3121 13 default_value 0 2 2671 1670 0 0 0 0 0 32 ConfigVariableInt::default_value 0

3122 5 value 0 6 2688 1680 1679 0 0 0 0 26 ConfigVariableInt64::value 0

3123 13 default_value 0 2 2688 1681 0 0 0 0 0 34 ConfigVariableInt64::default_value 0

3124 9 variables 0 66 2673 1698 0 0 0 0 1697 32 ConfigVariableManager::variables 0

3125 5 value 0 2 2693 1711 0 0 0 0 0 31 ConfigVariableSearchPath::value 0

3126 11 directories 0 66 2696 1733 0 0 0 0 1732 24 DSearchPath::directories 0

3127 13 default_value 0 2 2693 1712 0 0 0 0 0 39 ConfigVariableSearchPath::default_value 0

3128 11 directories 0 66 2696 1747 0 0 0 0 1746 37 ConfigVariableSearchPath::directories 0

3129 5 value 0 6 2667 1763 1762 0 0 0 0 27 ConfigVariableString::value 0

3130 13 default_value 0 2 2668 1764 0 0 0 0 0 35 ConfigVariableString::default_value 0

3131 7 pattern 0 6 2667 1824 1823 0 0 0 0 20 GlobPattern::pattern 0

3132 14 case_sensitive 0 6 2670 1826 1825 0 0 0 0 27 GlobPattern::case_sensitive 0

3133 13 nomatch_chars 0 6 2667 1828 1827 0 0 0 0 26 GlobPattern::nomatch_chars 0

3134 9 algorithm 0 2 2667 1838 0 0 0 0 0 25 IDecryptStream::algorithm 0

3135 10 key_length 0 2 2671 1839 0 0 0 0 0 26 IDecryptStream::key_length 0

3136 15 iteration_count 0 2 2671 1840 0 0 0 0 0 31 IDecryptStream::iteration_count 0

3137 7 istream 0 2 2713 1852 0 0 0 0 0 23 IStreamWrapper::istream 0

3138 8 fullname 0 2 2668 1883 0 0 0 0 0 24 NotifyCategory::fullname 0

3139 8 basename 0 2 2668 1884 0 0 0 0 0 24 NotifyCategory::basename 0

3140 8 severity 0 6 2718 1885 1886 0 0 0 0 24 NotifyCategory::severity 0

3141 8 children 0 66 2719 1902 0 0 0 0 1901 24 NotifyCategory::children 0

3142 9 algorithm 0 6 2667 1912 1909 0 0 0 0 25 OEncryptStream::algorithm 0

3143 10 key_length 0 6 2671 1913 1910 0 0 0 0 26 OEncryptStream::key_length 0

3144 15 iteration_count 0 6 2671 1914 1911 0 0 0 0 31 OEncryptStream::iteration_count 0

3145 7 ostream 0 2 2723 1923 0 0 0 0 0 23 OStreamWrapper::ostream 0

3146 7 systems 0 66 2668 2012 0 0 0 0 2011 20 PandaSystem::systems 0

3147 7 istream 0 2 2713 2024 0 0 0 0 0 21 StreamReader::istream 0

3148 8 iostream 0 2 2735 2058 0 0 0 0 0 23 StreamWrapper::iostream 0

3149 7 ostream 0 2 2723 2062 0 0 0 0 0 21 StreamWriter::ostream 0

3150 9 softspace 0 6 2671 2090 2091 0 0 0 0 23 StreamWriter::softspace 54
// Python 2 needs this for printing to work correctly.

3151 5 index 0 2 2671 2150 0 0 0 0 0 17 TypeHandle::index 0

3152 4 name 0 2 2668 2139 0 0 0 0 0 16 TypeHandle::name 0

3153 14 parent_classes 0 66 2739 2142 0 0 0 0 2141 26 TypeHandle::parent_classes 0

3154 13 child_classes 0 66 2739 2144 0 0 0 0 2143 25 TypeHandle::child_classes 0

3155 11 typehandles 0 66 2739 2164 0 0 0 0 2163 25 TypeRegistry::typehandles 0

3156 12 root_classes 0 66 2739 2166 0 0 0 0 2165 26 TypeRegistry::root_classes 0

3157 4 type 0 2 2739 2180 0 0 0 0 0 17 TypedObject::type 0

3158 9 ref_count 0 2 2671 2198 0 0 0 0 0 25 ReferenceCount::ref_count 31
// The current reference count.

3159 4 name 0 6 2667 2462 2459 0 0 0 0 13 Namable::name 0

3160 6 mounts 0 66 2779 2560 0 0 0 0 2559 25 VirtualFileSystem::mounts 0

3161 8 progress 0 2 2782 2606 0 0 0 0 0 19 Patchfile::progress 0

3162 15 allow_multifile 0 6 2670 2608 2607 0 0 0 0 26 Patchfile::allow_multifile 0

3163 16 footprint_length 0 6 2671 2610 2609 0 0 0 0 27 Patchfile::footprint_length 0

3164 11 source_hash 0 10 2784 2613 0 2612 0 0 0 22 Patchfile::source_hash 0

3165 11 result_hash 0 2 2784 2614 0 0 0 0 0 22 Patchfile::result_hash 0

3166 9 long_time 0 2 2682 2616 0 0 0 0 0 20 TrueClock::long_time 0

3167 10 short_time 0 2 2682 2617 0 0 0 0 0 21 TrueClock::short_time 0

3168 14 short_raw_time 0 2 2682 2618 0 0 0 0 0 25 TrueClock::short_raw_time 0

3169 11 error_count 0 2 2671 2619 0 0 0 0 0 22 TrueClock::error_count 0

14
3170 16 get_declarations 0 1449 1450 36 ConfigVariableCore::get_declarations 0

3171 14 get_references 0 1451 1452 34 ConfigVariableCore::get_references 0

3172 22 get_trusted_references 0 1453 1454 42 ConfigVariableCore::get_trusted_references 0

3173 21 get_unique_references 0 1455 1456 41 ConfigVariableCore::get_unique_references 0

3174 13 get_variables 0 1697 1698 36 ConfigVariableManager::get_variables 0

3175 15 get_directories 0 1732 1733 28 DSearchPath::get_directories 0

3176 15 get_directories 0 1746 1747 41 ConfigVariableSearchPath::get_directories 0

3177 12 get_children 0 1901 1902 28 NotifyCategory::get_children 0

3178 11 get_systems 0 2011 2012 24 PandaSystem::get_systems 0

3179 15 get_typehandles 0 2163 2164 29 TypeRegistry::get_typehandles 0

3180 16 get_root_classes 0 2165 2166 30 TypeRegistry::get_root_classes 0

3181 17 get_subfile_names 0 2433 2438 28 Multifile::get_subfile_names 0

3182 9 get_files 0 2545 2546 26 VirtualFileList::get_files 0

3183 10 get_mounts 0 2559 2560 29 VirtualFileSystem::get_mounts 0

