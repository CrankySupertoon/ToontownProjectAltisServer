1494874817
3 2
14 libpandabullet 4 fCJ_ 14 panda3d.bullet 
749
764 19 get_default_up_axis 0 1 0 19 get_default_up_axis 0 1 762 10
/**
 *
 */
39
BulletUpAxis get_default_up_axis(void);

765 18 get_bullet_version 0 1 0 18 get_bullet_version 0 1 763 60
/**
 * Returns the version of the linked Bullet library.
 */
29
int get_bullet_version(void);

766 5 empty 0 4 1514 19 BulletRayHit::empty 0 1 3 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
53
static inline BulletRayHit BulletRayHit::empty(void);

767 8 get_node 0 4 1514 22 BulletRayHit::get_node 0 1 4 10
/**
 *
 */
46
PandaNode *BulletRayHit::get_node(void) const;

768 11 get_hit_pos 0 4 1514 25 BulletRayHit::get_hit_pos 0 1 5 10
/**
 *
 */
46
LPoint3 BulletRayHit::get_hit_pos(void) const;

769 14 get_hit_normal 0 4 1514 28 BulletRayHit::get_hit_normal 0 1 6 10
/**
 *
 */
50
LVector3 BulletRayHit::get_hit_normal(void) const;

770 16 get_hit_fraction 0 4 1514 30 BulletRayHit::get_hit_fraction 0 1 7 10
/**
 *
 */
55
PN_stdfloat BulletRayHit::get_hit_fraction(void) const;

771 14 get_shape_part 0 4 1514 28 BulletRayHit::get_shape_part 0 1 8 10
/**
 *
 */
45
int BulletRayHit::get_shape_part(void) const;

772 18 get_triangle_index 0 4 1514 32 BulletRayHit::get_triangle_index 0 1 9 10
/**
 *
 */
49
int BulletRayHit::get_triangle_index(void) const;

773 12 BulletRayHit 0 4 1514 26 BulletRayHit::BulletRayHit 0 2 1 2 0
117
inline BulletRayHit::BulletRayHit(void) = default;
inline BulletRayHit::BulletRayHit(BulletRayHit const &) = default;

774 13 ~BulletRayHit 0 4 1514 27 BulletRayHit::~BulletRayHit 0 0 0
34
BulletRayHit::~BulletRayHit(void);

775 34 upcast_to_AllHitsRayResultCallback 0 12 1524 58 BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback 0 1 17 62
upcast from BulletAllHitsRayResult to AllHitsRayResultCallback
109
btCollisionWorld::AllHitsRayResultCallback *BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback(void);

776 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 8 0 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 1 18 64
downcast from AllHitsRayResultCallback to BulletAllHitsRayResult
134
BulletAllHitsRayResult *downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult(btCollisionWorld::AllHitsRayResultCallback *this);

777 5 empty 0 4 1524 29 BulletAllHitsRayResult::empty 0 1 10 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
73
static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void);

778 12 get_from_pos 0 4 1524 36 BulletAllHitsRayResult::get_from_pos 0 1 11 10
/**
 *
 */
57
LPoint3 BulletAllHitsRayResult::get_from_pos(void) const;

779 10 get_to_pos 0 4 1524 34 BulletAllHitsRayResult::get_to_pos 0 1 12 10
/**
 *
 */
55
LPoint3 BulletAllHitsRayResult::get_to_pos(void) const;

780 8 has_hits 0 4 1524 32 BulletAllHitsRayResult::has_hits 0 1 13 10
/**
 *
 */
50
bool BulletAllHitsRayResult::has_hits(void) const;

781 24 get_closest_hit_fraction 0 4 1524 48 BulletAllHitsRayResult::get_closest_hit_fraction 0 1 14 10
/**
 *
 */
73
PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const;

782 12 get_num_hits 0 4 1524 36 BulletAllHitsRayResult::get_num_hits 0 1 15 10
/**
 *
 */
53
int BulletAllHitsRayResult::get_num_hits(void) const;

783 7 get_hit 0 4 1524 31 BulletAllHitsRayResult::get_hit 0 1 16 10
/**
 *
 */
66
BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const;

784 23 ~BulletAllHitsRayResult 0 4 1524 47 BulletAllHitsRayResult::~BulletAllHitsRayResult 0 0 0
54
BulletAllHitsRayResult::~BulletAllHitsRayResult(void);

785 13 is_polyhedral 0 4 1527 26 BulletShape::is_polyhedral 0 1 19 10
/**
 *
 */
51
inline bool BulletShape::is_polyhedral(void) const;

786 9 is_convex 0 4 1527 22 BulletShape::is_convex 0 1 20 10
/**
 *
 */
47
inline bool BulletShape::is_convex(void) const;

787 12 is_convex_2d 0 4 1527 25 BulletShape::is_convex_2d 0 1 21 10
/**
 *
 */
50
inline bool BulletShape::is_convex_2d(void) const;

788 10 is_concave 0 4 1527 23 BulletShape::is_concave 0 1 22 10
/**
 *
 */
48
inline bool BulletShape::is_concave(void) const;

789 11 is_infinite 0 4 1527 24 BulletShape::is_infinite 0 1 23 10
/**
 *
 */
49
inline bool BulletShape::is_infinite(void) const;

790 13 is_non_moving 0 4 1527 26 BulletShape::is_non_moving 0 1 24 10
/**
 *
 */
51
inline bool BulletShape::is_non_moving(void) const;

791 12 is_soft_body 0 4 1527 25 BulletShape::is_soft_body 0 1 25 10
/**
 *
 */
50
inline bool BulletShape::is_soft_body(void) const;

792 10 set_margin 0 4 1527 23 BulletShape::set_margin 0 1 26 10
/**
 *
 */
49
void BulletShape::set_margin(PN_stdfloat margin);

793 8 get_name 0 4 1527 21 BulletShape::get_name 0 1 27 10
/**
 *
 */
46
char const *BulletShape::get_name(void) const;

794 10 get_margin 0 4 1527 23 BulletShape::get_margin 0 1 28 10
/**
 *
 */
48
PN_stdfloat BulletShape::get_margin(void) const;

795 16 get_shape_bounds 0 4 1527 29 BulletShape::get_shape_bounds 0 1 29 62
/**
 * Returns the current bounds of this collision shape.
 */
57
BoundingSphere BulletShape::get_shape_bounds(void) const;

796 14 get_class_type 0 4 1527 27 BulletShape::get_class_type 0 1 30 0
52
static TypeHandle BulletShape::get_class_type(void);

797 14 get_class_type 0 4 1534 49 BulletBaseCharacterControllerNode::get_class_type 0 1 31 0
74
static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void);

798 34 ~BulletBaseCharacterControllerNode 0 4 1534 69 BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode 0 0 0
76
BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode(void);

799 9 add_shape 0 4 1535 25 BulletBodyNode::add_shape 0 1 32 21
// Shapes

/**
 *
 */
116
void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = ::TransformState::make_identity());

800 12 remove_shape 0 4 1535 28 BulletBodyNode::remove_shape 0 1 33 10
/**
 *
 */
54
void BulletBodyNode::remove_shape(BulletShape *shape);

801 14 get_num_shapes 0 4 1535 30 BulletBodyNode::get_num_shapes 0 1 34 10
/**
 *
 */
54
inline int BulletBodyNode::get_num_shapes(void) const;

802 9 get_shape 0 4 1535 25 BulletBodyNode::get_shape 0 1 35 10
/**
 *
 */
61
inline BulletShape *BulletBodyNode::get_shape(int idx) const;

803 13 get_shape_pos 0 4 1535 29 BulletBodyNode::get_shape_pos 0 1 36 10
/**
 *
 */
53
LPoint3 BulletBodyNode::get_shape_pos(int idx) const;

804 13 get_shape_mat 0 4 1535 29 BulletBodyNode::get_shape_mat 0 1 37 10
/**
 *
 */
54
LMatrix4 BulletBodyNode::get_shape_mat(int idx) const;

805 19 get_shape_transform 0 4 1535 35 BulletBodyNode::get_shape_transform 0 1 38 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const;

806 16 get_shape_bounds 0 4 1535 32 BulletBodyNode::get_shape_bounds 0 1 39 81
/**
 * Returns the current bounds of all collision shapes owned by this body.
 */
60
BoundingSphere BulletBodyNode::get_shape_bounds(void) const;

807 32 add_shapes_from_collision_solids 0 4 1535 48 BulletBodyNode::add_shapes_from_collision_solids 0 1 40 10
/**
 *
 */
76
void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode);

808 9 is_static 0 4 1535 25 BulletBodyNode::is_static 0 1 41 60
// Static and kinematic

// Static and kinematic

/**
 *
 */
50
inline bool BulletBodyNode::is_static(void) const;

809 12 is_kinematic 0 4 1535 28 BulletBodyNode::is_kinematic 0 1 42 10
/**
 *
 */
53
inline bool BulletBodyNode::is_kinematic(void) const;

810 10 set_static 0 4 1535 26 BulletBodyNode::set_static 0 1 43 10
/**
 *
 */
51
inline void BulletBodyNode::set_static(bool value);

811 13 set_kinematic 0 4 1535 29 BulletBodyNode::set_kinematic 0 1 44 10
/**
 *
 */
54
inline void BulletBodyNode::set_kinematic(bool value);

812 21 set_into_collide_mask 0 4 1535 37 BulletBodyNode::set_into_collide_mask 0 1 45 23
// Contacts

/**
 *
 */
68
inline void BulletBodyNode::set_into_collide_mask(CollideMask mask);

813 17 notify_collisions 0 4 1535 33 BulletBodyNode::notify_collisions 0 1 46 10
/**
 *
 */
58
inline void BulletBodyNode::notify_collisions(bool value);

814 19 notifies_collisions 0 4 1535 35 BulletBodyNode::notifies_collisions 0 1 47 10
/**
 *
 */
60
inline bool BulletBodyNode::notifies_collisions(void) const;

815 22 set_collision_response 0 4 1535 38 BulletBodyNode::set_collision_response 0 1 48 10
/**
 *
 */
63
inline void BulletBodyNode::set_collision_response(bool value);

816 22 get_collision_response 0 4 1535 38 BulletBodyNode::get_collision_response 0 1 49 10
/**
 *
 */
63
inline bool BulletBodyNode::get_collision_response(void) const;

817 20 check_collision_with 0 4 1535 36 BulletBodyNode::check_collision_with 0 1 50 10
/**
 *
 */
59
bool BulletBodyNode::check_collision_with(PandaNode *node);

818 20 has_contact_response 0 4 1535 36 BulletBodyNode::has_contact_response 0 1 51 10
/**
 *
 */
54
bool BulletBodyNode::has_contact_response(void) const;

819 32 get_contact_processing_threshold 0 4 1535 48 BulletBodyNode::get_contact_processing_threshold 0 1 52 10
/**
 *
 */
73
PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const;

820 32 set_contact_processing_threshold 0 4 1535 48 BulletBodyNode::set_contact_processing_threshold 0 1 53 106
/**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */
77
void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold);

821 9 is_active 0 4 1535 25 BulletBodyNode::is_active 0 1 54 44
// Deactivation

// Deactivation

/**
 *
 */
43
bool BulletBodyNode::is_active(void) const;

822 10 set_active 0 4 1535 26 BulletBodyNode::set_active 0 1 55 10
/**
 *
 */
65
void BulletBodyNode::set_active(bool active, bool force = false);

823 12 force_active 0 4 1535 28 BulletBodyNode::force_active 0 1 56 10
/**
 *
 */
47
void BulletBodyNode::force_active(bool active);

824 21 set_deactivation_time 0 4 1535 37 BulletBodyNode::set_deactivation_time 0 1 57 10
/**
 *
 */
59
void BulletBodyNode::set_deactivation_time(PN_stdfloat dt);

825 21 get_deactivation_time 0 4 1535 37 BulletBodyNode::get_deactivation_time 0 1 58 10
/**
 *
 */
62
PN_stdfloat BulletBodyNode::get_deactivation_time(void) const;

826 24 set_deactivation_enabled 0 4 1535 40 BulletBodyNode::set_deactivation_enabled 0 1 59 163
/**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */
60
void BulletBodyNode::set_deactivation_enabled(bool enabled);

827 23 is_deactivation_enabled 0 4 1535 39 BulletBodyNode::is_deactivation_enabled 0 1 60 10
/**
 *
 */
57
bool BulletBodyNode::is_deactivation_enabled(void) const;

828 17 set_debug_enabled 0 4 1535 33 BulletBodyNode::set_debug_enabled 0 1 61 180
// Debug Visualisation

// Debug Visualisation

/**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */
66
inline void BulletBodyNode::set_debug_enabled(bool const enabled);

829 16 is_debug_enabled 0 4 1535 32 BulletBodyNode::is_debug_enabled 0 1 62 141
/**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */
57
inline bool BulletBodyNode::is_debug_enabled(void) const;

830 15 get_restitution 0 4 1535 31 BulletBodyNode::get_restitution 0 1 63 68
// Friction and Restitution

// Friction and Restitution

/**
 *
 */
63
inline PN_stdfloat BulletBodyNode::get_restitution(void) const;

831 15 set_restitution 0 4 1535 31 BulletBodyNode::set_restitution 0 1 64 10
/**
 *
 */
69
inline void BulletBodyNode::set_restitution(PN_stdfloat restitution);

832 12 get_friction 0 4 1535 28 BulletBodyNode::get_friction 0 1 65 10
/**
 *
 */
60
inline PN_stdfloat BulletBodyNode::get_friction(void) const;

833 12 set_friction 0 4 1535 28 BulletBodyNode::set_friction 0 1 66 10
/**
 *
 */
63
inline void BulletBodyNode::set_friction(PN_stdfloat friction);

834 24 has_anisotropic_friction 0 4 1535 40 BulletBodyNode::has_anisotropic_friction 0 1 67 10
/**
 *
 */
65
inline bool BulletBodyNode::has_anisotropic_friction(void) const;

835 24 set_anisotropic_friction 0 4 1535 40 BulletBodyNode::set_anisotropic_friction 0 1 68 10
/**
 *
 */
73
void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction);

836 24 get_anisotropic_friction 0 4 1535 40 BulletBodyNode::get_anisotropic_friction 0 1 69 10
/**
 *
 */
63
LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const;

837 27 get_ccd_swept_sphere_radius 0 4 1535 43 BulletBodyNode::get_ccd_swept_sphere_radius 0 1 70 26
// CCD

// CCD

/**
 *
 */
68
PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const;

838 24 get_ccd_motion_threshold 0 4 1535 40 BulletBodyNode::get_ccd_motion_threshold 0 1 71 10
/**
 *
 */
65
PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const;

839 27 set_ccd_swept_sphere_radius 0 4 1535 43 BulletBodyNode::set_ccd_swept_sphere_radius 0 1 72 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius);

840 24 set_ccd_motion_threshold 0 4 1535 40 BulletBodyNode::set_ccd_motion_threshold 0 1 73 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold);

841 19 set_transform_dirty 0 4 1535 35 BulletBodyNode::set_transform_dirty 0 1 74 228
// Special

/**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */
47
void BulletBodyNode::set_transform_dirty(void);

842 14 get_class_type 0 4 1535 30 BulletBodyNode::get_class_type 0 1 75 0
55
static TypeHandle BulletBodyNode::get_class_type(void);

843 14 BulletBoxShape 0 4 1542 30 BulletBoxShape::BulletBoxShape 0 2 76 77 22
/**
 *
 */

/**
 *
 */
128
BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents);
inline BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy);

844 10 operator = 0 4 1542 26 BulletBoxShape::operator = 0 1 78 0
67
inline void BulletBoxShape::operator =(BulletBoxShape const &copy);

845 31 get_half_extents_without_margin 0 4 1542 47 BulletBoxShape::get_half_extents_without_margin 0 1 79 10
/**
 *
 */
70
LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const;

846 28 get_half_extents_with_margin 0 4 1542 44 BulletBoxShape::get_half_extents_with_margin 0 1 80 10
/**
 *
 */
67
LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const;

847 15 make_from_solid 0 4 1542 31 BulletBoxShape::make_from_solid 0 1 81 10
/**
 *
 */
82
static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid);

848 14 get_class_type 0 4 1542 30 BulletBoxShape::get_class_type 0 1 82 0
55
static TypeHandle BulletBoxShape::get_class_type(void);

849 18 BulletCapsuleShape 0 4 1543 38 BulletCapsuleShape::BulletCapsuleShape 0 2 83 84 22
/**
 *
 */

/**
 *
 */
184
BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy);

850 10 operator = 0 4 1543 30 BulletCapsuleShape::operator = 0 1 85 0
75
inline void BulletCapsuleShape::operator =(BulletCapsuleShape const &copy);

851 10 get_radius 0 4 1543 30 BulletCapsuleShape::get_radius 0 1 86 10
/**
 *
 */
62
inline PN_stdfloat BulletCapsuleShape::get_radius(void) const;

852 15 get_half_height 0 4 1543 35 BulletCapsuleShape::get_half_height 0 1 87 10
/**
 *
 */
67
inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const;

853 14 get_class_type 0 4 1543 34 BulletCapsuleShape::get_class_type 0 1 88 0
59
static TypeHandle BulletCapsuleShape::get_class_type(void);

854 29 BulletCharacterControllerNode 0 4 1544 60 BulletCharacterControllerNode::BulletCharacterControllerNode 0 1 89 10
/**
 *
 */
138
BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character");

855 19 set_linear_movement 0 4 1544 50 BulletCharacterControllerNode::set_linear_movement 0 1 90 10
/**
 *
 */
97
void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local);

856 20 set_angular_movement 0 4 1544 51 BulletCharacterControllerNode::set_angular_movement 0 1 91 10
/**
 *
 */
76
void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega);

857 9 get_shape 0 4 1544 40 BulletCharacterControllerNode::get_shape 0 1 92 10
/**
 *
 */
66
BulletShape *BulletCharacterControllerNode::get_shape(void) const;

858 11 set_gravity 0 4 1544 42 BulletCharacterControllerNode::set_gravity 0 1 93 10
/**
 *
 */
69
void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity);

859 11 get_gravity 0 4 1544 42 BulletCharacterControllerNode::get_gravity 0 1 94 10
/**
 *
 */
67
PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const;

860 14 set_fall_speed 0 4 1544 45 BulletCharacterControllerNode::set_fall_speed 0 1 95 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed);

861 14 set_jump_speed 0 4 1544 45 BulletCharacterControllerNode::set_jump_speed 0 1 96 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed);

862 19 set_max_jump_height 0 4 1544 50 BulletCharacterControllerNode::set_max_jump_height 0 1 97 10
/**
 *
 */
85
void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height);

863 13 set_max_slope 0 4 1544 44 BulletCharacterControllerNode::set_max_slope 0 1 98 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope);

864 13 get_max_slope 0 4 1544 44 BulletCharacterControllerNode::get_max_slope 0 1 99 10
/**
 *
 */
69
PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const;

865 24 set_use_ghost_sweep_test 0 4 1544 55 BulletCharacterControllerNode::set_use_ghost_sweep_test 0 1 100 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value);

866 12 is_on_ground 0 4 1544 43 BulletCharacterControllerNode::is_on_ground 0 1 101 10
/**
 *
 */
61
bool BulletCharacterControllerNode::is_on_ground(void) const;

867 8 can_jump 0 4 1544 39 BulletCharacterControllerNode::can_jump 0 1 102 10
/**
 *
 */
57
bool BulletCharacterControllerNode::can_jump(void) const;

868 7 do_jump 0 4 1544 38 BulletCharacterControllerNode::do_jump 0 1 103 10
/**
 *
 */
50
void BulletCharacterControllerNode::do_jump(void);

869 14 get_class_type 0 4 1544 45 BulletCharacterControllerNode::get_class_type 0 1 104 0
70
static TypeHandle BulletCharacterControllerNode::get_class_type(void);

870 34 upcast_to_ClosestRayResultCallback 0 12 1545 61 BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback 0 1 116 65
upcast from BulletClosestHitRayResult to ClosestRayResultCallback
112
btCollisionWorld::ClosestRayResultCallback *BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback(void);

871 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 8 0 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 1 117 67
downcast from ClosestRayResultCallback to BulletClosestHitRayResult
140
BulletClosestHitRayResult *downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult(btCollisionWorld::ClosestRayResultCallback *this);

872 5 empty 0 4 1545 32 BulletClosestHitRayResult::empty 0 1 106 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void);

873 12 get_from_pos 0 4 1545 39 BulletClosestHitRayResult::get_from_pos 0 1 107 10
/**
 *
 */
60
LPoint3 BulletClosestHitRayResult::get_from_pos(void) const;

874 10 get_to_pos 0 4 1545 37 BulletClosestHitRayResult::get_to_pos 0 1 108 10
/**
 *
 */
58
LPoint3 BulletClosestHitRayResult::get_to_pos(void) const;

875 7 has_hit 0 4 1545 34 BulletClosestHitRayResult::has_hit 0 1 109 10
/**
 *
 */
52
bool BulletClosestHitRayResult::has_hit(void) const;

876 8 get_node 0 4 1545 35 BulletClosestHitRayResult::get_node 0 1 110 10
/**
 *
 */
59
PandaNode *BulletClosestHitRayResult::get_node(void) const;

877 11 get_hit_pos 0 4 1545 38 BulletClosestHitRayResult::get_hit_pos 0 1 111 10
/**
 *
 */
59
LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const;

878 14 get_hit_normal 0 4 1545 41 BulletClosestHitRayResult::get_hit_normal 0 1 112 10
/**
 *
 */
63
LVector3 BulletClosestHitRayResult::get_hit_normal(void) const;

879 16 get_hit_fraction 0 4 1545 43 BulletClosestHitRayResult::get_hit_fraction 0 1 113 10
/**
 *
 */
68
PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const;

880 14 get_shape_part 0 4 1545 41 BulletClosestHitRayResult::get_shape_part 0 1 114 10
/**
 *
 */
58
int BulletClosestHitRayResult::get_shape_part(void) const;

881 18 get_triangle_index 0 4 1545 45 BulletClosestHitRayResult::get_triangle_index 0 1 115 10
/**
 *
 */
62
int BulletClosestHitRayResult::get_triangle_index(void) const;

882 25 BulletClosestHitRayResult 0 4 1545 52 BulletClosestHitRayResult::BulletClosestHitRayResult 0 1 105 10
/**
 *
 */
105
inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default;

883 26 ~BulletClosestHitRayResult 0 4 1545 53 BulletClosestHitRayResult::~BulletClosestHitRayResult 0 0 0
60
BulletClosestHitRayResult::~BulletClosestHitRayResult(void);

884 37 upcast_to_ClosestConvexResultCallback 0 12 1547 66 BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback 0 1 127 70
upcast from BulletClosestHitSweepResult to ClosestConvexResultCallback
120
btCollisionWorld::ClosestConvexResultCallback *BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback(void);

885 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 8 0 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 1 128 72
downcast from ClosestConvexResultCallback to BulletClosestHitSweepResult
150
BulletClosestHitSweepResult *downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult(btCollisionWorld::ClosestConvexResultCallback *this);

886 5 empty 0 4 1547 34 BulletClosestHitSweepResult::empty 0 1 119 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
83
static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void);

887 12 get_from_pos 0 4 1547 41 BulletClosestHitSweepResult::get_from_pos 0 1 120 10
/**
 *
 */
62
LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const;

888 10 get_to_pos 0 4 1547 39 BulletClosestHitSweepResult::get_to_pos 0 1 121 10
/**
 *
 */
60
LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const;

889 7 has_hit 0 4 1547 36 BulletClosestHitSweepResult::has_hit 0 1 122 10
/**
 *
 */
54
bool BulletClosestHitSweepResult::has_hit(void) const;

890 8 get_node 0 4 1547 37 BulletClosestHitSweepResult::get_node 0 1 123 10
/**
 *
 */
61
PandaNode *BulletClosestHitSweepResult::get_node(void) const;

891 11 get_hit_pos 0 4 1547 40 BulletClosestHitSweepResult::get_hit_pos 0 1 124 10
/**
 *
 */
61
LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const;

892 14 get_hit_normal 0 4 1547 43 BulletClosestHitSweepResult::get_hit_normal 0 1 125 10
/**
 *
 */
65
LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const;

893 16 get_hit_fraction 0 4 1547 45 BulletClosestHitSweepResult::get_hit_fraction 0 1 126 10
/**
 *
 */
70
PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const;

894 27 BulletClosestHitSweepResult 0 4 1547 56 BulletClosestHitSweepResult::BulletClosestHitSweepResult 0 1 118 10
/**
 *
 */
111
inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default;

895 28 ~BulletClosestHitSweepResult 0 4 1547 57 BulletClosestHitSweepResult::~BulletClosestHitSweepResult 0 0 0
64
BulletClosestHitSweepResult::~BulletClosestHitSweepResult(void);

896 15 BulletConeShape 0 4 1549 32 BulletConeShape::BulletConeShape 0 2 129 130 22
/**
 *
 */

/**
 *
 */
169
BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletConeShape::BulletConeShape(BulletConeShape const &copy);

897 10 operator = 0 4 1549 27 BulletConeShape::operator = 0 1 131 0
69
inline void BulletConeShape::operator =(BulletConeShape const &copy);

898 10 get_radius 0 4 1549 27 BulletConeShape::get_radius 0 1 132 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_radius(void) const;

899 10 get_height 0 4 1549 27 BulletConeShape::get_height 0 1 133 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_height(void) const;

900 14 get_class_type 0 4 1549 31 BulletConeShape::get_class_type 0 1 134 0
56
static TypeHandle BulletConeShape::get_class_type(void);

901 16 get_rigid_body_a 0 4 1550 34 BulletConstraint::get_rigid_body_a 0 1 135 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void);

902 16 get_rigid_body_b 0 4 1550 34 BulletConstraint::get_rigid_body_b 0 1 136 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void);

903 15 enable_feedback 0 4 1550 33 BulletConstraint::enable_feedback 0 1 137 10
/**
 *
 */
51
void BulletConstraint::enable_feedback(bool value);

904 19 set_debug_draw_size 0 4 1550 37 BulletConstraint::set_debug_draw_size 0 1 138 10
/**
 *
 */
61
void BulletConstraint::set_debug_draw_size(PN_stdfloat size);

905 19 get_debug_draw_size 0 4 1550 37 BulletConstraint::get_debug_draw_size 0 1 139 10
/**
 *
 */
56
PN_stdfloat BulletConstraint::get_debug_draw_size(void);

906 19 get_applied_impulse 0 4 1550 37 BulletConstraint::get_applied_impulse 0 1 140 10
/**
 *
 */
62
PN_stdfloat BulletConstraint::get_applied_impulse(void) const;

907 22 set_breaking_threshold 0 4 1550 40 BulletConstraint::set_breaking_threshold 0 1 141 212
/**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */
76
inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold);

908 22 get_breaking_threshold 0 4 1550 40 BulletConstraint::get_breaking_threshold 0 1 142 73
/**
 * Returns the applied impluse limit for breaking the constraint.
 */
72
inline PN_stdfloat BulletConstraint::get_breaking_threshold(void) const;

909 11 set_enabled 0 4 1550 29 BulletConstraint::set_enabled 0 1 143 10
/**
 *
 */
56
inline void BulletConstraint::set_enabled(bool enabled);

910 10 is_enabled 0 4 1550 28 BulletConstraint::is_enabled 0 1 144 53
/**
 * Returns TRUE if the constraint is enabled.
 */
53
inline bool BulletConstraint::is_enabled(void) const;

911 9 set_param 0 4 1550 27 BulletConstraint::set_param 0 1 145 10
/**
 *
 */
106
void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1);

912 9 get_param 0 4 1550 27 BulletConstraint::get_param 0 1 146 10
/**
 *
 */
94
PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1);

913 19 BulletRigidBodyNode 0 4 1554 40 BulletRigidBodyNode::BulletRigidBodyNode 0 1 148 138
/**
 *
 */

/**
 * Do not call the copy constructor directly; instead, use make_copy() or
 * copy_subgraph() to make a copy of a node.
 */
78
explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid");

914 8 set_mass 0 4 1554 29 BulletRigidBodyNode::set_mass 0 1 149 295
// Mass & inertia

// Mass & inertia

/**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */
53
void BulletRigidBodyNode::set_mass(PN_stdfloat mass);

915 8 get_mass 0 4 1554 29 BulletRigidBodyNode::get_mass 0 1 150 128
/**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */
54
PN_stdfloat BulletRigidBodyNode::get_mass(void) const;

916 12 get_inv_mass 0 4 1554 33 BulletRigidBodyNode::get_inv_mass 0 1 151 52
/**
 * Returns the inverse mass of a rigid body.
 */
58
PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const;

917 11 set_inertia 0 4 1554 32 BulletRigidBodyNode::set_inertia 0 1 152 591
/**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */
64
void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia);

918 11 get_inertia 0 4 1554 32 BulletRigidBodyNode::get_inertia 0 1 153 174
/**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */
54
LVector3 BulletRigidBodyNode::get_inertia(void) const;

919 26 get_inv_inertia_diag_local 0 4 1554 47 BulletRigidBodyNode::get_inv_inertia_diag_local 0 1 154 10
/**
 *
 */
69
LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const;

920 28 get_inv_inertia_tensor_world 0 4 1554 49 BulletRigidBodyNode::get_inv_inertia_tensor_world 0 1 155 10
/**
 *
 */
71
LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const;

921 19 get_linear_velocity 0 4 1554 40 BulletRigidBodyNode::get_linear_velocity 0 1 156 36
// Velocity

// Velocity

/**
 *
 */
62
LVector3 BulletRigidBodyNode::get_linear_velocity(void) const;

922 20 get_angular_velocity 0 4 1554 41 BulletRigidBodyNode::get_angular_velocity 0 1 157 10
/**
 *
 */
63
LVector3 BulletRigidBodyNode::get_angular_velocity(void) const;

923 19 set_linear_velocity 0 4 1554 40 BulletRigidBodyNode::set_linear_velocity 0 1 158 10
/**
 *
 */
72
void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity);

924 20 set_angular_velocity 0 4 1554 41 BulletRigidBodyNode::set_angular_velocity 0 1 159 10
/**
 *
 */
73
void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity);

925 18 get_linear_damping 0 4 1554 39 BulletRigidBodyNode::get_linear_damping 0 1 160 34
// Damping

// Damping

/**
 *
 */
71
inline PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const;

926 19 get_angular_damping 0 4 1554 40 BulletRigidBodyNode::get_angular_damping 0 1 161 10
/**
 *
 */
72
inline PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const;

927 18 set_linear_damping 0 4 1554 39 BulletRigidBodyNode::set_linear_damping 0 1 162 10
/**
 *
 */
71
inline void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value);

928 19 set_angular_damping 0 4 1554 40 BulletRigidBodyNode::set_angular_damping 0 1 163 10
/**
 *
 */
72
inline void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value);

929 12 clear_forces 0 4 1554 33 BulletRigidBodyNode::clear_forces 0 1 164 21
// Forces

/**
 *
 */
45
void BulletRigidBodyNode::clear_forces(void);

930 11 apply_force 0 4 1554 32 BulletRigidBodyNode::apply_force 0 1 165 10
/**
 *
 */
81
void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos);

931 19 apply_central_force 0 4 1554 40 BulletRigidBodyNode::apply_central_force 0 1 166 10
/**
 *
 */
69
void BulletRigidBodyNode::apply_central_force(LVector3 const &force);

932 13 apply_impulse 0 4 1554 34 BulletRigidBodyNode::apply_impulse 0 1 167 10
/**
 *
 */
85
void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos);

933 21 apply_central_impulse 0 4 1554 42 BulletRigidBodyNode::apply_central_impulse 0 1 168 10
/**
 *
 */
73
void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse);

934 12 apply_torque 0 4 1554 33 BulletRigidBodyNode::apply_torque 0 1 169 10
/**
 *
 */
63
void BulletRigidBodyNode::apply_torque(LVector3 const &torque);

935 20 apply_torque_impulse 0 4 1554 41 BulletRigidBodyNode::apply_torque_impulse 0 1 170 10
/**
 *
 */
71
void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque);

936 15 get_total_force 0 4 1554 36 BulletRigidBodyNode::get_total_force 0 1 171 10
/**
 *
 */
58
LVector3 BulletRigidBodyNode::get_total_force(void) const;

937 16 get_total_torque 0 4 1554 37 BulletRigidBodyNode::get_total_torque 0 1 172 10
/**
 *
 */
59
LVector3 BulletRigidBodyNode::get_total_torque(void) const;

938 26 get_linear_sleep_threshold 0 4 1554 47 BulletRigidBodyNode::get_linear_sleep_threshold 0 1 173 66
// Deactivation thresholds

// Deactivation thresholds

/**
 *
 */
72
PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const;

939 27 get_angular_sleep_threshold 0 4 1554 48 BulletRigidBodyNode::get_angular_sleep_threshold 0 1 174 10
/**
 *
 */
73
PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const;

940 26 set_linear_sleep_threshold 0 4 1554 47 BulletRigidBodyNode::set_linear_sleep_threshold 0 1 175 10
/**
 *
 */
76
void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold);

941 27 set_angular_sleep_threshold 0 4 1554 48 BulletRigidBodyNode::set_angular_sleep_threshold 0 1 176 10
/**
 *
 */
77
void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold);

942 11 set_gravity 0 4 1554 32 BulletRigidBodyNode::set_gravity 0 1 177 34
// Gravity

// Gravity

/**
 *
 */
63
void BulletRigidBodyNode::set_gravity(LVector3 const &gravity);

943 11 get_gravity 0 4 1554 32 BulletRigidBodyNode::get_gravity 0 1 178 10
/**
 *
 */
54
LVector3 BulletRigidBodyNode::get_gravity(void) const;

944 17 get_linear_factor 0 4 1554 38 BulletRigidBodyNode::get_linear_factor 0 1 179 54
// Restrict movement

// Restrict movement

/**
 *
 */
60
LVector3 BulletRigidBodyNode::get_linear_factor(void) const;

945 18 get_angular_factor 0 4 1554 39 BulletRigidBodyNode::get_angular_factor 0 1 180 10
/**
 *
 */
61
LVector3 BulletRigidBodyNode::get_angular_factor(void) const;

946 17 set_linear_factor 0 4 1554 38 BulletRigidBodyNode::set_linear_factor 0 1 181 10
/**
 *
 */
68
void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor);

947 18 set_angular_factor 0 4 1554 39 BulletRigidBodyNode::set_angular_factor 0 1 182 10
/**
 *
 */
69
void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor);

948 15 pick_dirty_flag 0 4 1554 36 BulletRigidBodyNode::pick_dirty_flag 0 1 183 135
// Special

/**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */
48
bool BulletRigidBodyNode::pick_dirty_flag(void);

949 14 get_class_type 0 4 1554 35 BulletRigidBodyNode::get_class_type 0 1 184 0
60
static TypeHandle BulletRigidBodyNode::get_class_type(void);

950 14 get_class_type 0 4 1550 32 BulletConstraint::get_class_type 0 1 147 0
57
static TypeHandle BulletConstraint::get_class_type(void);

951 25 BulletConeTwistConstraint 0 4 1557 52 BulletConeTwistConstraint::BulletConeTwistConstraint 0 2 185 186 22
/**
 *
 */

/**
 *
 */
305
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a);
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b);

952 9 set_limit 0 4 1557 36 BulletConeTwistConstraint::set_limit 0 2 187 188 22
/**
 *
 */

/**
 *
 */
272
void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value);
void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

953 11 set_damping 0 4 1557 38 BulletConeTwistConstraint::set_damping 0 1 189 10
/**
 *
 */
65
void BulletConeTwistConstraint::set_damping(PN_stdfloat damping);

954 17 get_fix_threshold 0 4 1557 44 BulletConeTwistConstraint::get_fix_threshold 0 1 190 10
/**
 *
 */
69
PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const;

955 17 set_fix_threshold 0 4 1557 44 BulletConeTwistConstraint::set_fix_threshold 0 1 191 10
/**
 *
 */
73
void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold);

956 12 enable_motor 0 4 1557 39 BulletConeTwistConstraint::enable_motor 0 1 192 10
/**
 *
 */
58
void BulletConeTwistConstraint::enable_motor(bool enable);

957 21 set_max_motor_impulse 0 4 1557 48 BulletConeTwistConstraint::set_max_motor_impulse 0 1 193 10
/**
 *
 */
79
void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

958 32 set_max_motor_impulse_normalized 0 4 1557 59 BulletConeTwistConstraint::set_max_motor_impulse_normalized 0 1 194 10
/**
 *
 */
90
void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse);

959 16 set_motor_target 0 4 1557 43 BulletConeTwistConstraint::set_motor_target 0 1 195 10
/**
 *
 */
74
void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat);

960 36 set_motor_target_in_constraint_space 0 4 1557 63 BulletConeTwistConstraint::set_motor_target_in_constraint_space 0 1 196 10
/**
 *
 */
94
void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat);

961 10 set_frames 0 4 1557 37 BulletConeTwistConstraint::set_frames 0 1 197 10
/**
 *
 */
99
void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

962 11 get_frame_a 0 4 1557 38 BulletConeTwistConstraint::get_frame_a 0 1 198 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const;

963 11 get_frame_b 0 4 1557 38 BulletConeTwistConstraint::get_frame_b 0 1 199 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const;

964 14 get_class_type 0 4 1557 41 BulletConeTwistConstraint::get_class_type 0 1 200 0
66
static TypeHandle BulletConeTwistConstraint::get_class_type(void);

965 20 ~BulletManifoldPoint 0 4 1558 41 BulletManifoldPoint::~BulletManifoldPoint 0 0 10
/**
 *
 */
55
inline BulletManifoldPoint::~BulletManifoldPoint(void);

966 13 get_life_time 0 4 1558 34 BulletManifoldPoint::get_life_time 0 1 201 10
/**
 *
 */
51
int BulletManifoldPoint::get_life_time(void) const;

967 12 get_distance 0 4 1558 33 BulletManifoldPoint::get_distance 0 1 202 10
/**
 *
 */
58
PN_stdfloat BulletManifoldPoint::get_distance(void) const;

968 19 get_applied_impulse 0 4 1558 40 BulletManifoldPoint::get_applied_impulse 0 1 203 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const;

969 23 get_position_world_on_a 0 4 1558 44 BulletManifoldPoint::get_position_world_on_a 0 1 204 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const;

970 23 get_position_world_on_b 0 4 1558 44 BulletManifoldPoint::get_position_world_on_b 0 1 205 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const;

971 21 get_normal_world_on_b 0 4 1558 42 BulletManifoldPoint::get_normal_world_on_b 0 1 206 10
/**
 *
 */
64
LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const;

972 17 get_local_point_a 0 4 1558 38 BulletManifoldPoint::get_local_point_a 0 1 207 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_a(void) const;

973 17 get_local_point_b 0 4 1558 38 BulletManifoldPoint::get_local_point_b 0 1 208 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_b(void) const;

974 12 get_part_id0 0 4 1558 33 BulletManifoldPoint::get_part_id0 0 1 209 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id0(void) const;

975 12 get_part_id1 0 4 1558 33 BulletManifoldPoint::get_part_id1 0 1 210 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id1(void) const;

976 10 get_index0 0 4 1558 31 BulletManifoldPoint::get_index0 0 1 211 10
/**
 *
 */
48
int BulletManifoldPoint::get_index0(void) const;

977 10 get_index1 0 4 1558 31 BulletManifoldPoint::get_index1 0 1 212 10
/**
 *
 */
48
int BulletManifoldPoint::get_index1(void) const;

978 32 set_lateral_friction_initialized 0 4 1558 53 BulletManifoldPoint::set_lateral_friction_initialized 0 1 213 10
/**
 *
 */
78
inline void BulletManifoldPoint::set_lateral_friction_initialized(bool value);

979 25 set_lateral_friction_dir1 0 4 1558 46 BulletManifoldPoint::set_lateral_friction_dir1 0 1 214 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir);

980 25 set_lateral_friction_dir2 0 4 1558 46 BulletManifoldPoint::set_lateral_friction_dir2 0 1 215 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir);

981 19 set_contact_motion1 0 4 1558 40 BulletManifoldPoint::set_contact_motion1 0 1 216 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value);

982 19 set_contact_motion2 0 4 1558 40 BulletManifoldPoint::set_contact_motion2 0 1 217 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value);

983 21 set_combined_friction 0 4 1558 42 BulletManifoldPoint::set_combined_friction 0 1 218 10
/**
 *
 */
74
inline void BulletManifoldPoint::set_combined_friction(PN_stdfloat value);

984 24 set_combined_restitution 0 4 1558 45 BulletManifoldPoint::set_combined_restitution 0 1 219 10
/**
 *
 */
77
inline void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value);

985 19 set_applied_impulse 0 4 1558 40 BulletManifoldPoint::set_applied_impulse 0 1 220 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value);

986 28 set_applied_impulse_lateral1 0 4 1558 49 BulletManifoldPoint::set_applied_impulse_lateral1 0 1 221 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value);

987 28 set_applied_impulse_lateral2 0 4 1558 49 BulletManifoldPoint::set_applied_impulse_lateral2 0 1 222 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value);

988 16 set_contact_cfm1 0 4 1558 37 BulletManifoldPoint::set_contact_cfm1 0 1 223 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value);

989 16 set_contact_cfm2 0 4 1558 37 BulletManifoldPoint::set_contact_cfm2 0 1 224 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value);

990 32 get_lateral_friction_initialized 0 4 1558 53 BulletManifoldPoint::get_lateral_friction_initialized 0 1 225 10
/**
 *
 */
78
inline bool BulletManifoldPoint::get_lateral_friction_initialized(void) const;

991 25 get_lateral_friction_dir1 0 4 1558 46 BulletManifoldPoint::get_lateral_friction_dir1 0 1 226 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const;

992 25 get_lateral_friction_dir2 0 4 1558 46 BulletManifoldPoint::get_lateral_friction_dir2 0 1 227 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const;

993 19 get_contact_motion1 0 4 1558 40 BulletManifoldPoint::get_contact_motion1 0 1 228 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const;

994 19 get_contact_motion2 0 4 1558 40 BulletManifoldPoint::get_contact_motion2 0 1 229 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const;

995 21 get_combined_friction 0 4 1558 42 BulletManifoldPoint::get_combined_friction 0 1 230 10
/**
 *
 */
74
inline PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const;

996 24 get_combined_restitution 0 4 1558 45 BulletManifoldPoint::get_combined_restitution 0 1 231 10
/**
 *
 */
77
inline PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const;

997 28 get_applied_impulse_lateral1 0 4 1558 49 BulletManifoldPoint::get_applied_impulse_lateral1 0 1 232 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const;

998 28 get_applied_impulse_lateral2 0 4 1558 49 BulletManifoldPoint::get_applied_impulse_lateral2 0 1 233 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const;

999 16 get_contact_cfm1 0 4 1558 37 BulletManifoldPoint::get_contact_cfm1 0 1 234 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const;

1000 16 get_contact_cfm2 0 4 1558 37 BulletManifoldPoint::get_contact_cfm2 0 1 235 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const;

1001 25 BulletContactCallbackData 0 4 1559 52 BulletContactCallbackData::BulletContactCallbackData 0 1 236 10
/**
 *
 */
163
inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1);

1002 12 get_manifold 0 4 1559 39 BulletContactCallbackData::get_manifold 0 1 237 10
/**
 *
 */
80
inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const;

1003 9 get_node0 0 4 1559 36 BulletContactCallbackData::get_node0 0 1 238 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node0(void) const;

1004 9 get_node1 0 4 1559 36 BulletContactCallbackData::get_node1 0 1 239 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node1(void) const;

1005 12 get_part_id0 0 4 1559 39 BulletContactCallbackData::get_part_id0 0 1 240 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id0(void) const;

1006 12 get_part_id1 0 4 1559 39 BulletContactCallbackData::get_part_id1 0 1 241 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id1(void) const;

1007 10 get_index0 0 4 1559 37 BulletContactCallbackData::get_index0 0 1 242 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index0(void) const;

1008 10 get_index1 0 4 1559 37 BulletContactCallbackData::get_index1 0 1 243 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index1(void) const;

1009 14 get_class_type 0 4 1559 41 BulletContactCallbackData::get_class_type 0 1 244 0
66
static TypeHandle BulletContactCallbackData::get_class_type(void);

1010 18 get_manifold_point 0 4 1561 33 BulletContact::get_manifold_point 0 1 245 10
/**
 *
 */
68
inline BulletManifoldPoint &BulletContact::get_manifold_point(void);

1011 9 get_node0 0 4 1561 24 BulletContact::get_node0 0 1 246 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node0(void) const;

1012 9 get_node1 0 4 1561 24 BulletContact::get_node1 0 1 247 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node1(void) const;

1013 8 get_idx0 0 4 1561 23 BulletContact::get_idx0 0 1 248 10
/**
 *
 */
47
inline int BulletContact::get_idx0(void) const;

1014 8 get_idx1 0 4 1561 23 BulletContact::get_idx1 0 1 249 10
/**
 *
 */
47
inline int BulletContact::get_idx1(void) const;

1015 12 get_part_id0 0 4 1561 27 BulletContact::get_part_id0 0 1 250 10
/**
 *
 */
51
inline int BulletContact::get_part_id0(void) const;

1016 12 get_part_id1 0 4 1561 27 BulletContact::get_part_id1 0 1 251 10
/**
 *
 */
51
inline int BulletContact::get_part_id1(void) const;

1017 14 ~BulletContact 0 4 1561 29 BulletContact::~BulletContact 0 0 0
36
BulletContact::~BulletContact(void);

1018 31 upcast_to_ContactResultCallback 0 12 1562 52 BulletContactResult::upcast_to_ContactResultCallback 0 1 254 56
upcast from BulletContactResult to ContactResultCallback
100
btCollisionWorld::ContactResultCallback *BulletContactResult::upcast_to_ContactResultCallback(void);

1019 53 downcast_ContactResultCallback_to_BulletContactResult 0 8 0 53 downcast_ContactResultCallback_to_BulletContactResult 0 1 255 58
downcast from ContactResultCallback to BulletContactResult
122
BulletContactResult *downcast_ContactResultCallback_to_BulletContactResult(btCollisionWorld::ContactResultCallback *this);

1020 16 get_num_contacts 0 4 1562 37 BulletContactResult::get_num_contacts 0 1 252 10
/**
 *
 */
61
inline int BulletContactResult::get_num_contacts(void) const;

1021 11 get_contact 0 4 1562 32 BulletContactResult::get_contact 0 1 253 10
/**
 *
 */
63
inline BulletContact BulletContactResult::get_contact(int idx);

1022 20 ~BulletContactResult 0 4 1562 41 BulletContactResult::~BulletContactResult 0 0 0
48
BulletContactResult::~BulletContactResult(void);

1023 15 BulletDebugNode 0 4 1564 32 BulletDebugNode::BulletDebugNode 0 2 256 257 10
/**
 *
 */
137
BulletDebugNode::BulletDebugNode(char const *name = "debug");
inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default;

1024 17 draw_mask_changed 0 6 1564 34 BulletDebugNode::draw_mask_changed 0 1 258 10
/**
 *
 */
54
virtual void BulletDebugNode::draw_mask_changed(void);

1025 14 show_wireframe 0 4 1564 31 BulletDebugNode::show_wireframe 0 1 259 10
/**
 *
 */
55
inline void BulletDebugNode::show_wireframe(bool show);

1026 16 show_constraints 0 4 1564 33 BulletDebugNode::show_constraints 0 1 260 10
/**
 *
 */
57
inline void BulletDebugNode::show_constraints(bool show);

1027 19 show_bounding_boxes 0 4 1564 36 BulletDebugNode::show_bounding_boxes 0 1 261 10
/**
 *
 */
60
inline void BulletDebugNode::show_bounding_boxes(bool show);

1028 12 show_normals 0 4 1564 29 BulletDebugNode::show_normals 0 1 262 10
/**
 *
 */
53
inline void BulletDebugNode::show_normals(bool show);

1029 18 get_show_wireframe 0 4 1564 35 BulletDebugNode::get_show_wireframe 0 1 263 10
/**
 *
 */
60
inline bool BulletDebugNode::get_show_wireframe(void) const;

1030 20 get_show_constraints 0 4 1564 37 BulletDebugNode::get_show_constraints 0 1 264 10
/**
 *
 */
62
inline bool BulletDebugNode::get_show_constraints(void) const;

1031 23 get_show_bounding_boxes 0 4 1564 40 BulletDebugNode::get_show_bounding_boxes 0 1 265 10
/**
 *
 */
65
inline bool BulletDebugNode::get_show_bounding_boxes(void) const;

1032 16 get_show_normals 0 4 1564 33 BulletDebugNode::get_show_normals 0 1 266 10
/**
 *
 */
58
inline bool BulletDebugNode::get_show_normals(void) const;

1033 14 get_class_type 0 4 1564 31 BulletDebugNode::get_class_type 0 1 267 0
56
static TypeHandle BulletDebugNode::get_class_type(void);

1034 15 BulletGhostNode 0 4 1566 32 BulletGhostNode::BulletGhostNode 0 1 268 10
/**
 *
 */
61
BulletGhostNode::BulletGhostNode(char const *name = "ghost");

1035 25 get_num_overlapping_nodes 0 4 1566 42 BulletGhostNode::get_num_overlapping_nodes 0 1 269 58
// Overlapping

// Overlapping

// Overlapping

/**
 *
 */
66
inline int BulletGhostNode::get_num_overlapping_nodes(void) const;

1036 20 get_overlapping_node 0 4 1566 37 BulletGhostNode::get_overlapping_node 0 1 270 10
/**
 *
 */
71
inline PandaNode *BulletGhostNode::get_overlapping_node(int idx) const;

1037 14 get_class_type 0 4 1566 31 BulletGhostNode::get_class_type 0 1 271 0
56
static TypeHandle BulletGhostNode::get_class_type(void);

1038 26 ~BulletSoftBodyNodeElement 0 4 1567 53 BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement 0 0 10
/**
 *
 */
67
inline BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement(void);

1039 5 empty 0 4 1567 32 BulletSoftBodyNodeElement::empty 0 1 273 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void);

1040 7 get_pos 0 4 1567 34 BulletSoftBodyNodeElement::get_pos 0 1 274 10
/**
 *
 */
62
inline LPoint3 BulletSoftBodyNodeElement::get_pos(void) const;

1041 12 get_velocity 0 4 1567 39 BulletSoftBodyNodeElement::get_velocity 0 1 275 10
/**
 *
 */
68
inline LVector3 BulletSoftBodyNodeElement::get_velocity(void) const;

1042 10 get_normal 0 4 1567 37 BulletSoftBodyNodeElement::get_normal 0 1 276 10
/**
 *
 */
66
inline LVector3 BulletSoftBodyNodeElement::get_normal(void) const;

1043 12 get_inv_mass 0 4 1567 39 BulletSoftBodyNodeElement::get_inv_mass 0 1 277 10
/**
 *
 */
71
inline PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const;

1044 8 get_area 0 4 1567 35 BulletSoftBodyNodeElement::get_area 0 1 278 10
/**
 *
 */
67
inline PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const;

1045 11 is_attached 0 4 1567 38 BulletSoftBodyNodeElement::is_attached 0 1 279 10
/**
 *
 */
62
inline int BulletSoftBodyNodeElement::is_attached(void) const;

1046 25 BulletSoftBodyNodeElement 0 4 1567 52 BulletSoftBodyNodeElement::BulletSoftBodyNodeElement 0 1 272 10
/**
 *
 */
105
inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default;

1047 7 get_cfg 0 4 1568 27 BulletSoftBodyNode::get_cfg 0 1 280 10
/**
 *
 */
55
BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void);

1048 14 get_world_info 0 4 1568 34 BulletSoftBodyNode::get_world_info 0 1 281 10
/**
 *
 */
65
BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void);

1049 28 generate_bending_constraints 0 4 1568 48 BulletSoftBodyNode::generate_bending_constraints 0 1 282 10
/**
 *
 */
109
void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = NULL);

1050 21 randomize_constraints 0 4 1568 41 BulletSoftBodyNode::randomize_constraints 0 1 283 10
/**
 *
 */
53
void BulletSoftBodyNode::randomize_constraints(void);

1051 15 set_volume_mass 0 4 1568 35 BulletSoftBodyNode::set_volume_mass 0 1 284 36
// Mass, volume, density

/**
 *
 */
59
void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass);

1052 18 set_volume_density 0 4 1568 38 BulletSoftBodyNode::set_volume_density 0 1 285 10
/**
 *
 */
65
void BulletSoftBodyNode::set_volume_density(PN_stdfloat density);

1053 14 set_total_mass 0 4 1568 34 BulletSoftBodyNode::set_total_mass 0 1 286 10
/**
 *
 */
82
void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false);

1054 17 set_total_density 0 4 1568 37 BulletSoftBodyNode::set_total_density 0 1 287 10
/**
 *
 */
64
void BulletSoftBodyNode::set_total_density(PN_stdfloat density);

1055 8 set_mass 0 4 1568 28 BulletSoftBodyNode::set_mass 0 1 288 10
/**
 *
 */
62
void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass);

1056 8 get_mass 0 4 1568 28 BulletSoftBodyNode::get_mass 0 1 289 10
/**
 *
 */
57
PN_stdfloat BulletSoftBodyNode::get_mass(int node) const;

1057 14 get_total_mass 0 4 1568 34 BulletSoftBodyNode::get_total_mass 0 1 290 10
/**
 *
 */
59
PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const;

1058 10 get_volume 0 4 1568 30 BulletSoftBodyNode::get_volume 0 1 291 10
/**
 *
 */
55
PN_stdfloat BulletSoftBodyNode::get_volume(void) const;

1059 9 add_force 0 4 1568 29 BulletSoftBodyNode::add_force 0 2 292 293 32
// Force

/**
 *
 */

/**
 *
 */
127
void BulletSoftBodyNode::add_force(LVector3 const &force);
void BulletSoftBodyNode::add_force(LVector3 const &force, int node);

1060 12 set_velocity 0 4 1568 32 BulletSoftBodyNode::set_velocity 0 1 294 10
/**
 *
 */
64
void BulletSoftBodyNode::set_velocity(LVector3 const &velocity);

1061 12 add_velocity 0 4 1568 32 BulletSoftBodyNode::add_velocity 0 2 295 296 22
/**
 *
 */

/**
 *
 */
139
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity);
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node);

1062 17 set_wind_velocity 0 4 1568 37 BulletSoftBodyNode::set_wind_velocity 0 1 297 10
/**
 *
 */
69
void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity);

1063 17 get_wind_velocity 0 4 1568 37 BulletSoftBodyNode::get_wind_velocity 0 1 298 10
/**
 *
 */
59
LVector3 BulletSoftBodyNode::get_wind_velocity(void) const;

1064 8 set_pose 0 4 1568 28 BulletSoftBodyNode::set_pose 0 1 299 10
/**
 *
 */
61
void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe);

1065 8 get_aabb 0 4 1568 28 BulletSoftBodyNode::get_aabb 0 1 300 10
/**
 *
 */
53
BoundingBox BulletSoftBodyNode::get_aabb(void) const;

1066 17 generate_clusters 0 4 1568 37 BulletSoftBodyNode::generate_clusters 0 1 301 22
// Cluster

/**
 *
 */
76
void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192);

1067 15 release_cluster 0 4 1568 35 BulletSoftBodyNode::release_cluster 0 1 302 10
/**
 *
 */
52
void BulletSoftBodyNode::release_cluster(int index);

1068 16 release_clusters 0 4 1568 36 BulletSoftBodyNode::release_clusters 0 1 303 10
/**
 *
 */
48
void BulletSoftBodyNode::release_clusters(void);

1069 16 get_num_clusters 0 4 1568 36 BulletSoftBodyNode::get_num_clusters 0 1 304 10
/**
 *
 */
53
int BulletSoftBodyNode::get_num_clusters(void) const;

1070 11 cluster_com 0 4 1568 31 BulletSoftBodyNode::cluster_com 0 1 305 10
/**
 *
 */
61
LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const;

1071 9 link_geom 0 4 1568 29 BulletSoftBodyNode::link_geom 0 1 306 24
// Rendering

/**
 *
 */
47
void BulletSoftBodyNode::link_geom(Geom *geom);

1072 11 unlink_geom 0 4 1568 31 BulletSoftBodyNode::unlink_geom 0 1 307 10
/**
 *
 */
43
void BulletSoftBodyNode::unlink_geom(void);

1073 10 link_curve 0 4 1568 30 BulletSoftBodyNode::link_curve 0 1 308 10
/**
 *
 */
64
void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve);

1074 12 unlink_curve 0 4 1568 32 BulletSoftBodyNode::unlink_curve 0 1 309 10
/**
 *
 */
44
void BulletSoftBodyNode::unlink_curve(void);

1075 12 link_surface 0 4 1568 32 BulletSoftBodyNode::link_surface 0 1 310 10
/**
 *
 */
70
void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface);

1076 14 unlink_surface 0 4 1568 34 BulletSoftBodyNode::unlink_surface 0 1 311 10
/**
 *
 */
46
void BulletSoftBodyNode::unlink_surface(void);

1077 13 append_anchor 0 4 1568 33 BulletSoftBodyNode::append_anchor 0 2 312 313 34
// Anchors

/**
 *
 */

/**
 *
 */
220
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false);
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false);

1078 19 append_linear_joint 0 4 1568 39 BulletSoftBodyNode::append_linear_joint 0 2 314 315 32
// Links

/**
 *
 */

/**
 *
 */
310
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);

1079 20 append_angular_joint 0 4 1568 40 BulletSoftBodyNode::append_angular_joint 0 1 316 10
/**
 *
 */
200
void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = NULL);

1080 17 get_num_materials 0 4 1568 37 BulletSoftBodyNode::get_num_materials 0 1 317 52
// Materials

// Materials

// Materials

/**
 *
 */
54
int BulletSoftBodyNode::get_num_materials(void) const;

1081 12 get_material 0 4 1568 32 BulletSoftBodyNode::get_material 0 1 318 10
/**
 *
 */
71
BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const;

1082 15 append_material 0 4 1568 35 BulletSoftBodyNode::append_material 0 1 319 10
/**
 *
 */
65
BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void);

1083 13 get_num_nodes 0 4 1568 33 BulletSoftBodyNode::get_num_nodes 0 1 320 40
// Nodes

// Nodes

// Nodes

/**
 *
 */
50
int BulletSoftBodyNode::get_num_nodes(void) const;

1084 8 get_node 0 4 1568 28 BulletSoftBodyNode::get_node 0 1 321 10
/**
 *
 */
70
BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const;

1085 22 get_closest_node_index 0 4 1568 42 BulletSoftBodyNode::get_closest_node_index 0 1 322 212
/**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */
76
int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local);

1086 9 make_rope 0 4 1568 29 BulletSoftBodyNode::make_rope 0 1 323 22
// Factory

/**
 *
 */
161
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds);

1087 10 make_patch 0 4 1568 30 BulletSoftBodyNode::make_patch 0 1 324 10
/**
 *
 */
248
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags);

1088 14 make_ellipsoid 0 4 1568 34 BulletSoftBodyNode::make_ellipsoid 0 1 325 10
/**
 *
 */
162
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res);

1089 13 make_tri_mesh 0 4 1568 33 BulletSoftBodyNode::make_tri_mesh 0 2 326 327 22
/**
 *
 */

/**
 *
 */
334
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true);

1090 13 make_tet_mesh 0 4 1568 33 BulletSoftBodyNode::make_tet_mesh 0 2 328 329 22
/**
 *
 */

/**
 *
 */
325
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node);

1091 21 ~BulletSoftBodyConfig 0 4 1569 43 BulletSoftBodyConfig::~BulletSoftBodyConfig 0 0 10
/**
 *
 */
57
inline BulletSoftBodyConfig::~BulletSoftBodyConfig(void);

1092 25 clear_all_collision_flags 0 4 1569 47 BulletSoftBodyConfig::clear_all_collision_flags 0 1 332 10
/**
 *
 */
59
void BulletSoftBodyConfig::clear_all_collision_flags(void);

1093 18 set_collision_flag 0 4 1569 40 BulletSoftBodyConfig::set_collision_flag 0 1 333 10
/**
 *
 */
100
void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value);

1094 18 get_collision_flag 0 4 1569 40 BulletSoftBodyConfig::get_collision_flag 0 1 334 10
/**
 *
 */
94
bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const;

1095 14 set_aero_model 0 4 1569 36 BulletSoftBodyConfig::set_aero_model 0 1 335 10
/**
 *
 */
81
void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value);

1096 14 get_aero_model 0 4 1569 36 BulletSoftBodyConfig::get_aero_model 0 1 336 10
/**
 *
 */
81
BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const;

1097 32 set_velocities_correction_factor 0 4 1569 54 BulletSoftBodyConfig::set_velocities_correction_factor 0 1 337 36
/**
 * Setter for property kVCF.
 */
86
inline void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value);

1098 23 set_damping_coefficient 0 4 1569 45 BulletSoftBodyConfig::set_damping_coefficient 0 1 338 35
/**
 * Setter for property kDP.
 */
77
inline void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value);

1099 20 set_drag_coefficient 0 4 1569 42 BulletSoftBodyConfig::set_drag_coefficient 0 1 339 35
/**
 * Setter for property kDG.
 */
74
inline void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value);

1100 20 set_lift_coefficient 0 4 1569 42 BulletSoftBodyConfig::set_lift_coefficient 0 1 340 35
/**
 * Setter for property kLF.
 */
74
inline void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value);

1101 24 set_pressure_coefficient 0 4 1569 46 BulletSoftBodyConfig::set_pressure_coefficient 0 1 341 35
/**
 * Setter for property kPR.
 */
78
inline void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value);

1102 35 set_volume_conservation_coefficient 0 4 1569 57 BulletSoftBodyConfig::set_volume_conservation_coefficient 0 1 342 35
/**
 * Setter for property kVC.
 */
89
inline void BulletSoftBodyConfig::set_volume_conservation_coefficient(PN_stdfloat value);

1103 32 set_dynamic_friction_coefficient 0 4 1569 54 BulletSoftBodyConfig::set_dynamic_friction_coefficient 0 1 343 35
/**
 * Setter for property kDF.
 */
86
inline void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value);

1104 29 set_pose_matching_coefficient 0 4 1569 51 BulletSoftBodyConfig::set_pose_matching_coefficient 0 1 344 35
/**
 * Setter for property kMT.
 */
83
inline void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value);

1105 27 set_rigid_contacts_hardness 0 4 1569 49 BulletSoftBodyConfig::set_rigid_contacts_hardness 0 1 345 36
/**
 * Setter for property kCHR.
 */
81
inline void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value);

1106 29 set_kinetic_contacts_hardness 0 4 1569 51 BulletSoftBodyConfig::set_kinetic_contacts_hardness 0 1 346 36
/**
 * Setter for property kKHR.
 */
83
inline void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value);

1107 26 set_soft_contacts_hardness 0 4 1569 48 BulletSoftBodyConfig::set_soft_contacts_hardness 0 1 347 36
/**
 * Setter for property kSHR.
 */
80
inline void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value);

1108 20 set_anchors_hardness 0 4 1569 42 BulletSoftBodyConfig::set_anchors_hardness 0 1 348 36
/**
 * Setter for property kAHR.
 */
74
inline void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value);

1109 26 set_soft_vs_rigid_hardness 0 4 1569 48 BulletSoftBodyConfig::set_soft_vs_rigid_hardness 0 1 349 40
/**
 * Setter for property kSRHR_CL.
 */
80
inline void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value);

1110 28 set_soft_vs_kinetic_hardness 0 4 1569 50 BulletSoftBodyConfig::set_soft_vs_kinetic_hardness 0 1 350 40
/**
 * Setter for property kSKHR_CL.
 */
82
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value);

1111 25 set_soft_vs_soft_hardness 0 4 1569 47 BulletSoftBodyConfig::set_soft_vs_soft_hardness 0 1 351 40
/**
 * Setter for property kSSHR_CL.
 */
79
inline void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value);

1112 31 set_soft_vs_rigid_impulse_split 0 4 1569 53 BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split 0 1 352 43
/**
 * Setter for property kSR_SPLT_CL.
 */
85
inline void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value);

1113 33 set_soft_vs_kinetic_impulse_split 0 4 1569 55 BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split 0 1 353 43
/**
 * Setter for property kSK_SPLT_CL.
 */
87
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value);

1114 30 set_soft_vs_soft_impulse_split 0 4 1569 52 BulletSoftBodyConfig::set_soft_vs_soft_impulse_split 0 1 354 43
/**
 * Setter for property kSS_SPLT_CL.
 */
84
inline void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value);

1115 13 set_maxvolume 0 4 1569 35 BulletSoftBodyConfig::set_maxvolume 0 1 355 41
/**
 * Setter for property maxvolume.
 */
67
inline void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value);

1116 13 set_timescale 0 4 1569 35 BulletSoftBodyConfig::set_timescale 0 1 356 41
/**
 * Setter for property timescale.
 */
67
inline void BulletSoftBodyConfig::set_timescale(PN_stdfloat value);

1117 31 set_positions_solver_iterations 0 4 1569 53 BulletSoftBodyConfig::set_positions_solver_iterations 0 1 357 43
/**
 * Setter for property piterations.
 */
77
inline void BulletSoftBodyConfig::set_positions_solver_iterations(int value);

1118 32 set_velocities_solver_iterations 0 4 1569 54 BulletSoftBodyConfig::set_velocities_solver_iterations 0 1 358 43
/**
 * Setter for property viterations.
 */
78
inline void BulletSoftBodyConfig::set_velocities_solver_iterations(int value);

1119 27 set_drift_solver_iterations 0 4 1569 49 BulletSoftBodyConfig::set_drift_solver_iterations 0 1 359 43
/**
 * Setter for property diterations.
 */
73
inline void BulletSoftBodyConfig::set_drift_solver_iterations(int value);

1120 29 set_cluster_solver_iterations 0 4 1569 51 BulletSoftBodyConfig::set_cluster_solver_iterations 0 1 360 43
/**
 * Setter for property citerations.
 */
75
inline void BulletSoftBodyConfig::set_cluster_solver_iterations(int value);

1121 32 get_velocities_correction_factor 0 4 1569 54 BulletSoftBodyConfig::get_velocities_correction_factor 0 1 361 36
/**
 * Getter for property kVCF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const;

1122 23 get_damping_coefficient 0 4 1569 45 BulletSoftBodyConfig::get_damping_coefficient 0 1 362 35
/**
 * Getter for property kDP.
 */
77
inline PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const;

1123 20 get_drag_coefficient 0 4 1569 42 BulletSoftBodyConfig::get_drag_coefficient 0 1 363 35
/**
 * Getter for property kDG.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const;

1124 20 get_lift_coefficient 0 4 1569 42 BulletSoftBodyConfig::get_lift_coefficient 0 1 364 35
/**
 * Getter for property kLF.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const;

1125 24 get_pressure_coefficient 0 4 1569 46 BulletSoftBodyConfig::get_pressure_coefficient 0 1 365 35
/**
 * Getter for property kPR.
 */
78
inline PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const;

1126 35 get_volume_conservation_coefficient 0 4 1569 57 BulletSoftBodyConfig::get_volume_conservation_coefficient 0 1 366 35
/**
 * Getter for property kVC.
 */
89
inline PN_stdfloat BulletSoftBodyConfig::get_volume_conservation_coefficient(void) const;

1127 32 get_dynamic_friction_coefficient 0 4 1569 54 BulletSoftBodyConfig::get_dynamic_friction_coefficient 0 1 367 35
/**
 * Getter for property kDF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const;

1128 29 get_pose_matching_coefficient 0 4 1569 51 BulletSoftBodyConfig::get_pose_matching_coefficient 0 1 368 35
/**
 * Getter for property kMT.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const;

1129 27 get_rigid_contacts_hardness 0 4 1569 49 BulletSoftBodyConfig::get_rigid_contacts_hardness 0 1 369 36
/**
 * Getter for property kCHR.
 */
81
inline PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const;

1130 29 get_kinetic_contacts_hardness 0 4 1569 51 BulletSoftBodyConfig::get_kinetic_contacts_hardness 0 1 370 36
/**
 * Getter for property kKHR.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const;

1131 26 get_soft_contacts_hardness 0 4 1569 48 BulletSoftBodyConfig::get_soft_contacts_hardness 0 1 371 36
/**
 * Getter for property kSHR.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const;

1132 20 get_anchors_hardness 0 4 1569 42 BulletSoftBodyConfig::get_anchors_hardness 0 1 372 36
/**
 * Getter for property kAHR.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const;

1133 26 get_soft_vs_rigid_hardness 0 4 1569 48 BulletSoftBodyConfig::get_soft_vs_rigid_hardness 0 1 373 40
/**
 * Getter for property kSRHR_CL.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const;

1134 28 get_soft_vs_kinetic_hardness 0 4 1569 50 BulletSoftBodyConfig::get_soft_vs_kinetic_hardness 0 1 374 40
/**
 * Getter for property kSKHR_CL.
 */
82
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const;

1135 25 get_soft_vs_soft_hardness 0 4 1569 47 BulletSoftBodyConfig::get_soft_vs_soft_hardness 0 1 375 40
/**
 * Getter for property kSSHR_CL.
 */
79
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const;

1136 31 get_soft_vs_rigid_impulse_split 0 4 1569 53 BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split 0 1 376 43
/**
 * Getter for property kSR_SPLT_CL.
 */
85
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const;

1137 33 get_soft_vs_kinetic_impulse_split 0 4 1569 55 BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split 0 1 377 43
/**
 * Getter for property kSK_SPLT_CL.
 */
87
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const;

1138 30 get_soft_vs_soft_impulse_split 0 4 1569 52 BulletSoftBodyConfig::get_soft_vs_soft_impulse_split 0 1 378 43
/**
 * Getter for property kSS_SPLT_CL.
 */
84
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const;

1139 13 get_maxvolume 0 4 1569 35 BulletSoftBodyConfig::get_maxvolume 0 1 379 41
/**
 * Getter for property maxvolume.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const;

1140 13 get_timescale 0 4 1569 35 BulletSoftBodyConfig::get_timescale 0 1 380 41
/**
 * Getter for property timescale.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const;

1141 31 get_positions_solver_iterations 0 4 1569 53 BulletSoftBodyConfig::get_positions_solver_iterations 0 1 381 43
/**
 * Getter for property piterations.
 */
77
inline int BulletSoftBodyConfig::get_positions_solver_iterations(void) const;

1142 32 get_velocities_solver_iterations 0 4 1569 54 BulletSoftBodyConfig::get_velocities_solver_iterations 0 1 382 43
/**
 * Getter for property viterations.
 */
78
inline int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const;

1143 27 get_drift_solver_iterations 0 4 1569 49 BulletSoftBodyConfig::get_drift_solver_iterations 0 1 383 43
/**
 * Getter for property diterations.
 */
73
inline int BulletSoftBodyConfig::get_drift_solver_iterations(void) const;

1144 29 get_cluster_solver_iterations 0 4 1569 51 BulletSoftBodyConfig::get_cluster_solver_iterations 0 1 384 43
/**
 * Getter for property citerations.
 */
75
inline int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const;

1145 20 BulletSoftBodyConfig 0 4 1569 42 BulletSoftBodyConfig::BulletSoftBodyConfig 0 1 331 10
/**
 *
 */
90
inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default;

1146 24 ~BulletSoftBodyWorldInfo 0 4 1572 49 BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo 0 0 10
/**
 *
 */
63
inline BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo(void);

1147 15 set_air_density 0 4 1572 40 BulletSoftBodyWorldInfo::set_air_density 0 1 386 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density);

1148 17 set_water_density 0 4 1572 42 BulletSoftBodyWorldInfo::set_water_density 0 1 387 10
/**
 *
 */
69
void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density);

1149 16 set_water_offset 0 4 1572 41 BulletSoftBodyWorldInfo::set_water_offset 0 1 388 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset);

1150 16 set_water_normal 0 4 1572 41 BulletSoftBodyWorldInfo::set_water_normal 0 1 389 10
/**
 *
 */
71
void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal);

1151 11 set_gravity 0 4 1572 36 BulletSoftBodyWorldInfo::set_gravity 0 1 390 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity);

1152 15 get_air_density 0 4 1572 40 BulletSoftBodyWorldInfo::get_air_density 0 1 391 10
/**
 *
 */
65
PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const;

1153 17 get_water_density 0 4 1572 42 BulletSoftBodyWorldInfo::get_water_density 0 1 392 10
/**
 *
 */
67
PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const;

1154 16 get_water_offset 0 4 1572 41 BulletSoftBodyWorldInfo::get_water_offset 0 1 393 10
/**
 *
 */
66
PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const;

1155 16 get_water_normal 0 4 1572 41 BulletSoftBodyWorldInfo::get_water_normal 0 1 394 10
/**
 *
 */
63
LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const;

1156 11 get_gravity 0 4 1572 36 BulletSoftBodyWorldInfo::get_gravity 0 1 395 10
/**
 *
 */
58
LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const;

1157 15 garbage_collect 0 4 1572 40 BulletSoftBodyWorldInfo::garbage_collect 0 1 396 10
/**
 *
 */
66
void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256);

1158 23 BulletSoftBodyWorldInfo 0 4 1572 48 BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo 0 1 385 10
/**
 *
 */
99
inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default;

1159 23 ~BulletSoftBodyMaterial 0 4 1574 47 BulletSoftBodyMaterial::~BulletSoftBodyMaterial 0 0 10
/**
 *
 */
61
inline BulletSoftBodyMaterial::~BulletSoftBodyMaterial(void);

1160 5 empty 0 4 1574 29 BulletSoftBodyMaterial::empty 0 1 398 102
/**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */
73
static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void);

1161 20 get_linear_stiffness 0 4 1574 44 BulletSoftBodyMaterial::get_linear_stiffness 0 1 399 42
/**
 * Getter for the property m_kLST.
 */
76
inline PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const;

1162 20 set_linear_stiffness 0 4 1574 44 BulletSoftBodyMaterial::set_linear_stiffness 0 1 400 42
/**
 * Setter for the property m_kLST.
 */
76
inline void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value);

1163 21 get_angular_stiffness 0 4 1574 45 BulletSoftBodyMaterial::get_angular_stiffness 0 1 401 42
/**
 * Getter for the property m_kAST.
 */
77
inline PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const;

1164 21 set_angular_stiffness 0 4 1574 45 BulletSoftBodyMaterial::set_angular_stiffness 0 1 402 42
/**
 * Setter for the property m_kAST.
 */
77
inline void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value);

1165 23 get_volume_preservation 0 4 1574 47 BulletSoftBodyMaterial::get_volume_preservation 0 1 403 42
/**
 * Getter for the property m_kVST.
 */
79
inline PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const;

1166 23 set_volume_preservation 0 4 1574 47 BulletSoftBodyMaterial::set_volume_preservation 0 1 404 42
/**
 * Setter for the property m_kVST.
 */
79
inline void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value);

1167 22 BulletSoftBodyMaterial 0 4 1574 46 BulletSoftBodyMaterial::BulletSoftBodyMaterial 0 1 397 10
/**
 *
 */
96
inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default;

1168 14 get_class_type 0 4 1568 34 BulletSoftBodyNode::get_class_type 0 1 330 0
59
static TypeHandle BulletSoftBodyNode::get_class_type(void);

1169 24 set_suspension_stiffness 0 4 1575 45 BulletVehicleTuning::set_suspension_stiffness 0 1 405 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value);

1170 26 set_suspension_compression 0 4 1575 47 BulletVehicleTuning::set_suspension_compression 0 1 406 10
/**
 *
 */
79
inline void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value);

1171 22 set_suspension_damping 0 4 1575 43 BulletVehicleTuning::set_suspension_damping 0 1 407 10
/**
 *
 */
75
inline void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value);

1172 28 set_max_suspension_travel_cm 0 4 1575 49 BulletVehicleTuning::set_max_suspension_travel_cm 0 1 408 10
/**
 *
 */
81
inline void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value);

1173 17 set_friction_slip 0 4 1575 38 BulletVehicleTuning::set_friction_slip 0 1 409 10
/**
 *
 */
70
inline void BulletVehicleTuning::set_friction_slip(PN_stdfloat value);

1174 24 set_max_suspension_force 0 4 1575 45 BulletVehicleTuning::set_max_suspension_force 0 1 410 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value);

1175 24 get_suspension_stiffness 0 4 1575 45 BulletVehicleTuning::get_suspension_stiffness 0 1 411 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const;

1176 26 get_suspension_compression 0 4 1575 47 BulletVehicleTuning::get_suspension_compression 0 1 412 10
/**
 *
 */
79
inline PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const;

1177 22 get_suspension_damping 0 4 1575 43 BulletVehicleTuning::get_suspension_damping 0 1 413 10
/**
 *
 */
75
inline PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const;

1178 28 get_max_suspension_travel_cm 0 4 1575 49 BulletVehicleTuning::get_max_suspension_travel_cm 0 1 414 10
/**
 *
 */
81
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const;

1179 17 get_friction_slip 0 4 1575 38 BulletVehicleTuning::get_friction_slip 0 1 415 10
/**
 *
 */
70
inline PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const;

1180 24 get_max_suspension_force 0 4 1575 45 BulletVehicleTuning::get_max_suspension_force 0 1 416 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const;

1181 13 BulletVehicle 0 4 1576 28 BulletVehicle::BulletVehicle 0 1 417 94
/**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */
79
BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis);

1182 21 set_coordinate_system 0 4 1576 36 BulletVehicle::set_coordinate_system 0 1 418 100
/**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */
59
void BulletVehicle::set_coordinate_system(BulletUpAxis up);

1183 18 set_steering_value 0 4 1576 33 BulletVehicle::set_steering_value 0 1 419 76
/**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */
70
void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx);

1184 9 set_brake 0 4 1576 24 BulletVehicle::set_brake 0 1 420 61
/**
 * Applies braking force to the wheel with index idx.
 */
58
void BulletVehicle::set_brake(PN_stdfloat brake, int idx);

1185 17 set_pitch_control 0 4 1576 32 BulletVehicle::set_pitch_control 0 1 421 10
/**
 *
 */
57
void BulletVehicle::set_pitch_control(PN_stdfloat pitch);

1186 11 get_chassis 0 4 1576 26 BulletVehicle::get_chassis 0 1 422 82
/**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */
54
BulletRigidBodyNode *BulletVehicle::get_chassis(void);

1187 25 get_current_speed_km_hour 0 4 1576 40 BulletVehicle::get_current_speed_km_hour 0 1 423 106
/**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */
65
PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const;

1188 18 get_steering_value 0 4 1576 33 BulletVehicle::get_steering_value 0 1 424 77
/**
 * Returns the steering angle of the wheel with index idx in degrees.
 */
61
PN_stdfloat BulletVehicle::get_steering_value(int idx) const;

1189 18 get_forward_vector 0 4 1576 33 BulletVehicle::get_forward_vector 0 1 425 145
/**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */
55
LVector3 BulletVehicle::get_forward_vector(void) const;

1190 16 reset_suspension 0 4 1576 31 BulletVehicle::reset_suspension 0 1 426 43
/**
 * Resets the vehicle's suspension.
 */
43
void BulletVehicle::reset_suspension(void);

1191 18 apply_engine_force 0 4 1576 33 BulletVehicle::apply_engine_force 0 1 427 70
/**
 * Applies force at the wheel with index idx for acceleration.
 */
67
void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx);

1192 12 create_wheel 0 4 1576 27 BulletVehicle::create_wheel 0 1 428 83
// Wheels

/**
 * Factory method for creating wheels for this vehicle instance.
 */
46
BulletWheel BulletVehicle::create_wheel(void);

1193 14 get_num_wheels 0 4 1576 29 BulletVehicle::get_num_wheels 0 1 429 57
/**
 * Returns the number of wheels this vehicle has.
 */
53
inline int BulletVehicle::get_num_wheels(void) const;

1194 9 get_wheel 0 4 1576 24 BulletVehicle::get_wheel 0 1 430 132
/**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */
52
BulletWheel BulletVehicle::get_wheel(int idx) const;

1195 10 get_tuning 0 4 1576 25 BulletVehicle::get_tuning 0 1 431 211
// Tuning

// Tuning

/**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */
60
inline BulletVehicleTuning &BulletVehicle::get_tuning(void);

1196 12 ~BulletWheel 0 4 1577 25 BulletWheel::~BulletWheel 0 0 10
/**
 *
 */
39
inline BulletWheel::~BulletWheel(void);

1197 24 set_suspension_stiffness 0 4 1577 37 BulletWheel::set_suspension_stiffness 0 1 434 50
/**
 * Sets how stiff the suspension shall be.
 */
62
void BulletWheel::set_suspension_stiffness(PN_stdfloat value);

1198 28 set_max_suspension_travel_cm 0 4 1577 41 BulletWheel::set_max_suspension_travel_cm 0 1 435 109
/**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */
66
void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value);

1199 17 set_friction_slip 0 4 1577 30 BulletWheel::set_friction_slip 0 1 436 45
/**
 * Sets the slipperyness of the tyre.
 */
55
void BulletWheel::set_friction_slip(PN_stdfloat value);

1200 24 set_max_suspension_force 0 4 1577 37 BulletWheel::set_max_suspension_force 0 1 437 66
/**
 * Sets the maximum suspension force the wheel can handle.
 */
62
void BulletWheel::set_max_suspension_force(PN_stdfloat value);

1201 30 set_wheels_damping_compression 0 4 1577 43 BulletWheel::set_wheels_damping_compression 0 1 438 79
/**
 * Sets the damping forces applied when the suspension gets compressed.
 */
68
void BulletWheel::set_wheels_damping_compression(PN_stdfloat value);

1202 29 set_wheels_damping_relaxation 0 4 1577 42 BulletWheel::set_wheels_damping_relaxation 0 1 439 71
/**
 * Sets the damping forces applied when the suspension relaxes.
 */
67
void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value);

1203 18 set_roll_influence 0 4 1577 31 BulletWheel::set_roll_influence 0 1 440 249
/**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */
56
void BulletWheel::set_roll_influence(PN_stdfloat value);

1204 16 set_wheel_radius 0 4 1577 29 BulletWheel::set_wheel_radius 0 1 441 33
/**
 * Sets the wheel radius.
 */
54
void BulletWheel::set_wheel_radius(PN_stdfloat value);

1205 12 set_steering 0 4 1577 25 BulletWheel::set_steering 0 1 442 35
/**
 * Sets the steering angle.
 */
50
void BulletWheel::set_steering(PN_stdfloat value);

1206 12 set_rotation 0 4 1577 25 BulletWheel::set_rotation 0 1 443 10
/**
 *
 */
50
void BulletWheel::set_rotation(PN_stdfloat value);

1207 18 set_delta_rotation 0 4 1577 31 BulletWheel::set_delta_rotation 0 1 444 10
/**
 *
 */
56
void BulletWheel::set_delta_rotation(PN_stdfloat value);

1208 16 set_engine_force 0 4 1577 29 BulletWheel::set_engine_force 0 1 445 69
/**
 * Defines how much force should be used to rotate the wheel.
 */
54
void BulletWheel::set_engine_force(PN_stdfloat value);

1209 9 set_brake 0 4 1577 22 BulletWheel::set_brake 0 1 446 10
/**
 *
 */
47
void BulletWheel::set_brake(PN_stdfloat value);

1210 13 set_skid_info 0 4 1577 26 BulletWheel::set_skid_info 0 1 447 10
/**
 *
 */
51
void BulletWheel::set_skid_info(PN_stdfloat value);

1211 27 set_wheels_suspension_force 0 4 1577 40 BulletWheel::set_wheels_suspension_force 0 1 448 10
/**
 *
 */
65
void BulletWheel::set_wheels_suspension_force(PN_stdfloat value);

1212 32 set_suspension_relative_velocity 0 4 1577 45 BulletWheel::set_suspension_relative_velocity 0 1 449 10
/**
 *
 */
70
void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value);

1213 35 set_clipped_inv_connection_point_cs 0 4 1577 48 BulletWheel::set_clipped_inv_connection_point_cs 0 1 450 10
/**
 *
 */
73
void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value);

1214 31 set_chassis_connection_point_cs 0 4 1577 44 BulletWheel::set_chassis_connection_point_cs 0 1 451 70
/**
 * Sets the point where the wheel is connected to the chassis.
 */
70
void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos);

1215 22 set_wheel_direction_cs 0 4 1577 35 BulletWheel::set_wheel_direction_cs 0 1 452 92
/**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */
62
void BulletWheel::set_wheel_direction_cs(LVector3 const &dir);

1216 17 set_wheel_axle_cs 0 4 1577 30 BulletWheel::set_wheel_axle_cs 0 1 453 51
/**
 * Determines the wheel axle normal vector.
 */
58
void BulletWheel::set_wheel_axle_cs(LVector3 const &axle);

1217 19 set_world_transform 0 4 1577 32 BulletWheel::set_world_transform 0 1 454 10
/**
 *
 */
59
void BulletWheel::set_world_transform(LMatrix4 const &mat);

1218 15 set_front_wheel 0 4 1577 28 BulletWheel::set_front_wheel 0 1 455 42
/**
 * Sets if the wheel is steerable.
 */
46
void BulletWheel::set_front_wheel(bool value);

1219 8 set_node 0 4 1577 21 BulletWheel::set_node 0 1 456 86
/**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */
44
void BulletWheel::set_node(PandaNode *node);

1220 26 get_suspension_rest_length 0 4 1577 39 BulletWheel::get_suspension_rest_length 0 1 457 83
/**
 * Returns the length of the suspension when the vehicle is standing still.
 */
64
PN_stdfloat BulletWheel::get_suspension_rest_length(void) const;

1221 24 get_suspension_stiffness 0 4 1577 37 BulletWheel::get_suspension_stiffness 0 1 458 51
/**
 * Returns the stiffness of the suspension.
 */
62
PN_stdfloat BulletWheel::get_suspension_stiffness(void) const;

1222 28 get_max_suspension_travel_cm 0 4 1577 41 BulletWheel::get_max_suspension_travel_cm 0 1 459 10
/**
 *
 */
66
PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const;

1223 17 get_friction_slip 0 4 1577 30 BulletWheel::get_friction_slip 0 1 460 46
/**
 * Returns how slippery the tyres are.
 */
55
PN_stdfloat BulletWheel::get_friction_slip(void) const;

1224 24 get_max_suspension_force 0 4 1577 37 BulletWheel::get_max_suspension_force 0 1 461 72
/**
 * Returns the maximum force (weight) the suspension can handle.
 */
62
PN_stdfloat BulletWheel::get_max_suspension_force(void) const;

1225 30 get_wheels_damping_compression 0 4 1577 43 BulletWheel::get_wheels_damping_compression 0 1 462 70
/**
 * Returns the  damping applied to the compressing suspension.
 */
68
PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const;

1226 29 get_wheels_damping_relaxation 0 4 1577 42 BulletWheel::get_wheels_damping_relaxation 0 1 463 66
/**
 * Returns the damping applied to the relaxing suspension.
 */
67
PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const;

1227 18 get_roll_influence 0 4 1577 31 BulletWheel::get_roll_influence 0 1 464 90
/**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */
56
PN_stdfloat BulletWheel::get_roll_influence(void) const;

1228 16 get_wheel_radius 0 4 1577 29 BulletWheel::get_wheel_radius 0 1 465 36
/**
 * Returns the wheel radius.
 */
54
PN_stdfloat BulletWheel::get_wheel_radius(void) const;

1229 12 get_steering 0 4 1577 25 BulletWheel::get_steering 0 1 466 49
/**
 * Returns the steering angle in degrees.
 */
50
PN_stdfloat BulletWheel::get_steering(void) const;

1230 12 get_rotation 0 4 1577 25 BulletWheel::get_rotation 0 1 467 10
/**
 *
 */
50
PN_stdfloat BulletWheel::get_rotation(void) const;

1231 18 get_delta_rotation 0 4 1577 31 BulletWheel::get_delta_rotation 0 1 468 10
/**
 *
 */
56
PN_stdfloat BulletWheel::get_delta_rotation(void) const;

1232 16 get_engine_force 0 4 1577 29 BulletWheel::get_engine_force 0 1 469 71
/**
 * Returns the amount of accelleration force currently applied.
 */
54
PN_stdfloat BulletWheel::get_engine_force(void) const;

1233 9 get_brake 0 4 1577 22 BulletWheel::get_brake 0 1 470 65
/**
 * Returns the amount of braking force currently applied.
 */
47
PN_stdfloat BulletWheel::get_brake(void) const;

1234 13 get_skid_info 0 4 1577 26 BulletWheel::get_skid_info 0 1 471 10
/**
 *
 */
51
PN_stdfloat BulletWheel::get_skid_info(void) const;

1235 27 get_wheels_suspension_force 0 4 1577 40 BulletWheel::get_wheels_suspension_force 0 1 472 10
/**
 *
 */
65
PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const;

1236 32 get_suspension_relative_velocity 0 4 1577 45 BulletWheel::get_suspension_relative_velocity 0 1 473 10
/**
 *
 */
70
PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const;

1237 35 get_clipped_inv_connection_point_cs 0 4 1577 48 BulletWheel::get_clipped_inv_connection_point_cs 0 1 474 10
/**
 *
 */
73
PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const;

1238 31 get_chassis_connection_point_cs 0 4 1577 44 BulletWheel::get_chassis_connection_point_cs 0 1 475 73
/**
 * Returns the point where the wheel is connected to the chassis.
 */
65
LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const;

1239 22 get_wheel_direction_cs 0 4 1577 35 BulletWheel::get_wheel_direction_cs 0 1 476 70
/**
 * Returns the wheel's forward vector relative to the chassis.
 */
57
LVector3 BulletWheel::get_wheel_direction_cs(void) const;

1240 17 get_wheel_axle_cs 0 4 1577 30 BulletWheel::get_wheel_axle_cs 0 1 477 55
/**
 * Returns the normal vector of the wheel axle.
 */
52
LVector3 BulletWheel::get_wheel_axle_cs(void) const;

1241 19 get_world_transform 0 4 1577 32 BulletWheel::get_world_transform 0 1 478 10
/**
 *
 */
54
LMatrix4 BulletWheel::get_world_transform(void) const;

1242 14 is_front_wheel 0 4 1577 27 BulletWheel::is_front_wheel 0 1 479 46
/**
 * Determines if a wheel is steerable.
 */
45
bool BulletWheel::is_front_wheel(void) const;

1243 8 get_node 0 4 1577 21 BulletWheel::get_node 0 1 480 142
/**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */
45
PandaNode *BulletWheel::get_node(void) const;

1244 16 get_raycast_info 0 4 1577 29 BulletWheel::get_raycast_info 0 1 481 10
/**
 *
 */
65
BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const;

1245 23 ~BulletWheelRaycastInfo 0 4 1578 47 BulletWheelRaycastInfo::~BulletWheelRaycastInfo 0 0 10
/**
 *
 */
61
inline BulletWheelRaycastInfo::~BulletWheelRaycastInfo(void);

1246 13 is_in_contact 0 4 1578 37 BulletWheelRaycastInfo::is_in_contact 0 1 483 10
/**
 *
 */
62
inline bool BulletWheelRaycastInfo::is_in_contact(void) const;

1247 21 get_suspension_length 0 4 1578 45 BulletWheelRaycastInfo::get_suspension_length 0 1 484 10
/**
 *
 */
77
inline PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const;

1248 21 get_contact_normal_ws 0 4 1578 45 BulletWheelRaycastInfo::get_contact_normal_ws 0 1 485 10
/**
 *
 */
74
inline LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const;

1249 22 get_wheel_direction_ws 0 4 1578 46 BulletWheelRaycastInfo::get_wheel_direction_ws 0 1 486 10
/**
 *
 */
75
inline LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const;

1250 17 get_wheel_axle_ws 0 4 1578 41 BulletWheelRaycastInfo::get_wheel_axle_ws 0 1 487 10
/**
 *
 */
70
inline LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const;

1251 20 get_contact_point_ws 0 4 1578 44 BulletWheelRaycastInfo::get_contact_point_ws 0 1 488 10
/**
 *
 */
72
inline LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const;

1252 17 get_hard_point_ws 0 4 1578 41 BulletWheelRaycastInfo::get_hard_point_ws 0 1 489 10
/**
 *
 */
69
inline LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const;

1253 17 get_ground_object 0 4 1578 41 BulletWheelRaycastInfo::get_ground_object 0 1 490 10
/**
 *
 */
72
inline PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const;

1254 22 BulletWheelRaycastInfo 0 4 1578 46 BulletWheelRaycastInfo::BulletWheelRaycastInfo 0 1 482 10
/**
 *
 */
96
inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default;

1255 11 BulletWheel 0 4 1577 24 BulletWheel::BulletWheel 0 1 433 10
/**
 *
 */
63
inline BulletWheel::BulletWheel(BulletWheel const &) = default;

1256 14 get_class_type 0 4 1576 29 BulletVehicle::get_class_type 0 1 432 0
54
static TypeHandle BulletVehicle::get_class_type(void);

1257 11 BulletWorld 0 4 1579 24 BulletWorld::BulletWorld 0 1 491 10
/**
 *
 */
31
BulletWorld::BulletWorld(void);

1258 11 set_gravity 0 4 1579 24 BulletWorld::set_gravity 0 2 492 493 22
/**
 *
 */

/**
 *
 */
134
void BulletWorld::set_gravity(LVector3 const &gravity);
void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz);

1259 11 get_gravity 0 4 1579 24 BulletWorld::get_gravity 0 1 494 10
/**
 *
 */
52
LVector3 const BulletWorld::get_gravity(void) const;

1260 10 do_physics 0 4 1579 23 BulletWorld::do_physics 0 1 495 10
/**
 *
 */
103
int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0));

1261 14 get_world_info 0 4 1579 27 BulletWorld::get_world_info 0 1 496 10
/**
 *
 */
58
BulletSoftBodyWorldInfo BulletWorld::get_world_info(void);

1262 14 set_debug_node 0 4 1579 27 BulletWorld::set_debug_node 0 1 497 30
// Debug

// Debug

/**
 *
 */
63
inline void BulletWorld::set_debug_node(BulletDebugNode *node);

1263 16 clear_debug_node 0 4 1579 29 BulletWorld::clear_debug_node 0 1 498 10
/**
 *
 */
48
inline void BulletWorld::clear_debug_node(void);

1264 14 get_debug_node 0 4 1579 27 BulletWorld::get_debug_node 0 1 499 10
/**
 *
 */
64
inline BulletDebugNode *BulletWorld::get_debug_node(void) const;

1265 14 has_debug_node 0 4 1579 27 BulletWorld::has_debug_node 0 1 500 10
/**
 *
 */
52
inline bool BulletWorld::has_debug_node(void) const;

1266 6 attach 0 4 1579 19 BulletWorld::attach 0 1 501 27
// AttachRemove

/**
 *
 */
46
void BulletWorld::attach(TypedObject *object);

1267 17 attach_constraint 0 4 1579 30 BulletWorld::attach_constraint 0 1 502 156
/**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */
97
void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false);

1268 6 remove 0 4 1579 19 BulletWorld::remove 0 1 503 10
/**
 *
 */
46
void BulletWorld::remove(TypedObject *object);

1269 14 get_num_ghosts 0 4 1579 27 BulletWorld::get_num_ghosts 0 1 504 61
// Ghost object

// Ghost object

// Ghost object

/**
 *
 */
51
inline int BulletWorld::get_num_ghosts(void) const;

1270 9 get_ghost 0 4 1579 22 BulletWorld::get_ghost 0 1 505 10
/**
 *
 */
62
inline BulletGhostNode *BulletWorld::get_ghost(int idx) const;

1271 20 get_num_rigid_bodies 0 4 1579 33 BulletWorld::get_num_rigid_bodies 0 1 506 55
// Rigid body

// Rigid body

// Rigid body

/**
 *
 */
57
inline int BulletWorld::get_num_rigid_bodies(void) const;

1272 14 get_rigid_body 0 4 1579 27 BulletWorld::get_rigid_body 0 1 507 10
/**
 *
 */
71
inline BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const;

1273 19 get_num_soft_bodies 0 4 1579 32 BulletWorld::get_num_soft_bodies 0 1 508 52
// Soft body

// Soft body

// Soft body

/**
 *
 */
56
inline int BulletWorld::get_num_soft_bodies(void) const;

1274 13 get_soft_body 0 4 1579 26 BulletWorld::get_soft_body 0 1 509 10
/**
 *
 */
69
inline BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const;

1275 18 get_num_characters 0 4 1579 31 BulletWorld::get_num_characters 0 1 510 85
// Character controller

// Character controller

// Character controller

/**
 *
 */
55
inline int BulletWorld::get_num_characters(void) const;

1276 13 get_character 0 4 1579 26 BulletWorld::get_character 0 1 511 10
/**
 *
 */
84
inline BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const;

1277 14 attach_vehicle 0 4 1579 27 BulletWorld::attach_vehicle 0 1 512 66
// Vehicle

/**
 * Deprecated!  Please use BulletWorld::attach
 */
57
void BulletWorld::attach_vehicle(BulletVehicle *vehicle);

1278 14 remove_vehicle 0 4 1579 27 BulletWorld::remove_vehicle 0 1 513 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
57
void BulletWorld::remove_vehicle(BulletVehicle *vehicle);

1279 16 get_num_vehicles 0 4 1579 29 BulletWorld::get_num_vehicles 0 1 514 10
/**
 *
 */
53
inline int BulletWorld::get_num_vehicles(void) const;

1280 11 get_vehicle 0 4 1579 24 BulletWorld::get_vehicle 0 1 515 10
/**
 *
 */
62
inline BulletVehicle *BulletWorld::get_vehicle(int idx) const;

1281 19 get_num_constraints 0 4 1579 32 BulletWorld::get_num_constraints 0 1 516 55
// Constraint

// Constraint

// Constraint

/**
 *
 */
56
inline int BulletWorld::get_num_constraints(void) const;

1282 14 get_constraint 0 4 1579 27 BulletWorld::get_constraint 0 1 517 10
/**
 *
 */
68
inline BulletConstraint *BulletWorld::get_constraint(int idx) const;

1283 16 ray_test_closest 0 4 1579 29 BulletWorld::ray_test_closest 0 1 518 40
// Raycast and other queries

/**
 *
 */
187
BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = ::template< WType, int nbits >::BitMask::all_on()) const;

1284 12 ray_test_all 0 4 1579 25 BulletWorld::ray_test_all 0 1 519 10
/**
 *
 */
180
BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = ::template< WType, int nbits >::BitMask::all_on()) const;

1285 18 sweep_test_closest 0 4 1579 31 BulletWorld::sweep_test_closest 0 1 520 10
/**
 *
 */
254
BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = ::template< WType, int nbits >::BitMask::all_on(), PN_stdfloat penetration = 0.0) const;

1286 12 contact_test 0 4 1579 25 BulletWorld::contact_test 0 1 521 386
/**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */
94
BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const;

1287 17 contact_test_pair 0 4 1579 30 BulletWorld::contact_test_pair 0 1 522 181
/**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */
93
BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const;

1288 11 filter_test 0 4 1579 24 BulletWorld::filter_test 0 1 523 105
/**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */
72
bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const;

1289 17 get_num_manifolds 0 4 1579 30 BulletWorld::get_num_manifolds 0 1 524 52
// Manifolds

// Manifolds

// Manifolds

/**
 *
 */
54
inline int BulletWorld::get_num_manifolds(void) const;

1290 12 get_manifold 0 4 1579 25 BulletWorld::get_manifold 0 1 525 10
/**
 *
 */
67
BulletPersistentManifold *BulletWorld::get_manifold(int idx) const;

1291 24 set_group_collision_flag 0 4 1579 37 BulletWorld::set_group_collision_flag 0 1 526 34
// Collision filtering

/**
 *
 */
98
void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable);

1292 24 get_group_collision_flag 0 4 1579 37 BulletWorld::get_group_collision_flag 0 1 527 10
/**
 *
 */
91
bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const;

1293 26 set_contact_added_callback 0 4 1579 39 BulletWorld::set_contact_added_callback 0 1 528 24
// Callbacks

/**
 *
 */
66
void BulletWorld::set_contact_added_callback(CallbackObject *obj);

1294 28 clear_contact_added_callback 0 4 1579 41 BulletWorld::clear_contact_added_callback 0 1 529 10
/**
 *
 */
53
void BulletWorld::clear_contact_added_callback(void);

1295 17 set_tick_callback 0 4 1579 30 BulletWorld::set_tick_callback 0 1 530 10
/**
 *
 */
82
void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false);

1296 19 clear_tick_callback 0 4 1579 32 BulletWorld::clear_tick_callback 0 1 531 10
/**
 *
 */
44
void BulletWorld::clear_tick_callback(void);

1297 19 set_filter_callback 0 4 1579 32 BulletWorld::set_filter_callback 0 1 532 10
/**
 *
 */
59
void BulletWorld::set_filter_callback(CallbackObject *obj);

1298 21 clear_filter_callback 0 4 1579 34 BulletWorld::clear_filter_callback 0 1 533 10
/**
 *
 */
46
void BulletWorld::clear_filter_callback(void);

1299 25 ~BulletPersistentManifold 0 4 1589 51 BulletPersistentManifold::~BulletPersistentManifold 0 0 10
/**
 *
 */
65
inline BulletPersistentManifold::~BulletPersistentManifold(void);

1300 9 get_node0 0 4 1589 35 BulletPersistentManifold::get_node0 0 1 545 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node0(void);

1301 9 get_node1 0 4 1589 35 BulletPersistentManifold::get_node1 0 1 546 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node1(void);

1302 23 get_num_manifold_points 0 4 1589 49 BulletPersistentManifold::get_num_manifold_points 0 1 547 10
/**
 *
 */
66
int BulletPersistentManifold::get_num_manifold_points(void) const;

1303 18 get_manifold_point 0 4 1589 44 BulletPersistentManifold::get_manifold_point 0 1 548 10
/**
 *
 */
81
BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const;

1304 30 get_contact_breaking_threshold 0 4 1589 56 BulletPersistentManifold::get_contact_breaking_threshold 0 1 549 10
/**
 *
 */
81
PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const;

1305 32 get_contact_processing_threshold 0 4 1589 58 BulletPersistentManifold::get_contact_processing_threshold 0 1 550 10
/**
 *
 */
83
PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const;

1306 14 clear_manifold 0 4 1589 40 BulletPersistentManifold::clear_manifold 0 1 551 10
/**
 *
 */
52
void BulletPersistentManifold::clear_manifold(void);

1307 24 BulletPersistentManifold 0 4 1589 50 BulletPersistentManifold::BulletPersistentManifold 0 1 544 10
/**
 *
 */
102
inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default;

1308 12 attach_ghost 0 4 1579 25 BulletWorld::attach_ghost 0 1 534 103
// Deprecated methods, will become private soon

/**
 * Deprecated!  Please use BulletWorld::attach
 */
54
void BulletWorld::attach_ghost(BulletGhostNode *node);

1309 12 remove_ghost 0 4 1579 25 BulletWorld::remove_ghost 0 1 535 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
54
void BulletWorld::remove_ghost(BulletGhostNode *node);

1310 17 attach_rigid_body 0 4 1579 30 BulletWorld::attach_rigid_body 0 1 536 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
63
void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node);

1311 17 remove_rigid_body 0 4 1579 30 BulletWorld::remove_rigid_body 0 1 537 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
63
void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node);

1312 16 attach_soft_body 0 4 1579 29 BulletWorld::attach_soft_body 0 1 538 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
61
void BulletWorld::attach_soft_body(BulletSoftBodyNode *node);

1313 16 remove_soft_body 0 4 1579 29 BulletWorld::remove_soft_body 0 1 539 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
61
void BulletWorld::remove_soft_body(BulletSoftBodyNode *node);

1314 16 attach_character 0 4 1579 29 BulletWorld::attach_character 0 1 540 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
76
void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node);

1315 16 remove_character 0 4 1579 29 BulletWorld::remove_character 0 1 541 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
76
void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node);

1316 17 remove_constraint 0 4 1579 30 BulletWorld::remove_constraint 0 1 542 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
66
void BulletWorld::remove_constraint(BulletConstraint *constraint);

1317 14 get_class_type 0 4 1579 27 BulletWorld::get_class_type 0 1 543 0
52
static TypeHandle BulletWorld::get_class_type(void);

1318 21 BulletConvexHullShape 0 4 1591 44 BulletConvexHullShape::BulletConvexHullShape 0 2 552 553 22
/**
 *
 */

/**
 *
 */
139
BulletConvexHullShape::BulletConvexHullShape(void);
inline BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy);

1319 10 operator = 0 4 1591 33 BulletConvexHullShape::operator = 0 1 554 0
81
inline void BulletConvexHullShape::operator =(BulletConvexHullShape const &copy);

1320 9 add_point 0 4 1591 32 BulletConvexHullShape::add_point 0 1 555 10
/**
 *
 */
56
void BulletConvexHullShape::add_point(LPoint3 const &p);

1321 9 add_array 0 4 1591 32 BulletConvexHullShape::add_array 0 1 556 10
/**
 *
 */
67
void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points);

1322 8 add_geom 0 4 1591 31 BulletConvexHullShape::add_geom 0 1 557 10
/**
 *
 */
117
void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = ::TransformState::make_identity());

1323 14 get_class_type 0 4 1591 37 BulletConvexHullShape::get_class_type 0 1 558 0
62
static TypeHandle BulletConvexHullShape::get_class_type(void);

1324 27 BulletConvexPointCloudShape 0 4 1592 56 BulletConvexPointCloudShape::BulletConvexPointCloudShape 0 3 559 560 561 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
336
BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0));
BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0));
inline BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy);

1325 10 operator = 0 4 1592 39 BulletConvexPointCloudShape::operator = 0 1 562 0
93
inline void BulletConvexPointCloudShape::operator =(BulletConvexPointCloudShape const &copy);

1326 14 get_num_points 0 4 1592 43 BulletConvexPointCloudShape::get_num_points 0 1 563 10
/**
 *
 */
67
inline int BulletConvexPointCloudShape::get_num_points(void) const;

1327 14 get_class_type 0 4 1592 43 BulletConvexPointCloudShape::get_class_type 0 1 564 0
68
static TypeHandle BulletConvexPointCloudShape::get_class_type(void);

1328 19 BulletCylinderShape 0 4 1593 40 BulletCylinderShape::BulletCylinderShape 0 3 565 566 567 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
287
BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up);
inline BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy);

1329 10 operator = 0 4 1593 31 BulletCylinderShape::operator = 0 1 568 0
77
inline void BulletCylinderShape::operator =(BulletCylinderShape const &copy);

1330 10 get_radius 0 4 1593 31 BulletCylinderShape::get_radius 0 1 569 10
/**
 *
 */
63
inline PN_stdfloat BulletCylinderShape::get_radius(void) const;

1331 31 get_half_extents_without_margin 0 4 1593 52 BulletCylinderShape::get_half_extents_without_margin 0 1 570 10
/**
 *
 */
82
inline LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const;

1332 28 get_half_extents_with_margin 0 4 1593 49 BulletCylinderShape::get_half_extents_with_margin 0 1 571 10
/**
 *
 */
79
inline LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const;

1333 14 get_class_type 0 4 1593 35 BulletCylinderShape::get_class_type 0 1 572 0
60
static TypeHandle BulletCylinderShape::get_class_type(void);

1334 24 BulletFilterCallbackData 0 4 1594 50 BulletFilterCallbackData::BulletFilterCallbackData 0 1 573 10
/**
 *
 */
94
inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1);

1335 10 get_node_0 0 4 1594 36 BulletFilterCallbackData::get_node_0 0 1 574 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_0(void) const;

1336 10 get_node_1 0 4 1594 36 BulletFilterCallbackData::get_node_1 0 1 575 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_1(void) const;

1337 11 set_collide 0 4 1594 37 BulletFilterCallbackData::set_collide 0 1 576 10
/**
 *
 */
64
inline void BulletFilterCallbackData::set_collide(bool collide);

1338 11 get_collide 0 4 1594 37 BulletFilterCallbackData::get_collide 0 1 577 10
/**
 *
 */
62
inline bool BulletFilterCallbackData::get_collide(void) const;

1339 14 get_class_type 0 4 1594 40 BulletFilterCallbackData::get_class_type 0 1 578 0
65
static TypeHandle BulletFilterCallbackData::get_class_type(void);

1340 25 ~BulletFilterCallbackData 0 4 1594 51 BulletFilterCallbackData::~BulletFilterCallbackData 0 0 0
58
BulletFilterCallbackData::~BulletFilterCallbackData(void);

1341 26 BulletRotationalLimitMotor 0 4 1595 54 BulletRotationalLimitMotor::BulletRotationalLimitMotor 0 1 579 22
/**
 *
 */

/**
 *
 */
95
BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy);

1342 27 ~BulletRotationalLimitMotor 0 4 1595 55 BulletRotationalLimitMotor::~BulletRotationalLimitMotor 0 0 10
/**
 *
 */
62
BulletRotationalLimitMotor::~BulletRotationalLimitMotor(void);

1343 17 set_motor_enabled 0 4 1595 45 BulletRotationalLimitMotor::set_motor_enabled 0 1 580 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_motor_enabled(bool enable);

1344 13 set_low_limit 0 4 1595 41 BulletRotationalLimitMotor::set_low_limit 0 1 581 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit);

1345 14 set_high_limit 0 4 1595 42 BulletRotationalLimitMotor::set_high_limit 0 1 582 10
/**
 *
 */
74
inline void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit);

1346 19 set_target_velocity 0 4 1595 47 BulletRotationalLimitMotor::set_target_velocity 0 1 583 10
/**
 *
 */
82
inline void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity);

1347 19 set_max_motor_force 0 4 1595 47 BulletRotationalLimitMotor::set_max_motor_force 0 1 584 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force);

1348 19 set_max_limit_force 0 4 1595 47 BulletRotationalLimitMotor::set_max_limit_force 0 1 585 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force);

1349 11 set_damping 0 4 1595 39 BulletRotationalLimitMotor::set_damping 0 1 586 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping);

1350 12 set_softness 0 4 1595 40 BulletRotationalLimitMotor::set_softness 0 1 587 10
/**
 *
 */
75
inline void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness);

1351 10 set_bounce 0 4 1595 38 BulletRotationalLimitMotor::set_bounce 0 1 588 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce);

1352 14 set_normal_cfm 0 4 1595 42 BulletRotationalLimitMotor::set_normal_cfm 0 1 589 10
/**
 *
 */
72
inline void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm);

1353 12 set_stop_cfm 0 4 1595 40 BulletRotationalLimitMotor::set_stop_cfm 0 1 590 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm);

1354 12 set_stop_erp 0 4 1595 40 BulletRotationalLimitMotor::set_stop_erp 0 1 591 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp);

1355 10 is_limited 0 4 1595 38 BulletRotationalLimitMotor::is_limited 0 1 592 10
/**
 *
 */
63
inline bool BulletRotationalLimitMotor::is_limited(void) const;

1356 17 get_motor_enabled 0 4 1595 45 BulletRotationalLimitMotor::get_motor_enabled 0 1 593 10
/**
 *
 */
70
inline bool BulletRotationalLimitMotor::get_motor_enabled(void) const;

1357 17 get_current_limit 0 4 1595 45 BulletRotationalLimitMotor::get_current_limit 0 1 594 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
69
inline int BulletRotationalLimitMotor::get_current_limit(void) const;

1358 17 get_current_error 0 4 1595 45 BulletRotationalLimitMotor::get_current_error 0 1 595 10
/**
 *
 */
77
inline PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const;

1359 20 get_current_position 0 4 1595 48 BulletRotationalLimitMotor::get_current_position 0 1 596 10
/**
 *
 */
80
inline PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const;

1360 23 get_accumulated_impulse 0 4 1595 51 BulletRotationalLimitMotor::get_accumulated_impulse 0 1 597 10
/**
 *
 */
83
inline PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const;

1361 29 BulletTranslationalLimitMotor 0 4 1596 60 BulletTranslationalLimitMotor::BulletTranslationalLimitMotor 0 1 598 22
/**
 *
 */

/**
 *
 */
104
BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy);

1362 30 ~BulletTranslationalLimitMotor 0 4 1596 61 BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor 0 0 10
/**
 *
 */
68
BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor(void);

1363 17 set_motor_enabled 0 4 1596 48 BulletTranslationalLimitMotor::set_motor_enabled 0 1 599 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable);

1364 13 set_low_limit 0 4 1596 44 BulletTranslationalLimitMotor::set_low_limit 0 1 600 10
/**
 *
 */
81
inline void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit);

1365 14 set_high_limit 0 4 1596 45 BulletTranslationalLimitMotor::set_high_limit 0 1 601 10
/**
 *
 */
82
inline void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit);

1366 19 set_target_velocity 0 4 1596 50 BulletTranslationalLimitMotor::set_target_velocity 0 1 602 10
/**
 *
 */
90
inline void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity);

1367 19 set_max_motor_force 0 4 1596 50 BulletTranslationalLimitMotor::set_max_motor_force 0 1 603 10
/**
 *
 */
87
inline void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force);

1368 11 set_damping 0 4 1596 42 BulletTranslationalLimitMotor::set_damping 0 1 604 10
/**
 *
 */
76
inline void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping);

1369 12 set_softness 0 4 1596 43 BulletTranslationalLimitMotor::set_softness 0 1 605 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness);

1370 15 set_restitution 0 4 1596 46 BulletTranslationalLimitMotor::set_restitution 0 1 606 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution);

1371 14 set_normal_cfm 0 4 1596 45 BulletTranslationalLimitMotor::set_normal_cfm 0 1 607 10
/**
 *
 */
80
inline void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm);

1372 12 set_stop_erp 0 4 1596 43 BulletTranslationalLimitMotor::set_stop_erp 0 1 608 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp);

1373 12 set_stop_cfm 0 4 1596 43 BulletTranslationalLimitMotor::set_stop_cfm 0 1 609 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm);

1374 10 is_limited 0 4 1596 41 BulletTranslationalLimitMotor::is_limited 0 1 610 10
/**
 *
 */
70
inline bool BulletTranslationalLimitMotor::is_limited(int axis) const;

1375 17 get_motor_enabled 0 4 1596 48 BulletTranslationalLimitMotor::get_motor_enabled 0 1 611 10
/**
 *
 */
77
inline bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const;

1376 17 get_current_limit 0 4 1596 48 BulletTranslationalLimitMotor::get_current_limit 0 1 612 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
76
inline int BulletTranslationalLimitMotor::get_current_limit(int axis) const;

1377 17 get_current_error 0 4 1596 48 BulletTranslationalLimitMotor::get_current_error 0 1 613 10
/**
 *
 */
77
inline LVector3 BulletTranslationalLimitMotor::get_current_error(void) const;

1378 16 get_current_diff 0 4 1596 47 BulletTranslationalLimitMotor::get_current_diff 0 1 614 10
/**
 *
 */
75
inline LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const;

1379 23 get_accumulated_impulse 0 4 1596 54 BulletTranslationalLimitMotor::get_accumulated_impulse 0 1 615 10
/**
 *
 */
83
inline LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const;

1380 23 BulletGenericConstraint 0 4 1597 48 BulletGenericConstraint::BulletGenericConstraint 0 2 616 617 22
/**
 *
 */

/**
 *
 */
333
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a);
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1381 8 get_axis 0 4 1597 33 BulletGenericConstraint::get_axis 0 1 618 23
// Geometry

/**
 *
 */
59
LVector3 BulletGenericConstraint::get_axis(int axis) const;

1382 9 get_pivot 0 4 1597 34 BulletGenericConstraint::get_pivot 0 1 619 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const;

1383 9 get_angle 0 4 1597 34 BulletGenericConstraint::get_angle 0 1 620 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_angle(int axis) const;

1384 16 set_linear_limit 0 4 1597 41 BulletGenericConstraint::set_linear_limit 0 1 621 20
// Limit

/**
 *
 */
92
void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1385 17 set_angular_limit 0 4 1597 42 BulletGenericConstraint::set_angular_limit 0 1 622 10
/**
 *
 */
93
void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1386 26 get_rotational_limit_motor 0 4 1597 51 BulletGenericConstraint::get_rotational_limit_motor 0 1 623 21
// Motors

/**
 *
 */
89
BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis);

1387 29 get_translational_limit_motor 0 4 1597 54 BulletGenericConstraint::get_translational_limit_motor 0 1 624 10
/**
 *
 */
91
BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void);

1388 10 set_frames 0 4 1597 35 BulletGenericConstraint::set_frames 0 1 625 21
// Frames

/**
 *
 */
97
void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1389 11 get_frame_a 0 4 1597 36 BulletGenericConstraint::get_frame_a 0 1 626 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const;

1390 11 get_frame_b 0 4 1597 36 BulletGenericConstraint::get_frame_b 0 1 627 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const;

1391 14 get_class_type 0 4 1597 39 BulletGenericConstraint::get_class_type 0 1 628 0
64
static TypeHandle BulletGenericConstraint::get_class_type(void);

1392 22 BulletHeightfieldShape 0 4 1598 46 BulletHeightfieldShape::BulletHeightfieldShape 0 3 629 630 631 540
/**
 *
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */
323
BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
inline BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy);

1393 10 operator = 0 4 1598 34 BulletHeightfieldShape::operator = 0 1 632 0
83
inline void BulletHeightfieldShape::operator =(BulletHeightfieldShape const &copy);

1394 27 set_use_diamond_subdivision 0 4 1598 51 BulletHeightfieldShape::set_use_diamond_subdivision 0 1 633 10
/**
 *
 */
75
void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true);

1395 14 get_class_type 0 4 1598 38 BulletHeightfieldShape::get_class_type 0 1 634 0
63
static TypeHandle BulletHeightfieldShape::get_class_type(void);

1396 21 from_collision_solids 0 4 1599 35 BulletHelper::from_collision_solids 0 1 637 31
// Collision shapes

/**
 *
 */
96
static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false);

1397 12 get_sb_index 0 4 1599 26 BulletHelper::get_sb_index 0 1 638 48
// Internal names

// Internal names

/**
 *
 */
73
static inline PointerTo< InternalName > BulletHelper::get_sb_index(void);

1398 11 get_sb_flip 0 4 1599 25 BulletHelper::get_sb_flip 0 1 639 10
/**
 *
 */
72
static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void);

1399 19 add_sb_index_column 0 4 1599 33 BulletHelper::add_sb_index_column 0 1 640 31
// Geom vertex data

/**
 *
 */
108
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format);

1400 18 add_sb_flip_column 0 4 1599 32 BulletHelper::add_sb_flip_column 0 1 641 10
/**
 *
 */
107
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format);

1401 20 make_geom_from_faces 0 4 1599 34 BulletHelper::make_geom_from_faces 0 1 642 25
// Geom utils

/**
 *
 */
149
static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = NULL, bool two_sided = false);

1402 20 make_geom_from_links 0 4 1599 34 BulletHelper::make_geom_from_links 0 1 643 10
/**
 *
 */
125
static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = NULL);

1403 24 make_texcoords_for_patch 0 4 1599 38 BulletHelper::make_texcoords_for_patch 0 1 644 10
/**
 *
 */
83
static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy);

1404 12 BulletHelper 0 4 1599 26 BulletHelper::BulletHelper 0 2 635 636 0
117
inline BulletHelper::BulletHelper(void) = default;
inline BulletHelper::BulletHelper(BulletHelper const &) = default;

1405 13 ~BulletHelper 0 4 1599 27 BulletHelper::~BulletHelper 0 0 0
34
BulletHelper::~BulletHelper(void);

1406 21 BulletHingeConstraint 0 4 1601 44 BulletHingeConstraint::BulletHingeConstraint 0 4 645 646 647 648 709
/**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */

/**
 * Constructs a hinge constraint which connects two rigid bodies.
 */

/**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */

/**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */
725
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false);

1407 15 get_hinge_angle 0 4 1601 38 BulletHingeConstraint::get_hinge_angle 0 1 649 66
/**
 * Returns the angle between node_a and node_b in degrees.
 */
57
PN_stdfloat BulletHingeConstraint::get_hinge_angle(void);

1408 15 get_lower_limit 0 4 1601 38 BulletHingeConstraint::get_lower_limit 0 1 650 54
/**
 * Returns the lower angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const;

1409 15 get_upper_limit 0 4 1601 38 BulletHingeConstraint::get_upper_limit 0 1 651 54
/**
 * Returns the upper angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const;

1410 16 get_angular_only 0 4 1601 39 BulletHingeConstraint::get_angular_only 0 1 652 10
/**
 *
 */
57
bool BulletHingeConstraint::get_angular_only(void) const;

1411 16 set_angular_only 0 4 1601 39 BulletHingeConstraint::set_angular_only 0 1 653 10
/**
 *
 */
57
void BulletHingeConstraint::set_angular_only(bool value);

1412 9 set_limit 0 4 1601 32 BulletHingeConstraint::set_limit 0 1 654 65
/**
 * Sets the lower and upper rotational limits in degrees.
 */
171
void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

1413 8 set_axis 0 4 1601 31 BulletHingeConstraint::set_axis 0 1 655 63
/**
 * Sets the hinge's rotation axis in world coordinates.
 */
59
void BulletHingeConstraint::set_axis(LVector3 const &axis);

1414 20 enable_angular_motor 0 4 1601 43 BulletHingeConstraint::enable_angular_motor 0 1 656 261
/**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */
116
void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse);

1415 12 enable_motor 0 4 1601 35 BulletHingeConstraint::enable_motor 0 1 657 10
/**
 *
 */
54
void BulletHingeConstraint::enable_motor(bool enable);

1416 21 set_max_motor_impulse 0 4 1601 44 BulletHingeConstraint::set_max_motor_impulse 0 1 658 96
/**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */
75
void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

1417 16 set_motor_target 0 4 1601 39 BulletHingeConstraint::set_motor_target 0 2 659 660 22
/**
 *
 */

/**
 *
 */
174
void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt);
void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt);

1418 10 set_frames 0 4 1601 33 BulletHingeConstraint::set_frames 0 1 661 10
/**
 *
 */
95
void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1419 11 get_frame_a 0 4 1601 34 BulletHingeConstraint::get_frame_a 0 1 662 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const;

1420 11 get_frame_b 0 4 1601 34 BulletHingeConstraint::get_frame_b 0 1 663 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const;

1421 14 get_class_type 0 4 1601 37 BulletHingeConstraint::get_class_type 0 1 664 0
62
static TypeHandle BulletHingeConstraint::get_class_type(void);

1422 23 BulletMinkowskiSumShape 0 4 1602 48 BulletMinkowskiSumShape::BulletMinkowskiSumShape 0 2 665 666 22
/**
 *
 */

/**
 *
 */
199
BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b);
inline BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy);

1423 10 operator = 0 4 1602 35 BulletMinkowskiSumShape::operator = 0 1 667 0
85
inline void BulletMinkowskiSumShape::operator =(BulletMinkowskiSumShape const &copy);

1424 15 set_transform_a 0 4 1602 40 BulletMinkowskiSumShape::set_transform_a 0 1 668 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts);

1425 15 set_transform_b 0 4 1602 40 BulletMinkowskiSumShape::set_transform_b 0 1 669 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts);

1426 15 get_transform_a 0 4 1602 40 BulletMinkowskiSumShape::get_transform_a 0 1 670 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const;

1427 15 get_transform_b 0 4 1602 40 BulletMinkowskiSumShape::get_transform_b 0 1 671 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const;

1428 11 get_shape_a 0 4 1602 36 BulletMinkowskiSumShape::get_shape_a 0 1 672 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const;

1429 11 get_shape_b 0 4 1602 36 BulletMinkowskiSumShape::get_shape_b 0 1 673 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const;

1430 10 get_margin 0 4 1602 35 BulletMinkowskiSumShape::get_margin 0 1 674 10
/**
 *
 */
67
inline PN_stdfloat BulletMinkowskiSumShape::get_margin(void) const;

1431 14 get_class_type 0 4 1602 39 BulletMinkowskiSumShape::get_class_type 0 1 675 0
64
static TypeHandle BulletMinkowskiSumShape::get_class_type(void);

1432 22 BulletMultiSphereShape 0 4 1605 46 BulletMultiSphereShape::BulletMultiSphereShape 0 2 676 677 22
/**
 *
 */

/**
 *
 */
194
BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii);
inline BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy);

1433 10 operator = 0 4 1605 34 BulletMultiSphereShape::operator = 0 1 678 0
83
inline void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy);

1434 16 get_sphere_count 0 4 1605 40 BulletMultiSphereShape::get_sphere_count 0 1 679 10
/**
 *
 */
64
inline int BulletMultiSphereShape::get_sphere_count(void) const;

1435 14 get_sphere_pos 0 4 1605 38 BulletMultiSphereShape::get_sphere_pos 0 1 680 10
/**
 *
 */
71
inline LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const;

1436 17 get_sphere_radius 0 4 1605 41 BulletMultiSphereShape::get_sphere_radius 0 1 681 10
/**
 *
 */
78
inline PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const;

1437 14 get_class_type 0 4 1605 38 BulletMultiSphereShape::get_class_type 0 1 682 0
63
static TypeHandle BulletMultiSphereShape::get_class_type(void);

1438 16 BulletPlaneShape 0 4 1606 34 BulletPlaneShape::BulletPlaneShape 0 2 683 684 22
/**
 *
 */

/**
 *
 */
154
BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant);
inline BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy);

1439 10 operator = 0 4 1606 28 BulletPlaneShape::operator = 0 1 685 0
71
inline void BulletPlaneShape::operator =(BulletPlaneShape const &copy);

1440 16 get_plane_normal 0 4 1606 34 BulletPlaneShape::get_plane_normal 0 1 686 10
/**
 *
 */
63
inline LVector3 BulletPlaneShape::get_plane_normal(void) const;

1441 18 get_plane_constant 0 4 1606 36 BulletPlaneShape::get_plane_constant 0 1 687 10
/**
 *
 */
68
inline PN_stdfloat BulletPlaneShape::get_plane_constant(void) const;

1442 15 make_from_solid 0 4 1606 33 BulletPlaneShape::make_from_solid 0 1 688 10
/**
 *
 */
88
static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid);

1443 14 get_class_type 0 4 1606 32 BulletPlaneShape::get_class_type 0 1 689 0
57
static TypeHandle BulletPlaneShape::get_class_type(void);

1444 22 BulletSliderConstraint 0 4 1607 46 BulletSliderConstraint::BulletSliderConstraint 0 2 690 691 22
/**
 *
 */

/**
 *
 */
328
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a);
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1445 14 get_linear_pos 0 4 1607 38 BulletSliderConstraint::get_linear_pos 0 1 692 10
/**
 *
 */
63
PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const;

1446 15 get_angular_pos 0 4 1607 39 BulletSliderConstraint::get_angular_pos 0 1 693 10
/**
 *
 */
64
PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const;

1447 22 get_lower_linear_limit 0 4 1607 46 BulletSliderConstraint::get_lower_linear_limit 0 1 694 32
// Limits

// Limits

/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const;

1448 22 get_upper_linear_limit 0 4 1607 46 BulletSliderConstraint::get_upper_linear_limit 0 1 695 10
/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const;

1449 23 get_lower_angular_limit 0 4 1607 47 BulletSliderConstraint::get_lower_angular_limit 0 1 696 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const;

1450 23 get_upper_angular_limit 0 4 1607 47 BulletSliderConstraint::get_upper_angular_limit 0 1 697 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const;

1451 22 set_lower_linear_limit 0 4 1607 46 BulletSliderConstraint::set_lower_linear_limit 0 1 698 10
/**
 *
 */
71
void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value);

1452 22 set_upper_linear_limit 0 4 1607 46 BulletSliderConstraint::set_upper_linear_limit 0 1 699 10
/**
 *
 */
71
void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value);

1453 23 set_lower_angular_limit 0 4 1607 47 BulletSliderConstraint::set_lower_angular_limit 0 1 700 10
/**
 *
 */
72
void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value);

1454 23 set_upper_angular_limit 0 4 1607 47 BulletSliderConstraint::set_upper_angular_limit 0 1 701 10
/**
 *
 */
72
void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value);

1455 24 set_powered_linear_motor 0 4 1607 48 BulletSliderConstraint::set_powered_linear_motor 0 1 702 44
// Linear motor

// Linear motor

/**
 *
 */
63
void BulletSliderConstraint::set_powered_linear_motor(bool on);

1456 32 set_target_linear_motor_velocity 0 4 1607 56 BulletSliderConstraint::set_target_linear_motor_velocity 0 1 703 10
/**
 *
 */
91
void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity);

1457 26 set_max_linear_motor_force 0 4 1607 50 BulletSliderConstraint::set_max_linear_motor_force 0 1 704 10
/**
 *
 */
79
void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force);

1458 24 get_powered_linear_motor 0 4 1607 48 BulletSliderConstraint::get_powered_linear_motor 0 1 705 10
/**
 *
 */
66
bool BulletSliderConstraint::get_powered_linear_motor(void) const;

1459 32 get_target_linear_motor_velocity 0 4 1607 56 BulletSliderConstraint::get_target_linear_motor_velocity 0 1 706 10
/**
 *
 */
81
PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const;

1460 26 get_max_linear_motor_force 0 4 1607 50 BulletSliderConstraint::get_max_linear_motor_force 0 1 707 10
/**
 *
 */
75
PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const;

1461 25 set_powered_angular_motor 0 4 1607 49 BulletSliderConstraint::set_powered_angular_motor 0 1 708 46
// Angular motor

// Angular motor

/**
 *
 */
64
void BulletSliderConstraint::set_powered_angular_motor(bool on);

1462 33 set_target_angular_motor_velocity 0 4 1607 57 BulletSliderConstraint::set_target_angular_motor_velocity 0 1 709 10
/**
 *
 */
92
void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity);

1463 27 set_max_angular_motor_force 0 4 1607 51 BulletSliderConstraint::set_max_angular_motor_force 0 1 710 10
/**
 *
 */
80
void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force);

1464 25 get_powered_angular_motor 0 4 1607 49 BulletSliderConstraint::get_powered_angular_motor 0 1 711 10
/**
 *
 */
67
bool BulletSliderConstraint::get_powered_angular_motor(void) const;

1465 33 get_target_angular_motor_velocity 0 4 1607 57 BulletSliderConstraint::get_target_angular_motor_velocity 0 1 712 10
/**
 *
 */
82
PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const;

1466 27 get_max_angular_motor_force 0 4 1607 51 BulletSliderConstraint::get_max_angular_motor_force 0 1 713 10
/**
 *
 */
76
PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const;

1467 10 set_frames 0 4 1607 34 BulletSliderConstraint::set_frames 0 1 714 21
// Frames

/**
 *
 */
96
void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1468 11 get_frame_a 0 4 1607 35 BulletSliderConstraint::get_frame_a 0 1 715 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const;

1469 11 get_frame_b 0 4 1607 35 BulletSliderConstraint::get_frame_b 0 1 716 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const;

1470 14 get_class_type 0 4 1607 38 BulletSliderConstraint::get_class_type 0 1 717 0
63
static TypeHandle BulletSliderConstraint::get_class_type(void);

1471 18 upcast_to_IControl 0 12 1608 41 BulletSoftBodyControl::upcast_to_IControl 0 1 724 45
upcast from BulletSoftBodyControl to IControl
78
btSoftBody::AJoint::IControl *BulletSoftBodyControl::upcast_to_IControl(void);

1472 42 downcast_IControl_to_BulletSoftBodyControl 0 8 0 42 downcast_IControl_to_BulletSoftBodyControl 0 1 725 47
downcast from IControl to BulletSoftBodyControl
102
BulletSoftBodyControl *downcast_IControl_to_BulletSoftBodyControl(btSoftBody::AJoint::IControl *this);

1473 21 BulletSoftBodyControl 0 4 1608 44 BulletSoftBodyControl::BulletSoftBodyControl 0 2 718 719 10
/**
 *
 */
145
BulletSoftBodyControl::BulletSoftBodyControl(void);
inline BulletSoftBodyControl::BulletSoftBodyControl(BulletSoftBodyControl const &) = default;

1474 22 ~BulletSoftBodyControl 0 6 1608 45 BulletSoftBodyControl::~BulletSoftBodyControl 0 0 10
/**
 *
 */
60
virtual BulletSoftBodyControl::~BulletSoftBodyControl(void);

1475 8 set_goal 0 4 1608 31 BulletSoftBodyControl::set_goal 0 1 720 20
// Motor

/**
 *
 */
62
inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal);

1476 14 set_max_torque 0 4 1608 37 BulletSoftBodyControl::set_max_torque 0 1 721 10
/**
 *
 */
73
inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque);

1477 9 set_angle 0 4 1608 32 BulletSoftBodyControl::set_angle 0 1 722 20
// Steer

/**
 *
 */
64
inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle);

1478 8 set_sign 0 4 1608 31 BulletSoftBodyControl::set_sign 0 1 723 10
/**
 *
 */
62
inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign);

1479 8 get_body 0 4 1612 29 BulletSoftBodyShape::get_body 0 1 726 10
/**
 *
 */
62
BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const;

1480 14 get_class_type 0 4 1612 35 BulletSoftBodyShape::get_class_type 0 1 727 0
60
static TypeHandle BulletSoftBodyShape::get_class_type(void);

1481 17 BulletSphereShape 0 4 1613 36 BulletSphereShape::BulletSphereShape 0 2 728 729 22
/**
 *
 */

/**
 *
 */
133
BulletSphereShape::BulletSphereShape(PN_stdfloat radius);
inline BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy);

1482 10 operator = 0 4 1613 29 BulletSphereShape::operator = 0 1 730 0
73
inline void BulletSphereShape::operator =(BulletSphereShape const &copy);

1483 10 get_radius 0 4 1613 29 BulletSphereShape::get_radius 0 1 731 10
/**
 *
 */
61
inline PN_stdfloat BulletSphereShape::get_radius(void) const;

1484 15 make_from_solid 0 4 1613 34 BulletSphereShape::make_from_solid 0 1 732 10
/**
 *
 */
91
static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid);

1485 14 get_class_type 0 4 1613 33 BulletSphereShape::get_class_type 0 1 733 0
58
static TypeHandle BulletSphereShape::get_class_type(void);

1486 25 BulletSphericalConstraint 0 4 1614 52 BulletSphericalConstraint::BulletSphericalConstraint 0 2 734 735 22
/**
 *
 */

/**
 *
 */
284
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a);
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b);

1487 11 set_pivot_a 0 4 1614 38 BulletSphericalConstraint::set_pivot_a 0 1 736 32
// Pivots

// Pivots

/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a);

1488 11 set_pivot_b 0 4 1614 38 BulletSphericalConstraint::set_pivot_b 0 1 737 10
/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b);

1489 14 get_pivot_in_a 0 4 1614 41 BulletSphericalConstraint::get_pivot_in_a 0 1 738 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const;

1490 14 get_pivot_in_b 0 4 1614 41 BulletSphericalConstraint::get_pivot_in_b 0 1 739 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const;

1491 14 get_class_type 0 4 1614 41 BulletSphericalConstraint::get_class_type 0 1 740 0
66
static TypeHandle BulletSphericalConstraint::get_class_type(void);

1492 22 BulletTickCallbackData 0 4 1615 46 BulletTickCallbackData::BulletTickCallbackData 0 1 741 10
/**
 *
 */
73
inline BulletTickCallbackData::BulletTickCallbackData(btScalar timestep);

1493 12 get_timestep 0 4 1615 36 BulletTickCallbackData::get_timestep 0 1 742 10
/**
 *
 */
68
inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const;

1494 14 get_class_type 0 4 1615 38 BulletTickCallbackData::get_class_type 0 1 743 0
63
static TypeHandle BulletTickCallbackData::get_class_type(void);

1495 23 ~BulletTickCallbackData 0 4 1615 47 BulletTickCallbackData::~BulletTickCallbackData 0 0 0
54
BulletTickCallbackData::~BulletTickCallbackData(void);

1496 18 BulletTriangleMesh 0 4 1616 38 BulletTriangleMesh::BulletTriangleMesh 0 1 744 10
/**
 *
 */
45
BulletTriangleMesh::BulletTriangleMesh(void);

1497 12 add_triangle 0 4 1616 32 BulletTriangleMesh::add_triangle 0 1 745 347
/**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
135
void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false);

1498 9 add_array 0 4 1616 29 BulletTriangleMesh::add_array 0 1 746 452
/**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
128
void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false);

1499 8 add_geom 0 4 1616 28 BulletTriangleMesh::add_geom 0 1 747 461
/**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
154
void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = ::TransformState::make_identity());

1500 20 set_welding_distance 0 4 1616 40 BulletTriangleMesh::set_welding_distance 0 1 748 254
/**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */
68
void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance);

1501 11 preallocate 0 4 1616 31 BulletTriangleMesh::preallocate 0 1 749 239
/**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */
69
void BulletTriangleMesh::preallocate(int num_verts, int num_indices);

1502 17 get_num_triangles 0 4 1616 37 BulletTriangleMesh::get_num_triangles 0 1 750 65
/**
 * Returns the number of triangles in this triangle mesh.
 */
54
int BulletTriangleMesh::get_num_triangles(void) const;

1503 20 get_welding_distance 0 4 1616 40 BulletTriangleMesh::get_welding_distance 0 1 751 110
/**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */
65
PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const;

1504 6 output 0 6 1616 26 BulletTriangleMesh::output 0 1 752 10
/**
 *
 */
60
virtual void BulletTriangleMesh::output(ostream &out) const;

1505 5 write 0 6 1616 25 BulletTriangleMesh::write 0 1 753 10
/**
 *
 */
77
virtual void BulletTriangleMesh::write(ostream &out, int indent_level) const;

1506 14 get_class_type 0 4 1616 34 BulletTriangleMesh::get_class_type 0 1 754 0
59
static TypeHandle BulletTriangleMesh::get_class_type(void);

1507 23 BulletTriangleMeshShape 0 4 1617 48 BulletTriangleMeshShape::BulletTriangleMeshShape 0 2 755 756 145
/**
 *
 */

/**
 * Only used by make_from_bam.
 */

/**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */
222
BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true);
inline BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy);

1508 10 operator = 0 4 1617 35 BulletTriangleMeshShape::operator = 0 1 757 0
85
inline void BulletTriangleMeshShape::operator =(BulletTriangleMeshShape const &copy);

1509 10 refit_tree 0 4 1617 35 BulletTriangleMeshShape::refit_tree 0 1 758 10
/**
 *
 */
91
void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max);

1510 9 is_static 0 4 1617 34 BulletTriangleMeshShape::is_static 0 1 759 10
/**
 *
 */
59
inline bool BulletTriangleMeshShape::is_static(void) const;

1511 10 is_dynamic 0 4 1617 35 BulletTriangleMeshShape::is_dynamic 0 1 760 10
/**
 *
 */
60
inline bool BulletTriangleMeshShape::is_dynamic(void) const;

1512 14 get_class_type 0 4 1617 39 BulletTriangleMeshShape::get_class_type 0 1 761 0
64
static TypeHandle BulletTriangleMeshShape::get_class_type(void);

763
1 0 0 7 27 1618 774 0 0 0 
2 0 0 7 27 1618 774 0 0 1 6 param0 0 1619  
3 0 0 7 5 1618 774 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
4 0 0 7 6 1515 0 0 10 /**
 *
 */ 1 4 this 3 1619  
5 0 0 7 7 1621 0 0 10 /**
 *
 */ 1 4 this 3 1619  
6 0 0 7 8 1622 0 0 10 /**
 *
 */ 1 4 this 3 1619  
7 0 0 6 9 1521 0 0 10 /**
 *
 */ 1 4 this 3 1619  
8 0 0 6 10 1523 0 0 10 /**
 *
 */ 1 4 this 3 1619  
9 0 0 6 11 1523 0 0 10 /**
 *
 */ 1 4 this 3 1619  
10 0 0 7 34 1623 784 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
11 0 0 7 35 1621 0 0 10 /**
 *
 */ 1 4 this 3 1624  
12 0 0 7 36 1621 0 0 10 /**
 *
 */ 1 4 this 3 1624  
13 0 0 6 37 1529 0 0 10 /**
 *
 */ 1 4 this 3 1624  
14 0 0 6 38 1521 0 0 10 /**
 *
 */ 1 4 this 3 1624  
15 0 0 6 39 1523 0 0 10 /**
 *
 */ 1 4 this 3 1624  
16 0 0 7 40 1619 0 0 10 /**
 *
 */ 2 4 this 3 1624  3 idx 1 1523  
17 0 0 6 32 1626 0 0 0 1 4 this 3 1623  
18 0 0 6 33 1623 0 0 0 2 4 this 3 1626  4 this 1 1626  
19 0 0 6 49 1529 0 0 10 /**
 *
 */ 1 4 this 3 1603  
20 0 0 6 50 1529 0 0 10 /**
 *
 */ 1 4 this 3 1603  
21 0 0 6 51 1529 0 0 10 /**
 *
 */ 1 4 this 3 1603  
22 0 0 6 52 1529 0 0 10 /**
 *
 */ 1 4 this 3 1603  
23 0 0 6 53 1529 0 0 10 /**
 *
 */ 1 4 this 3 1603  
24 0 0 6 54 1529 0 0 10 /**
 *
 */ 1 4 this 3 1603  
25 0 0 6 55 1529 0 0 10 /**
 *
 */ 1 4 this 3 1603  
26 0 0 4 56 1627 0 0 10 /**
 *
 */ 2 4 this 3 1536  6 margin 1 1521  
27 0 0 6 57 1628 0 0 10 /**
 *
 */ 1 4 this 3 1603  
28 0 0 6 58 1521 0 0 10 /**
 *
 */ 1 4 this 3 1603  
29 0 0 7 59 1629 0 0 62 /**
 * Returns the current bounds of this collision shape.
 */ 1 4 this 3 1603  
30 0 0 7 75 1631 0 0 0 0 
31 0 0 7 77 1631 0 0 0 0 
32 0 0 4 80 1627 0 0 9 // Shapes 3 4 this 3 1632  5 shape 1 1536  5 xform 1 1633  
33 0 0 4 81 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  5 shape 1 1536  
34 0 0 6 82 1523 0 0 10 /**
 *
 */ 1 4 this 3 1636  
35 0 0 7 83 1536 0 0 10 /**
 *
 */ 2 4 this 3 1636  3 idx 1 1523  
36 0 0 7 85 1621 0 0 10 /**
 *
 */ 2 4 this 3 1636  3 idx 1 1523  
37 0 0 7 86 1638 0 0 10 /**
 *
 */ 2 4 this 3 1636  3 idx 1 1523  
38 0 0 7 87 1633 0 0 10 /**
 *
 */ 2 4 this 3 1636  3 idx 1 1523  
39 0 0 7 88 1629 0 0 81 /**
 * Returns the current bounds of all collision shapes owned by this body.
 */ 1 4 this 3 1636  
40 0 0 4 89 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  5 cnode 1 1639  
41 0 0 6 90 1529 0 0 23 // Static and kinematic 1 4 this 3 1636  
42 0 0 6 91 1529 0 0 10 /**
 *
 */ 1 4 this 3 1636  
43 0 0 4 92 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  5 value 1 1529  
44 0 0 4 93 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  5 value 1 1529  
45 0 0 4 94 1627 0 0 11 // Contacts 2 4 this 3 1632  4 mask 1 1641  
46 0 0 4 95 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  5 value 1 1529  
47 0 0 6 96 1529 0 0 10 /**
 *
 */ 1 4 this 3 1636  
48 0 0 4 97 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  5 value 1 1529  
49 0 0 6 98 1529 0 0 10 /**
 *
 */ 1 4 this 3 1636  
50 0 0 6 99 1529 0 0 10 /**
 *
 */ 2 4 this 3 1632  4 node 1 1515  
51 0 0 6 100 1529 0 0 10 /**
 *
 */ 1 4 this 3 1636  
52 0 0 6 101 1521 0 0 10 /**
 *
 */ 1 4 this 3 1636  
53 0 0 4 102 1627 0 0 106 /**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */ 2 4 this 3 1632  9 threshold 1 1521  
54 0 0 6 103 1529 0 0 15 // Deactivation 1 4 this 3 1636  
55 0 0 4 104 1627 0 0 10 /**
 *
 */ 3 4 this 3 1632  6 active 1 1529  5 force 1 1529  
56 0 0 4 105 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  6 active 1 1529  
57 0 0 4 106 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  2 dt 1 1521  
58 0 0 6 107 1521 0 0 10 /**
 *
 */ 1 4 this 3 1636  
59 0 0 4 108 1627 0 0 163 /**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */ 2 4 this 3 1632  7 enabled 1 1529  
60 0 0 6 109 1529 0 0 10 /**
 *
 */ 1 4 this 3 1636  
61 0 0 4 110 1627 0 0 132 /**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */ 2 4 this 3 1632  7 enabled 1 1645  
62 0 0 6 111 1529 0 0 141 /**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */ 1 4 this 3 1636  
63 0 0 6 112 1521 0 0 27 // Friction and Restitution 1 4 this 3 1636  
64 0 0 4 113 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  11 restitution 1 1521  
65 0 0 6 114 1521 0 0 10 /**
 *
 */ 1 4 this 3 1636  
66 0 0 4 115 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  8 friction 1 1521  
67 0 0 6 116 1529 0 0 10 /**
 *
 */ 1 4 this 3 1636  
68 0 0 4 117 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  8 friction 1 1646  
69 0 0 7 118 1648 0 0 10 /**
 *
 */ 1 4 this 3 1636  
70 0 0 6 119 1521 0 0 10 /**
 *
 */ 1 4 this 3 1636  
71 0 0 6 120 1521 0 0 10 /**
 *
 */ 1 4 this 3 1636  
72 0 0 4 121 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  6 radius 1 1521  
73 0 0 4 122 1627 0 0 10 /**
 *
 */ 2 4 this 3 1632  9 threshold 1 1521  
74 0 0 4 123 1627 0 0 216 /**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */ 1 4 this 3 1632  
75 0 0 7 150 1631 0 0 0 0 
76 0 0 7 152 1651 0 0 10 /**
 *
 */ 1 4 copy 1 1649  
77 0 0 7 152 1651 0 0 10 /**
 *
 */ 1 11 halfExtents 1 1646  
78 0 0 7 153 1651 0 0 0 2 4 this 3 1651  4 copy 1 1649  
79 0 0 7 154 1648 0 0 10 /**
 *
 */ 1 4 this 3 1649  
80 0 0 7 155 1648 0 0 10 /**
 *
 */ 1 4 this 3 1649  
81 0 0 7 156 1651 0 0 10 /**
 *
 */ 1 5 solid 1 1652  
82 0 0 7 159 1631 0 0 0 0 
83 0 0 7 161 1657 0 0 10 /**
 *
 */ 1 4 copy 1 1655  
84 0 0 7 161 1657 0 0 10 /**
 *
 */ 3 6 radius 1 1521  6 height 1 1521  2 up 1 1513  
85 0 0 7 162 1657 0 0 0 2 4 this 3 1657  4 copy 1 1655  
86 0 0 6 163 1521 0 0 10 /**
 *
 */ 1 4 this 3 1655  
87 0 0 6 164 1521 0 0 10 /**
 *
 */ 1 4 this 3 1655  
88 0 0 7 167 1631 0 0 0 0 
89 0 0 7 169 1658 798 0 10 /**
 *
 */ 3 5 shape 1 1536  11 step_height 1 1521  4 name 1 1628  
90 0 0 4 170 1627 0 0 10 /**
 *
 */ 3 4 this 3 1658  8 velocity 1 1659  8 is_local 1 1529  
91 0 0 4 171 1627 0 0 10 /**
 *
 */ 2 4 this 3 1658  5 omega 1 1521  
92 0 0 7 172 1536 0 0 10 /**
 *
 */ 1 4 this 3 1661  
93 0 0 4 173 1627 0 0 10 /**
 *
 */ 2 4 this 3 1658  7 gravity 1 1521  
94 0 0 6 174 1521 0 0 10 /**
 *
 */ 1 4 this 3 1661  
95 0 0 4 175 1627 0 0 10 /**
 *
 */ 2 4 this 3 1658  10 fall_speed 1 1521  
96 0 0 4 176 1627 0 0 10 /**
 *
 */ 2 4 this 3 1658  10 jump_speed 1 1521  
97 0 0 4 177 1627 0 0 10 /**
 *
 */ 2 4 this 3 1658  15 max_jump_height 1 1521  
98 0 0 4 178 1627 0 0 10 /**
 *
 */ 2 4 this 3 1658  9 max_slope 1 1521  
99 0 0 6 179 1521 0 0 10 /**
 *
 */ 1 4 this 3 1661  
100 0 0 4 180 1627 0 0 10 /**
 *
 */ 2 4 this 3 1658  5 value 1 1529  
101 0 0 6 181 1529 0 0 10 /**
 *
 */ 1 4 this 3 1661  
102 0 0 6 182 1529 0 0 10 /**
 *
 */ 1 4 this 3 1661  
103 0 0 4 183 1627 0 0 10 /**
 *
 */ 1 4 this 3 1658  
104 0 0 7 188 1631 0 0 0 0 
105 0 0 7 211 1665 883 0 0 1 6 param0 0 1663  
106 0 0 7 193 1665 883 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
107 0 0 7 194 1621 0 0 10 /**
 *
 */ 1 4 this 3 1663  
108 0 0 7 195 1621 0 0 10 /**
 *
 */ 1 4 this 3 1663  
109 0 0 6 196 1529 0 0 10 /**
 *
 */ 1 4 this 3 1663  
110 0 0 7 197 1515 0 0 10 /**
 *
 */ 1 4 this 3 1663  
111 0 0 7 198 1621 0 0 10 /**
 *
 */ 1 4 this 3 1663  
112 0 0 7 199 1622 0 0 10 /**
 *
 */ 1 4 this 3 1663  
113 0 0 6 200 1521 0 0 10 /**
 *
 */ 1 4 this 3 1663  
114 0 0 6 201 1523 0 0 10 /**
 *
 */ 1 4 this 3 1663  
115 0 0 6 202 1523 0 0 10 /**
 *
 */ 1 4 this 3 1663  
116 0 0 6 191 1666 0 0 0 1 4 this 3 1665  
117 0 0 6 192 1665 0 0 0 2 4 this 3 1666  4 this 1 1666  
118 0 0 7 231 1669 895 0 0 1 6 param0 0 1667  
119 0 0 7 217 1669 895 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
120 0 0 7 218 1621 0 0 10 /**
 *
 */ 1 4 this 3 1667  
121 0 0 7 219 1621 0 0 10 /**
 *
 */ 1 4 this 3 1667  
122 0 0 6 220 1529 0 0 10 /**
 *
 */ 1 4 this 3 1667  
123 0 0 7 221 1515 0 0 10 /**
 *
 */ 1 4 this 3 1667  
124 0 0 7 222 1621 0 0 10 /**
 *
 */ 1 4 this 3 1667  
125 0 0 7 223 1622 0 0 10 /**
 *
 */ 1 4 this 3 1667  
126 0 0 6 224 1521 0 0 10 /**
 *
 */ 1 4 this 3 1667  
127 0 0 6 215 1670 0 0 0 1 4 this 3 1669  
128 0 0 6 216 1669 0 0 0 2 4 this 3 1670  4 this 1 1670  
129 0 0 7 234 1673 0 0 10 /**
 *
 */ 1 4 copy 1 1671  
130 0 0 7 234 1673 0 0 10 /**
 *
 */ 3 6 radius 1 1521  6 height 1 1521  2 up 1 1513  
131 0 0 7 235 1673 0 0 0 2 4 this 3 1673  4 copy 1 1671  
132 0 0 6 236 1521 0 0 10 /**
 *
 */ 1 4 this 3 1671  
133 0 0 6 237 1521 0 0 10 /**
 *
 */ 1 4 this 3 1671  
134 0 0 7 240 1631 0 0 0 0 
135 0 0 7 243 1553 0 0 10 /**
 *
 */ 1 4 this 3 1587  
136 0 0 7 244 1553 0 0 10 /**
 *
 */ 1 4 this 3 1587  
137 0 0 4 245 1627 0 0 10 /**
 *
 */ 2 4 this 3 1587  5 value 1 1529  
138 0 0 4 246 1627 0 0 10 /**
 *
 */ 2 4 this 3 1587  4 size 1 1521  
139 0 0 6 247 1521 0 0 10 /**
 *
 */ 1 4 this 3 1587  
140 0 0 6 248 1521 0 0 10 /**
 *
 */ 1 4 this 3 1674  
141 0 0 4 249 1627 0 0 212 /**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */ 2 4 this 3 1587  9 threshold 1 1521  
142 0 0 6 250 1521 0 0 73 /**
 * Returns the applied impluse limit for breaking the constraint.
 */ 1 4 this 3 1674  
143 0 0 4 251 1627 0 0 10 /**
 *
 */ 2 4 this 3 1587  7 enabled 1 1529  
144 0 0 6 252 1529 0 0 53 /**
 * Returns TRUE if the constraint is enabled.
 */ 1 4 this 3 1674  
145 0 0 4 254 1627 0 0 10 /**
 *
 */ 4 4 this 3 1587  3 num 1 1552  5 value 1 1521  4 axis 1 1523  
146 0 0 6 255 1521 0 0 10 /**
 *
 */ 3 4 this 3 1587  3 num 1 1552  4 axis 1 1523  
147 0 0 7 319 1631 0 0 0 0 
148 0 0 7 259 1553 0 0 10 /**
 *
 */ 1 4 name 1 1628  
149 0 0 4 260 1627 0 0 257 /**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */ 2 4 this 3 1553  4 mass 1 1521  
150 0 0 6 261 1521 0 0 128 /**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */ 1 4 this 3 1676  
151 0 0 6 262 1521 0 0 52 /**
 * Returns the inverse mass of a rigid body.
 */ 1 4 this 3 1676  
152 0 0 4 263 1627 0 0 591 /**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */ 2 4 this 3 1553  7 inertia 1 1646  
153 0 0 7 264 1622 0 0 174 /**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */ 1 4 this 3 1676  
154 0 0 7 265 1622 0 0 10 /**
 *
 */ 1 4 this 3 1676  
155 0 0 7 266 1678 0 0 10 /**
 *
 */ 1 4 this 3 1676  
156 0 0 7 267 1622 0 0 11 // Velocity 1 4 this 3 1676  
157 0 0 7 268 1622 0 0 10 /**
 *
 */ 1 4 this 3 1676  
158 0 0 4 269 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  8 velocity 1 1659  
159 0 0 4 270 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  8 velocity 1 1659  
160 0 0 6 271 1521 0 0 10 // Damping 1 4 this 3 1676  
161 0 0 6 272 1521 0 0 10 /**
 *
 */ 1 4 this 3 1676  
162 0 0 4 273 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  5 value 1 1521  
163 0 0 4 274 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  5 value 1 1521  
164 0 0 4 275 1627 0 0 9 // Forces 1 4 this 3 1553  
165 0 0 4 276 1627 0 0 10 /**
 *
 */ 3 4 this 3 1553  5 force 1 1659  3 pos 1 1679  
166 0 0 4 277 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  5 force 1 1659  
167 0 0 4 278 1627 0 0 10 /**
 *
 */ 3 4 this 3 1553  7 impulse 1 1659  3 pos 1 1679  
168 0 0 4 279 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  7 impulse 1 1659  
169 0 0 4 280 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  6 torque 1 1659  
170 0 0 4 281 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  6 torque 1 1659  
171 0 0 7 282 1622 0 0 10 /**
 *
 */ 1 4 this 3 1676  
172 0 0 7 283 1622 0 0 10 /**
 *
 */ 1 4 this 3 1676  
173 0 0 6 284 1521 0 0 26 // Deactivation thresholds 1 4 this 3 1676  
174 0 0 6 285 1521 0 0 10 /**
 *
 */ 1 4 this 3 1676  
175 0 0 4 286 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  9 threshold 1 1521  
176 0 0 4 287 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  9 threshold 1 1521  
177 0 0 4 288 1627 0 0 10 // Gravity 2 4 this 3 1553  7 gravity 1 1659  
178 0 0 7 289 1622 0 0 10 /**
 *
 */ 1 4 this 3 1676  
179 0 0 7 290 1622 0 0 20 // Restrict movement 1 4 this 3 1676  
180 0 0 7 291 1622 0 0 10 /**
 *
 */ 1 4 this 3 1676  
181 0 0 4 292 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  6 factor 1 1659  
182 0 0 4 293 1627 0 0 10 /**
 *
 */ 2 4 this 3 1553  6 factor 1 1659  
183 0 0 6 294 1529 0 0 123 /**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */ 1 4 this 3 1553  
184 0 0 7 313 1631 0 0 0 0 
185 0 0 7 321 1681 0 0 10 /**
 *
 */ 4 6 node_a 1 1676  6 node_b 1 1676  7 frame_a 1 1633  7 frame_b 1 1633  
186 0 0 7 321 1681 0 0 10 /**
 *
 */ 2 6 node_a 1 1676  7 frame_a 1 1633  
187 0 0 4 322 1627 0 0 10 /**
 *
 */ 7 4 this 3 1681  6 swing1 1 1521  6 swing2 1 1521  5 twist 1 1521  8 softness 1 1521  4 bias 1 1521  10 relaxation 1 1521  
188 0 0 4 322 1627 0 0 10 /**
 *
 */ 3 4 this 3 1681  5 index 1 1523  5 value 1 1521  
189 0 0 4 323 1627 0 0 10 /**
 *
 */ 2 4 this 3 1681  7 damping 1 1521  
190 0 0 6 324 1521 0 0 10 /**
 *
 */ 1 4 this 3 1682  
191 0 0 4 325 1627 0 0 10 /**
 *
 */ 2 4 this 3 1681  9 threshold 1 1521  
192 0 0 4 326 1627 0 0 10 /**
 *
 */ 2 4 this 3 1681  6 enable 1 1529  
193 0 0 4 327 1627 0 0 10 /**
 *
 */ 2 4 this 3 1681  11 max_impulse 1 1521  
194 0 0 4 328 1627 0 0 10 /**
 *
 */ 2 4 this 3 1681  11 max_impulse 1 1521  
195 0 0 4 329 1627 0 0 10 /**
 *
 */ 2 4 this 3 1681  4 quat 1 1684  
196 0 0 4 330 1627 0 0 10 /**
 *
 */ 2 4 this 3 1681  4 quat 1 1684  
197 0 0 4 331 1627 0 0 10 /**
 *
 */ 3 4 this 3 1681  4 ts_a 1 1633  4 ts_b 1 1633  
198 0 0 7 332 1633 0 0 10 /**
 *
 */ 1 4 this 3 1682  
199 0 0 7 333 1633 0 0 10 /**
 *
 */ 1 4 this 3 1682  
200 0 0 7 337 1631 0 0 0 0 
201 0 0 6 340 1523 0 0 10 /**
 *
 */ 1 4 this 3 1688  
202 0 0 6 341 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
203 0 0 6 342 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
204 0 0 7 343 1621 0 0 10 /**
 *
 */ 1 4 this 3 1688  
205 0 0 7 344 1621 0 0 10 /**
 *
 */ 1 4 this 3 1688  
206 0 0 7 345 1622 0 0 10 /**
 *
 */ 1 4 this 3 1688  
207 0 0 7 346 1621 0 0 10 /**
 *
 */ 1 4 this 3 1688  
208 0 0 7 347 1621 0 0 10 /**
 *
 */ 1 4 this 3 1688  
209 0 0 6 348 1523 0 0 10 /**
 *
 */ 1 4 this 3 1688  
210 0 0 6 349 1523 0 0 10 /**
 *
 */ 1 4 this 3 1688  
211 0 0 6 350 1523 0 0 10 /**
 *
 */ 1 4 this 3 1688  
212 0 0 6 351 1523 0 0 10 /**
 *
 */ 1 4 this 3 1688  
213 0 0 4 352 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1529  
214 0 0 4 353 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  3 dir 1 1646  
215 0 0 4 354 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  3 dir 1 1646  
216 0 0 4 355 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
217 0 0 4 356 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
218 0 0 4 357 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
219 0 0 4 358 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
220 0 0 4 359 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
221 0 0 4 360 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
222 0 0 4 361 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
223 0 0 4 362 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
224 0 0 4 363 1627 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 value 1 1521  
225 0 0 6 364 1529 0 0 10 /**
 *
 */ 1 4 this 3 1688  
226 0 0 7 365 1622 0 0 10 /**
 *
 */ 1 4 this 3 1688  
227 0 0 7 366 1622 0 0 10 /**
 *
 */ 1 4 this 3 1688  
228 0 0 6 367 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
229 0 0 6 368 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
230 0 0 6 369 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
231 0 0 6 370 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
232 0 0 6 371 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
233 0 0 6 372 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
234 0 0 6 373 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
235 0 0 6 374 1521 0 0 10 /**
 *
 */ 1 4 this 3 1688  
236 0 0 7 400 1690 0 0 10 /**
 *
 */ 7 2 mp 1 1590  5 node0 1 1515  5 node1 1 1515  3 id0 1 1523  3 id1 1 1523  6 index0 1 1523  6 index1 1 1523  
237 0 0 6 401 1590 0 0 10 /**
 *
 */ 1 4 this 3 1691  
238 0 0 7 402 1515 0 0 10 /**
 *
 */ 1 4 this 3 1691  
239 0 0 7 403 1515 0 0 10 /**
 *
 */ 1 4 this 3 1691  
240 0 0 6 404 1523 0 0 10 /**
 *
 */ 1 4 this 3 1691  
241 0 0 6 405 1523 0 0 10 /**
 *
 */ 1 4 this 3 1691  
242 0 0 6 406 1523 0 0 10 /**
 *
 */ 1 4 this 3 1691  
243 0 0 6 407 1523 0 0 10 /**
 *
 */ 1 4 this 3 1691  
244 0 0 7 415 1631 0 0 0 0 
245 0 0 6 417 1590 0 0 10 /**
 *
 */ 1 4 this 3 1693  
246 0 0 7 418 1515 0 0 10 /**
 *
 */ 1 4 this 3 1694  
247 0 0 7 419 1515 0 0 10 /**
 *
 */ 1 4 this 3 1694  
248 0 0 6 420 1523 0 0 10 /**
 *
 */ 1 4 this 3 1694  
249 0 0 6 421 1523 0 0 10 /**
 *
 */ 1 4 this 3 1694  
250 0 0 6 422 1523 0 0 10 /**
 *
 */ 1 4 this 3 1694  
251 0 0 6 423 1523 0 0 10 /**
 *
 */ 1 4 this 3 1694  
252 0 0 6 436 1523 0 0 10 /**
 *
 */ 1 4 this 3 1696  
253 0 0 7 437 1693 1017 0 10 /**
 *
 */ 2 4 this 3 1698  3 idx 1 1523  
254 0 0 6 434 1699 0 0 0 1 4 this 3 1698  
255 0 0 6 435 1698 0 0 0 2 4 this 3 1699  4 this 1 1699  
256 0 0 7 443 1582 0 0 0 1 6 param0 0 1700  
257 0 0 7 443 1582 0 0 10 /**
 *
 */ 1 4 name 1 1628  
258 0 0 4 444 1627 0 0 10 /**
 *
 */ 1 4 this 3 1582  
259 0 0 4 445 1627 0 0 10 /**
 *
 */ 2 4 this 3 1582  4 show 1 1529  
260 0 0 4 446 1627 0 0 10 /**
 *
 */ 2 4 this 3 1582  4 show 1 1529  
261 0 0 4 447 1627 0 0 10 /**
 *
 */ 2 4 this 3 1582  4 show 1 1529  
262 0 0 4 448 1627 0 0 10 /**
 *
 */ 2 4 this 3 1582  4 show 1 1529  
263 0 0 6 449 1529 0 0 10 /**
 *
 */ 1 4 this 3 1700  
264 0 0 6 450 1529 0 0 10 /**
 *
 */ 1 4 this 3 1700  
265 0 0 6 451 1529 0 0 10 /**
 *
 */ 1 4 this 3 1700  
266 0 0 6 452 1529 0 0 10 /**
 *
 */ 1 4 this 3 1700  
267 0 0 7 457 1631 0 0 0 0 
268 0 0 7 459 1583 0 0 10 /**
 *
 */ 1 4 name 1 1628  
269 0 0 6 460 1523 0 0 14 // Overlapping 1 4 this 3 1702  
270 0 0 7 461 1515 0 0 10 /**
 *
 */ 2 4 this 3 1702  3 idx 1 1523  
271 0 0 7 464 1631 0 0 0 0 
272 0 0 7 480 1706 1038 0 0 1 6 param0 0 1704  
273 0 0 7 467 1706 1038 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
274 0 0 7 468 1621 0 0 10 /**
 *
 */ 1 4 this 3 1704  
275 0 0 7 469 1622 0 0 10 /**
 *
 */ 1 4 this 3 1704  
276 0 0 7 470 1622 0 0 10 /**
 *
 */ 1 4 this 3 1704  
277 0 0 6 471 1521 0 0 10 /**
 *
 */ 1 4 this 3 1704  
278 0 0 6 472 1521 0 0 10 /**
 *
 */ 1 4 this 3 1704  
279 0 0 6 473 1523 0 0 10 /**
 *
 */ 1 4 this 3 1704  
280 0 0 7 482 1707 1091 0 10 /**
 *
 */ 1 4 this 3 1584  
281 0 0 7 483 1708 1146 0 10 /**
 *
 */ 1 4 this 3 1584  
282 0 0 4 484 1627 0 0 10 /**
 *
 */ 3 4 this 3 1584  8 distance 1 1523  8 material 1 1709  
283 0 0 4 485 1627 0 0 10 /**
 *
 */ 1 4 this 3 1584  
284 0 0 4 486 1627 0 0 24 // Mass, volume, density 2 4 this 3 1584  4 mass 1 1521  
285 0 0 4 487 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  7 density 1 1521  
286 0 0 4 488 1627 0 0 10 /**
 *
 */ 3 4 this 3 1584  4 mass 1 1521  9 fromfaces 1 1529  
287 0 0 4 489 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  7 density 1 1521  
288 0 0 4 490 1627 0 0 10 /**
 *
 */ 3 4 this 3 1584  4 node 1 1523  4 mass 1 1521  
289 0 0 6 491 1521 0 0 10 /**
 *
 */ 2 4 this 3 1710  4 node 1 1523  
290 0 0 6 492 1521 0 0 10 /**
 *
 */ 1 4 this 3 1710  
291 0 0 6 493 1521 0 0 10 /**
 *
 */ 1 4 this 3 1710  
292 0 0 4 494 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  5 force 1 1659  
293 0 0 4 494 1627 0 0 10 /**
 *
 */ 3 4 this 3 1584  5 force 1 1659  4 node 1 1523  
294 0 0 4 495 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  8 velocity 1 1659  
295 0 0 4 496 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  8 velocity 1 1659  
296 0 0 4 496 1627 0 0 10 /**
 *
 */ 3 4 this 3 1584  8 velocity 1 1659  4 node 1 1523  
297 0 0 4 497 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  8 velocity 1 1659  
298 0 0 7 498 1622 0 0 10 /**
 *
 */ 1 4 this 3 1710  
299 0 0 4 499 1627 0 0 10 /**
 *
 */ 3 4 this 3 1584  7 bvolume 1 1529  6 bframe 1 1529  
300 0 0 7 500 1712 0 0 10 /**
 *
 */ 1 4 this 3 1710  
301 0 0 4 501 1627 0 0 10 // Cluster 3 4 this 3 1584  1 k 1 1523  13 maxiterations 1 1523  
302 0 0 4 502 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  5 index 1 1523  
303 0 0 4 503 1627 0 0 10 /**
 *
 */ 1 4 this 3 1584  
304 0 0 6 504 1523 0 0 10 /**
 *
 */ 1 4 this 3 1710  
305 0 0 7 505 1648 0 0 10 /**
 *
 */ 2 4 this 3 1710  7 cluster 1 1523  
306 0 0 4 506 1627 0 0 12 // Rendering 2 4 this 3 1584  4 geom 1 1713  
307 0 0 4 507 1627 0 0 10 /**
 *
 */ 1 4 this 3 1584  
308 0 0 4 508 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  5 curve 1 1715  
309 0 0 4 509 1627 0 0 10 /**
 *
 */ 1 4 this 3 1584  
310 0 0 4 510 1627 0 0 10 /**
 *
 */ 2 4 this 3 1584  7 surface 1 1717  
311 0 0 4 511 1627 0 0 10 /**
 *
 */ 1 4 this 3 1584  
312 0 0 4 512 1627 0 0 10 /**
 *
 */ 5 4 this 3 1584  4 node 1 1523  4 body 1 1553  5 pivot 1 1659  7 disable 1 1529  
313 0 0 4 512 1627 0 0 10 // Anchors 4 4 this 3 1584  4 node 1 1523  4 body 1 1553  7 disable 1 1529  
314 0 0 4 513 1627 0 0 10 /**
 *
 */ 6 4 this 3 1584  4 body 1 1632  3 pos 1 1679  3 erp 1 1521  3 cfm 1 1521  5 split 1 1521  
315 0 0 4 513 1627 0 0 10 /**
 *
 */ 6 4 this 3 1584  4 body 1 1632  7 cluster 1 1523  3 erp 1 1521  3 cfm 1 1521  5 split 1 1521  
316 0 0 4 514 1627 0 0 10 /**
 *
 */ 7 4 this 3 1584  4 body 1 1632  4 axis 1 1659  3 erp 1 1521  3 cfm 1 1521  5 split 1 1521  7 control 1 1719  
317 0 0 6 515 1523 0 0 12 // Materials 1 4 this 3 1710  
318 0 0 7 516 1709 1159 0 10 /**
 *
 */ 2 4 this 3 1710  3 idx 1 1523  
319 0 0 7 518 1709 1159 0 10 /**
 *
 */ 1 4 this 3 1584  
320 0 0 6 519 1523 0 0 10 /**
 *
 */ 1 4 this 3 1710  
321 0 0 7 520 1706 1038 0 10 /**
 *
 */ 2 4 this 3 1710  3 idx 1 1523  
322 0 0 6 522 1523 0 0 212 /**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */ 3 4 this 3 1584  5 point 1 1648  5 local 1 1529  
323 0 0 7 523 1584 0 0 10 // Factory 5 4 info 1 1708  4 from 1 1679  2 to 1 1679  3 res 1 1523  6 fixeds 1 1523  
324 0 0 7 524 1584 0 0 10 /**
 *
 */ 9 4 info 1 1708  8 corner00 1 1679  8 corner10 1 1679  8 corner01 1 1679  8 corner11 1 1679  4 resx 1 1523  4 resy 1 1523  6 fixeds 1 1523  8 gendiags 1 1529  
325 0 0 7 525 1584 0 0 10 /**
 *
 */ 4 4 info 1 1708  6 center 1 1679  6 radius 1 1646  3 res 1 1523  
326 0 0 7 526 1584 0 0 10 /**
 *
 */ 3 4 info 1 1708  4 geom 1 1720  20 randomizeConstraints 1 1529  
327 0 0 7 526 1584 0 0 10 /**
 *
 */ 4 4 info 1 1708  6 points 1 1722  7 indices 1 1726  20 randomizeConstraints 1 1529  
328 0 0 7 527 1584 0 0 10 /**
 *
 */ 4 4 info 1 1708  6 points 1 1722  7 indices 1 1726  10 tetralinks 1 1529  
329 0 0 7 527 1584 0 0 10 /**
 *
 */ 4 4 info 1 1708  3 ele 1 1628  4 face 1 1628  4 node 1 1628  
330 0 0 7 651 1631 0 0 0 0 
331 0 0 7 611 1707 1091 0 0 1 6 param0 0 1729  
332 0 0 4 533 1627 0 0 10 /**
 *
 */ 1 4 this 3 1707  
333 0 0 4 534 1627 0 0 10 /**
 *
 */ 3 4 this 3 1707  4 flag 1 1570  5 value 1 1529  
334 0 0 6 535 1529 0 0 10 /**
 *
 */ 2 4 this 3 1729  4 flag 1 1570  
335 0 0 4 536 1627 0 0 10 /**
 *
 */ 2 4 this 3 1707  5 value 1 1571  
336 0 0 6 537 1571 0 0 10 /**
 *
 */ 1 4 this 3 1729  
337 0 0 4 538 1627 0 0 36 /**
 * Setter for property kVCF.
 */ 2 4 this 3 1707  5 value 1 1521  
338 0 0 4 539 1627 0 0 35 /**
 * Setter for property kDP.
 */ 2 4 this 3 1707  5 value 1 1521  
339 0 0 4 540 1627 0 0 35 /**
 * Setter for property kDG.
 */ 2 4 this 3 1707  5 value 1 1521  
340 0 0 4 541 1627 0 0 35 /**
 * Setter for property kLF.
 */ 2 4 this 3 1707  5 value 1 1521  
341 0 0 4 542 1627 0 0 35 /**
 * Setter for property kPR.
 */ 2 4 this 3 1707  5 value 1 1521  
342 0 0 4 543 1627 0 0 35 /**
 * Setter for property kVC.
 */ 2 4 this 3 1707  5 value 1 1521  
343 0 0 4 544 1627 0 0 35 /**
 * Setter for property kDF.
 */ 2 4 this 3 1707  5 value 1 1521  
344 0 0 4 545 1627 0 0 35 /**
 * Setter for property kMT.
 */ 2 4 this 3 1707  5 value 1 1521  
345 0 0 4 546 1627 0 0 36 /**
 * Setter for property kCHR.
 */ 2 4 this 3 1707  5 value 1 1521  
346 0 0 4 547 1627 0 0 36 /**
 * Setter for property kKHR.
 */ 2 4 this 3 1707  5 value 1 1521  
347 0 0 4 548 1627 0 0 36 /**
 * Setter for property kSHR.
 */ 2 4 this 3 1707  5 value 1 1521  
348 0 0 4 549 1627 0 0 36 /**
 * Setter for property kAHR.
 */ 2 4 this 3 1707  5 value 1 1521  
349 0 0 4 550 1627 0 0 40 /**
 * Setter for property kSRHR_CL.
 */ 2 4 this 3 1707  5 value 1 1521  
350 0 0 4 551 1627 0 0 40 /**
 * Setter for property kSKHR_CL.
 */ 2 4 this 3 1707  5 value 1 1521  
351 0 0 4 552 1627 0 0 40 /**
 * Setter for property kSSHR_CL.
 */ 2 4 this 3 1707  5 value 1 1521  
352 0 0 4 553 1627 0 0 43 /**
 * Setter for property kSR_SPLT_CL.
 */ 2 4 this 3 1707  5 value 1 1521  
353 0 0 4 554 1627 0 0 43 /**
 * Setter for property kSK_SPLT_CL.
 */ 2 4 this 3 1707  5 value 1 1521  
354 0 0 4 555 1627 0 0 43 /**
 * Setter for property kSS_SPLT_CL.
 */ 2 4 this 3 1707  5 value 1 1521  
355 0 0 4 556 1627 0 0 41 /**
 * Setter for property maxvolume.
 */ 2 4 this 3 1707  5 value 1 1521  
356 0 0 4 557 1627 0 0 41 /**
 * Setter for property timescale.
 */ 2 4 this 3 1707  5 value 1 1521  
357 0 0 4 558 1627 0 0 43 /**
 * Setter for property piterations.
 */ 2 4 this 3 1707  5 value 1 1523  
358 0 0 4 559 1627 0 0 43 /**
 * Setter for property viterations.
 */ 2 4 this 3 1707  5 value 1 1523  
359 0 0 4 560 1627 0 0 43 /**
 * Setter for property diterations.
 */ 2 4 this 3 1707  5 value 1 1523  
360 0 0 4 561 1627 0 0 43 /**
 * Setter for property citerations.
 */ 2 4 this 3 1707  5 value 1 1523  
361 0 0 6 562 1521 0 0 36 /**
 * Getter for property kVCF.
 */ 1 4 this 3 1729  
362 0 0 6 563 1521 0 0 35 /**
 * Getter for property kDP.
 */ 1 4 this 3 1729  
363 0 0 6 564 1521 0 0 35 /**
 * Getter for property kDG.
 */ 1 4 this 3 1729  
364 0 0 6 565 1521 0 0 35 /**
 * Getter for property kLF.
 */ 1 4 this 3 1729  
365 0 0 6 566 1521 0 0 35 /**
 * Getter for property kPR.
 */ 1 4 this 3 1729  
366 0 0 6 567 1521 0 0 35 /**
 * Getter for property kVC.
 */ 1 4 this 3 1729  
367 0 0 6 568 1521 0 0 35 /**
 * Getter for property kDF.
 */ 1 4 this 3 1729  
368 0 0 6 569 1521 0 0 35 /**
 * Getter for property kMT.
 */ 1 4 this 3 1729  
369 0 0 6 570 1521 0 0 36 /**
 * Getter for property kCHR.
 */ 1 4 this 3 1729  
370 0 0 6 571 1521 0 0 36 /**
 * Getter for property kKHR.
 */ 1 4 this 3 1729  
371 0 0 6 572 1521 0 0 36 /**
 * Getter for property kSHR.
 */ 1 4 this 3 1729  
372 0 0 6 573 1521 0 0 36 /**
 * Getter for property kAHR.
 */ 1 4 this 3 1729  
373 0 0 6 574 1521 0 0 40 /**
 * Getter for property kSRHR_CL.
 */ 1 4 this 3 1729  
374 0 0 6 575 1521 0 0 40 /**
 * Getter for property kSKHR_CL.
 */ 1 4 this 3 1729  
375 0 0 6 576 1521 0 0 40 /**
 * Getter for property kSSHR_CL.
 */ 1 4 this 3 1729  
376 0 0 6 577 1521 0 0 43 /**
 * Getter for property kSR_SPLT_CL.
 */ 1 4 this 3 1729  
377 0 0 6 578 1521 0 0 43 /**
 * Getter for property kSK_SPLT_CL.
 */ 1 4 this 3 1729  
378 0 0 6 579 1521 0 0 43 /**
 * Getter for property kSS_SPLT_CL.
 */ 1 4 this 3 1729  
379 0 0 6 580 1521 0 0 41 /**
 * Getter for property maxvolume.
 */ 1 4 this 3 1729  
380 0 0 6 581 1521 0 0 41 /**
 * Getter for property timescale.
 */ 1 4 this 3 1729  
381 0 0 6 582 1523 0 0 43 /**
 * Getter for property piterations.
 */ 1 4 this 3 1729  
382 0 0 6 583 1523 0 0 43 /**
 * Getter for property viterations.
 */ 1 4 this 3 1729  
383 0 0 6 584 1523 0 0 43 /**
 * Getter for property diterations.
 */ 1 4 this 3 1729  
384 0 0 6 585 1523 0 0 43 /**
 * Getter for property citerations.
 */ 1 4 this 3 1729  
385 0 0 7 631 1708 1146 0 0 1 6 param0 0 1731  
386 0 0 4 615 1627 0 0 10 /**
 *
 */ 2 4 this 3 1708  7 density 1 1521  
387 0 0 4 616 1627 0 0 10 /**
 *
 */ 2 4 this 3 1708  7 density 1 1521  
388 0 0 4 617 1627 0 0 10 /**
 *
 */ 2 4 this 3 1708  6 offset 1 1521  
389 0 0 4 618 1627 0 0 10 /**
 *
 */ 2 4 this 3 1708  6 normal 1 1659  
390 0 0 4 619 1627 0 0 10 /**
 *
 */ 2 4 this 3 1708  7 gravity 1 1659  
391 0 0 6 620 1521 0 0 10 /**
 *
 */ 1 4 this 3 1731  
392 0 0 6 621 1521 0 0 10 /**
 *
 */ 1 4 this 3 1731  
393 0 0 6 622 1521 0 0 10 /**
 *
 */ 1 4 this 3 1731  
394 0 0 7 623 1622 0 0 10 /**
 *
 */ 1 4 this 3 1731  
395 0 0 7 624 1622 0 0 10 /**
 *
 */ 1 4 this 3 1731  
396 0 0 4 625 1627 0 0 10 /**
 *
 */ 2 4 this 3 1708  8 lifetime 1 1523  
397 0 0 7 649 1709 1159 0 0 1 6 param0 0 1733  
398 0 0 7 639 1709 1159 0 102 /**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */ 0 
399 0 0 6 640 1521 0 0 42 /**
 * Getter for the property m_kLST.
 */ 1 4 this 3 1733  
400 0 0 4 641 1627 0 0 42 /**
 * Setter for the property m_kLST.
 */ 2 4 this 3 1709  5 value 1 1521  
401 0 0 6 642 1521 0 0 42 /**
 * Getter for the property m_kAST.
 */ 1 4 this 3 1733  
402 0 0 4 643 1627 0 0 42 /**
 * Setter for the property m_kAST.
 */ 2 4 this 3 1709  5 value 1 1521  
403 0 0 6 644 1521 0 0 42 /**
 * Getter for the property m_kVST.
 */ 1 4 this 3 1733  
404 0 0 4 645 1627 0 0 42 /**
 * Setter for the property m_kVST.
 */ 2 4 this 3 1709  5 value 1 1521  
405 0 0 4 653 1627 0 0 10 /**
 *
 */ 2 4 this 3 1735  5 value 1 1521  
406 0 0 4 654 1627 0 0 10 /**
 *
 */ 2 4 this 3 1735  5 value 1 1521  
407 0 0 4 655 1627 0 0 10 /**
 *
 */ 2 4 this 3 1735  5 value 1 1521  
408 0 0 4 656 1627 0 0 10 /**
 *
 */ 2 4 this 3 1735  5 value 1 1521  
409 0 0 4 657 1627 0 0 10 /**
 *
 */ 2 4 this 3 1735  5 value 1 1521  
410 0 0 4 658 1627 0 0 10 /**
 *
 */ 2 4 this 3 1735  5 value 1 1521  
411 0 0 6 659 1521 0 0 10 /**
 *
 */ 1 4 this 3 1736  
412 0 0 6 660 1521 0 0 10 /**
 *
 */ 1 4 this 3 1736  
413 0 0 6 661 1521 0 0 10 /**
 *
 */ 1 4 this 3 1736  
414 0 0 6 662 1521 0 0 10 /**
 *
 */ 1 4 this 3 1736  
415 0 0 6 663 1521 0 0 10 /**
 *
 */ 1 4 this 3 1736  
416 0 0 6 664 1521 0 0 10 /**
 *
 */ 1 4 this 3 1736  
417 0 0 7 672 1586 0 0 94 /**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */ 2 5 world 1 1738  7 chassis 1 1553  
418 0 0 4 673 1627 0 0 100 /**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */ 2 4 this 3 1586  2 up 1 1513  
419 0 0 4 674 1627 0 0 76 /**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */ 3 4 this 3 1586  8 steering 1 1521  3 idx 1 1523  
420 0 0 4 675 1627 0 0 61 /**
 * Applies braking force to the wheel with index idx.
 */ 3 4 this 3 1586  5 brake 1 1521  3 idx 1 1523  
421 0 0 4 676 1627 0 0 10 /**
 *
 */ 2 4 this 3 1586  5 pitch 1 1521  
422 0 0 7 677 1553 0 0 82 /**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */ 1 4 this 3 1586  
423 0 0 6 678 1521 0 0 106 /**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */ 1 4 this 3 1739  
424 0 0 6 679 1521 0 0 77 /**
 * Returns the steering angle of the wheel with index idx in degrees.
 */ 2 4 this 3 1739  3 idx 1 1523  
425 0 0 7 680 1622 0 0 145 /**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */ 1 4 this 3 1739  
426 0 0 4 681 1627 0 0 43 /**
 * Resets the vehicle's suspension.
 */ 1 4 this 3 1586  
427 0 0 4 682 1627 0 0 70 /**
 * Applies force at the wheel with index idx for acceleration.
 */ 3 4 this 3 1586  5 force 1 1521  3 idx 1 1523  
428 0 0 7 683 1741 1196 0 72 /**
 * Factory method for creating wheels for this vehicle instance.
 */ 1 4 this 3 1586  
429 0 0 6 684 1523 0 0 57 /**
 * Returns the number of wheels this vehicle has.
 */ 1 4 this 3 1739  
430 0 0 7 685 1741 1196 0 132 /**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */ 2 4 this 3 1739  3 idx 1 1523  
431 0 0 6 687 1735 0 0 189 /**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */ 1 4 this 3 1586  
432 0 0 7 788 1631 0 0 0 0 
433 0 0 7 786 1741 1196 0 0 1 6 param0 0 1742  
434 0 0 4 694 1627 0 0 50 /**
 * Sets how stiff the suspension shall be.
 */ 2 4 this 3 1741  5 value 1 1521  
435 0 0 4 695 1627 0 0 109 /**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */ 2 4 this 3 1741  5 value 1 1521  
436 0 0 4 696 1627 0 0 45 /**
 * Sets the slipperyness of the tyre.
 */ 2 4 this 3 1741  5 value 1 1521  
437 0 0 4 697 1627 0 0 66 /**
 * Sets the maximum suspension force the wheel can handle.
 */ 2 4 this 3 1741  5 value 1 1521  
438 0 0 4 698 1627 0 0 79 /**
 * Sets the damping forces applied when the suspension gets compressed.
 */ 2 4 this 3 1741  5 value 1 1521  
439 0 0 4 699 1627 0 0 71 /**
 * Sets the damping forces applied when the suspension relaxes.
 */ 2 4 this 3 1741  5 value 1 1521  
440 0 0 4 700 1627 0 0 249 /**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */ 2 4 this 3 1741  5 value 1 1521  
441 0 0 4 701 1627 0 0 33 /**
 * Sets the wheel radius.
 */ 2 4 this 3 1741  5 value 1 1521  
442 0 0 4 702 1627 0 0 35 /**
 * Sets the steering angle.
 */ 2 4 this 3 1741  5 value 1 1521  
443 0 0 4 703 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 value 1 1521  
444 0 0 4 704 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 value 1 1521  
445 0 0 4 705 1627 0 0 69 /**
 * Defines how much force should be used to rotate the wheel.
 */ 2 4 this 3 1741  5 value 1 1521  
446 0 0 4 706 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 value 1 1521  
447 0 0 4 707 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 value 1 1521  
448 0 0 4 708 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 value 1 1521  
449 0 0 4 709 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 value 1 1521  
450 0 0 4 710 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 value 1 1521  
451 0 0 4 711 1627 0 0 70 /**
 * Sets the point where the wheel is connected to the chassis.
 */ 2 4 this 3 1741  3 pos 1 1679  
452 0 0 4 712 1627 0 0 92 /**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */ 2 4 this 3 1741  3 dir 1 1659  
453 0 0 4 713 1627 0 0 51 /**
 * Determines the wheel axle normal vector.
 */ 2 4 this 3 1741  4 axle 1 1659  
454 0 0 4 714 1627 0 0 10 /**
 *
 */ 2 4 this 3 1741  3 mat 1 1744  
455 0 0 4 715 1627 0 0 42 /**
 * Sets if the wheel is steerable.
 */ 2 4 this 3 1741  5 value 1 1529  
456 0 0 4 716 1627 0 0 86 /**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */ 2 4 this 3 1741  4 node 1 1515  
457 0 0 6 717 1521 0 0 83 /**
 * Returns the length of the suspension when the vehicle is standing still.
 */ 1 4 this 3 1742  
458 0 0 6 718 1521 0 0 51 /**
 * Returns the stiffness of the suspension.
 */ 1 4 this 3 1742  
459 0 0 6 719 1521 0 0 10 /**
 *
 */ 1 4 this 3 1742  
460 0 0 6 720 1521 0 0 46 /**
 * Returns how slippery the tyres are.
 */ 1 4 this 3 1742  
461 0 0 6 721 1521 0 0 72 /**
 * Returns the maximum force (weight) the suspension can handle.
 */ 1 4 this 3 1742  
462 0 0 6 722 1521 0 0 70 /**
 * Returns the  damping applied to the compressing suspension.
 */ 1 4 this 3 1742  
463 0 0 6 723 1521 0 0 66 /**
 * Returns the damping applied to the relaxing suspension.
 */ 1 4 this 3 1742  
464 0 0 6 724 1521 0 0 90 /**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */ 1 4 this 3 1742  
465 0 0 6 725 1521 0 0 36 /**
 * Returns the wheel radius.
 */ 1 4 this 3 1742  
466 0 0 6 726 1521 0 0 49 /**
 * Returns the steering angle in degrees.
 */ 1 4 this 3 1742  
467 0 0 6 727 1521 0 0 10 /**
 *
 */ 1 4 this 3 1742  
468 0 0 6 728 1521 0 0 10 /**
 *
 */ 1 4 this 3 1742  
469 0 0 6 729 1521 0 0 71 /**
 * Returns the amount of accelleration force currently applied.
 */ 1 4 this 3 1742  
470 0 0 6 730 1521 0 0 65 /**
 * Returns the amount of braking force currently applied.
 */ 1 4 this 3 1742  
471 0 0 6 731 1521 0 0 10 /**
 *
 */ 1 4 this 3 1742  
472 0 0 6 732 1521 0 0 10 /**
 *
 */ 1 4 this 3 1742  
473 0 0 6 733 1521 0 0 10 /**
 *
 */ 1 4 this 3 1742  
474 0 0 6 734 1521 0 0 10 /**
 *
 */ 1 4 this 3 1742  
475 0 0 7 735 1621 0 0 73 /**
 * Returns the point where the wheel is connected to the chassis.
 */ 1 4 this 3 1742  
476 0 0 7 736 1622 0 0 70 /**
 * Returns the wheel's forward vector relative to the chassis.
 */ 1 4 this 3 1742  
477 0 0 7 737 1622 0 0 55 /**
 * Returns the normal vector of the wheel axle.
 */ 1 4 this 3 1742  
478 0 0 7 738 1638 0 0 10 /**
 *
 */ 1 4 this 3 1742  
479 0 0 6 739 1529 0 0 46 /**
 * Determines if a wheel is steerable.
 */ 1 4 this 3 1742  
480 0 0 7 740 1515 0 0 142 /**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */ 1 4 this 3 1742  
481 0 0 7 741 1746 1245 0 10 /**
 *
 */ 1 4 this 3 1742  
482 0 0 7 761 1746 1245 0 0 1 6 param0 0 1747  
483 0 0 6 745 1529 0 0 10 /**
 *
 */ 1 4 this 3 1747  
484 0 0 6 746 1521 0 0 10 /**
 *
 */ 1 4 this 3 1747  
485 0 0 7 747 1622 0 0 10 /**
 *
 */ 1 4 this 3 1747  
486 0 0 7 748 1622 0 0 10 /**
 *
 */ 1 4 this 3 1747  
487 0 0 7 749 1622 0 0 10 /**
 *
 */ 1 4 this 3 1747  
488 0 0 7 750 1621 0 0 10 /**
 *
 */ 1 4 this 3 1747  
489 0 0 7 751 1621 0 0 10 /**
 *
 */ 1 4 this 3 1747  
490 0 0 7 752 1515 0 0 10 /**
 *
 */ 1 4 this 3 1747  
491 0 0 7 790 1738 0 0 10 /**
 *
 */ 0 
492 0 0 4 791 1627 0 0 10 /**
 *
 */ 2 4 this 3 1738  7 gravity 1 1659  
493 0 0 4 791 1627 0 0 10 /**
 *
 */ 4 4 this 3 1738  2 gx 1 1521  2 gy 1 1521  2 gz 1 1521  
494 0 0 7 792 1659 0 0 10 /**
 *
 */ 1 4 this 3 1749  
495 0 0 6 793 1523 0 0 10 /**
 *
 */ 4 4 this 3 1738  2 dt 1 1521  12 max_substeps 1 1523  8 stepsize 1 1521  
496 0 0 7 794 1708 1146 0 10 /**
 *
 */ 1 4 this 3 1738  
497 0 0 4 795 1627 0 0 10 /**
 *
 */ 2 4 this 3 1738  4 node 1 1582  
498 0 0 4 796 1627 0 0 10 /**
 *
 */ 1 4 this 3 1738  
499 0 0 7 797 1582 0 0 10 /**
 *
 */ 1 4 this 3 1749  
500 0 0 6 798 1529 0 0 10 /**
 *
 */ 1 4 this 3 1749  
501 0 0 4 799 1627 0 0 15 // AttachRemove 2 4 this 3 1738  6 object 1 1751  
502 0 0 4 800 1627 0 0 156 /**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */ 3 4 this 3 1738  10 constraint 1 1587  16 linked_collision 1 1529  
503 0 0 4 801 1627 0 0 10 /**
 *
 */ 2 4 this 3 1738  6 object 1 1751  
504 0 0 6 802 1523 0 0 15 // Ghost object 1 4 this 3 1749  
505 0 0 7 803 1583 0 0 10 /**
 *
 */ 2 4 this 3 1749  3 idx 1 1523  
506 0 0 6 805 1523 0 0 13 // Rigid body 1 4 this 3 1749  
507 0 0 7 806 1553 0 0 10 /**
 *
 */ 2 4 this 3 1749  3 idx 1 1523  
508 0 0 6 808 1523 0 0 12 // Soft body 1 4 this 3 1749  
509 0 0 7 809 1584 0 0 10 /**
 *
 */ 2 4 this 3 1749  3 idx 1 1523  
510 0 0 6 811 1523 0 0 23 // Character controller 1 4 this 3 1749  
511 0 0 7 812 1585 798 0 10 /**
 *
 */ 2 4 this 3 1749  3 idx 1 1523  
512 0 0 4 814 1627 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1738  7 vehicle 1 1586  
513 0 0 4 815 1627 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1738  7 vehicle 1 1586  
514 0 0 6 816 1523 0 0 10 /**
 *
 */ 1 4 this 3 1749  
515 0 0 7 817 1586 0 0 10 /**
 *
 */ 2 4 this 3 1749  3 idx 1 1523  
516 0 0 6 819 1523 0 0 13 // Constraint 1 4 this 3 1749  
517 0 0 7 820 1587 0 0 10 /**
 *
 */ 2 4 this 3 1749  3 idx 1 1523  
518 0 0 7 822 1665 883 0 28 // Raycast and other queries 4 4 this 3 1749  8 from_pos 1 1679  6 to_pos 1 1679  4 mask 1 1753  
519 0 0 7 823 1623 784 0 10 /**
 *
 */ 4 4 this 3 1749  8 from_pos 1 1679  6 to_pos 1 1679  4 mask 1 1753  
520 0 0 7 824 1669 895 0 10 /**
 *
 */ 6 4 this 3 1749  5 shape 1 1536  7 from_ts 1 1633  5 to_ts 1 1633  4 mask 1 1753  11 penetration 1 1521  
521 0 0 7 825 1698 1022 0 386 /**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */ 3 4 this 3 1749  4 node 1 1515  10 use_filter 1 1529  
522 0 0 7 826 1698 1022 0 181 /**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */ 3 4 this 3 1749  5 node0 1 1515  5 node1 1 1515  
523 0 0 6 827 1529 0 0 105 /**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */ 3 4 this 3 1749  5 node0 1 1515  5 node1 1 1515  
524 0 0 6 828 1523 0 0 12 // Manifolds 1 4 this 3 1749  
525 0 0 6 829 1588 0 0 10 /**
 *
 */ 2 4 this 3 1749  3 idx 1 1523  
526 0 0 4 831 1627 0 0 22 // Collision filtering 4 4 this 3 1738  6 group1 1 1755  6 group2 1 1755  6 enable 1 1529  
527 0 0 6 832 1529 0 0 10 /**
 *
 */ 3 4 this 3 1749  6 group1 1 1755  6 group2 1 1755  
528 0 0 4 833 1627 0 0 12 // Callbacks 2 4 this 3 1738  3 obj 1 1756  
529 0 0 4 834 1627 0 0 10 /**
 *
 */ 1 4 this 3 1738  
530 0 0 4 835 1627 0 0 10 /**
 *
 */ 3 4 this 3 1738  3 obj 1 1756  10 is_pretick 1 1529  
531 0 0 4 836 1627 0 0 10 /**
 *
 */ 1 4 this 3 1738  
532 0 0 4 837 1627 0 0 10 /**
 *
 */ 2 4 this 3 1738  3 obj 1 1756  
533 0 0 4 838 1627 0 0 10 /**
 *
 */ 1 4 this 3 1738  
534 0 0 4 875 1627 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1738  4 node 1 1583  
535 0 0 4 876 1627 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1738  4 node 1 1583  
536 0 0 4 877 1627 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1738  4 node 1 1553  
537 0 0 4 878 1627 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1738  4 node 1 1553  
538 0 0 4 879 1627 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1738  4 node 1 1584  
539 0 0 4 880 1627 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1738  4 node 1 1584  
540 0 0 4 881 1627 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1738  4 node 1 1585  
541 0 0 4 882 1627 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1738  4 node 1 1585  
542 0 0 4 883 1627 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1738  10 constraint 1 1587  
543 0 0 7 884 1631 0 0 0 0 
544 0 0 7 874 1588 1299 0 0 1 6 param0 0 1758  
545 0 0 7 860 1515 0 0 10 /**
 *
 */ 1 4 this 3 1588  
546 0 0 7 861 1515 0 0 10 /**
 *
 */ 1 4 this 3 1588  
547 0 0 6 862 1523 0 0 10 /**
 *
 */ 1 4 this 3 1758  
548 0 0 6 863 1590 0 0 10 /**
 *
 */ 2 4 this 3 1758  3 idx 1 1523  
549 0 0 6 865 1521 0 0 10 /**
 *
 */ 1 4 this 3 1758  
550 0 0 6 866 1521 0 0 10 /**
 *
 */ 1 4 this 3 1758  
551 0 0 4 867 1627 0 0 10 /**
 *
 */ 1 4 this 3 1588  
552 0 0 7 886 1760 0 0 10 /**
 *
 */ 0 
553 0 0 7 886 1760 0 0 10 /**
 *
 */ 1 4 copy 1 1761  
554 0 0 7 887 1760 0 0 0 2 4 this 3 1760  4 copy 1 1761  
555 0 0 4 888 1627 0 0 10 /**
 *
 */ 2 4 this 3 1760  1 p 1 1679  
556 0 0 4 889 1627 0 0 10 /**
 *
 */ 2 4 this 3 1760  6 points 1 1763  
557 0 0 4 890 1627 0 0 10 /**
 *
 */ 3 4 this 3 1760  4 geom 1 1720  2 ts 1 1633  
558 0 0 7 891 1631 0 0 0 0 
559 0 0 7 893 1767 0 0 10 /**
 *
 */ 1 4 copy 1 1765  
560 0 0 7 893 1767 0 0 10 /**
 *
 */ 2 4 geom 1 1720  5 scale 1 1648  
561 0 0 7 893 1767 0 0 10 /**
 *
 */ 2 6 points 1 1763  5 scale 1 1648  
562 0 0 7 894 1767 0 0 0 2 4 this 3 1767  4 copy 1 1765  
563 0 0 6 895 1523 0 0 10 /**
 *
 */ 1 4 this 3 1765  
564 0 0 7 897 1631 0 0 0 0 
565 0 0 7 899 1770 0 0 10 /**
 *
 */ 1 4 copy 1 1768  
566 0 0 7 899 1770 0 0 10 /**
 *
 */ 2 12 half_extents 1 1659  2 up 1 1513  
567 0 0 7 899 1770 0 0 10 /**
 *
 */ 3 6 radius 1 1521  6 height 1 1521  2 up 1 1513  
568 0 0 7 900 1770 0 0 0 2 4 this 3 1770  4 copy 1 1768  
569 0 0 6 901 1521 0 0 10 /**
 *
 */ 1 4 this 3 1768  
570 0 0 7 902 1648 0 0 10 /**
 *
 */ 1 4 this 3 1768  
571 0 0 7 903 1648 0 0 10 /**
 *
 */ 1 4 this 3 1768  
572 0 0 7 907 1631 0 0 0 0 
573 0 0 7 909 1771 1340 0 10 /**
 *
 */ 2 5 node0 1 1515  5 node1 1 1515  
574 0 0 7 910 1515 0 0 10 /**
 *
 */ 1 4 this 3 1772  
575 0 0 7 911 1515 0 0 10 /**
 *
 */ 1 4 this 3 1772  
576 0 0 4 912 1627 0 0 10 /**
 *
 */ 2 4 this 3 1771  7 collide 1 1529  
577 0 0 6 913 1529 0 0 10 /**
 *
 */ 1 4 this 3 1772  
578 0 0 7 917 1631 0 0 0 0 
579 0 0 7 920 1776 1342 0 10 /**
 *
 */ 1 4 copy 1 1774  
580 0 0 4 922 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  6 enable 1 1529  
581 0 0 4 923 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  5 limit 1 1521  
582 0 0 4 924 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  5 limit 1 1521  
583 0 0 4 925 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  8 velocity 1 1521  
584 0 0 4 926 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  5 force 1 1521  
585 0 0 4 927 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  5 force 1 1521  
586 0 0 4 928 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  7 damping 1 1521  
587 0 0 4 929 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  8 softness 1 1521  
588 0 0 4 930 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  6 bounce 1 1521  
589 0 0 4 931 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  3 cfm 1 1521  
590 0 0 4 932 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  3 cfm 1 1521  
591 0 0 4 933 1627 0 0 10 /**
 *
 */ 2 4 this 3 1776  3 erp 1 1521  
592 0 0 6 934 1529 0 0 10 /**
 *
 */ 1 4 this 3 1774  
593 0 0 6 935 1529 0 0 10 /**
 *
 */ 1 4 this 3 1774  
594 0 0 6 936 1523 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 1 4 this 3 1774  
595 0 0 6 937 1521 0 0 10 /**
 *
 */ 1 4 this 3 1774  
596 0 0 6 938 1521 0 0 10 /**
 *
 */ 1 4 this 3 1774  
597 0 0 6 939 1521 0 0 10 /**
 *
 */ 1 4 this 3 1774  
598 0 0 7 947 1779 1362 0 10 /**
 *
 */ 1 4 copy 1 1777  
599 0 0 4 949 1627 0 0 10 /**
 *
 */ 3 4 this 3 1779  4 axis 1 1523  6 enable 1 1529  
600 0 0 4 950 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  5 limit 1 1646  
601 0 0 4 951 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  5 limit 1 1646  
602 0 0 4 952 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  8 velocity 1 1646  
603 0 0 4 953 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  5 force 1 1646  
604 0 0 4 954 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  7 damping 1 1521  
605 0 0 4 955 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  8 softness 1 1521  
606 0 0 4 956 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  11 restitution 1 1521  
607 0 0 4 957 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  3 cfm 1 1646  
608 0 0 4 958 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  3 erp 1 1646  
609 0 0 4 959 1627 0 0 10 /**
 *
 */ 2 4 this 3 1779  3 cfm 1 1646  
610 0 0 6 960 1529 0 0 10 /**
 *
 */ 2 4 this 3 1777  4 axis 1 1523  
611 0 0 6 961 1529 0 0 10 /**
 *
 */ 2 4 this 3 1777  4 axis 1 1523  
612 0 0 6 962 1523 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 2 4 this 3 1777  4 axis 1 1523  
613 0 0 7 963 1622 0 0 10 /**
 *
 */ 1 4 this 3 1777  
614 0 0 7 964 1621 0 0 10 /**
 *
 */ 1 4 this 3 1777  
615 0 0 7 965 1622 0 0 10 /**
 *
 */ 1 4 this 3 1777  
616 0 0 7 970 1780 0 0 10 /**
 *
 */ 5 6 node_a 1 1676  6 node_b 1 1676  7 frame_a 1 1633  7 frame_b 1 1633  11 use_frame_a 1 1529  
617 0 0 7 970 1780 0 0 10 /**
 *
 */ 3 6 node_a 1 1676  7 frame_a 1 1633  11 use_frame_a 1 1529  
618 0 0 7 971 1622 0 0 11 // Geometry 2 4 this 3 1781  4 axis 1 1523  
619 0 0 6 972 1521 0 0 10 /**
 *
 */ 2 4 this 3 1781  4 axis 1 1523  
620 0 0 6 973 1521 0 0 10 /**
 *
 */ 2 4 this 3 1781  4 axis 1 1523  
621 0 0 4 974 1627 0 0 10 /**
 *
 */ 4 4 this 3 1780  4 axis 1 1523  3 low 1 1521  4 high 1 1521  
622 0 0 4 975 1627 0 0 10 /**
 *
 */ 4 4 this 3 1780  4 axis 1 1523  3 low 1 1521  4 high 1 1521  
623 0 0 7 976 1776 1342 0 9 // Motors 2 4 this 3 1780  4 axis 1 1523  
624 0 0 7 977 1779 1362 0 10 /**
 *
 */ 1 4 this 3 1780  
625 0 0 4 978 1627 0 0 9 // Frames 3 4 this 3 1780  4 ts_a 1 1633  4 ts_b 1 1633  
626 0 0 7 979 1633 0 0 10 /**
 *
 */ 1 4 this 3 1781  
627 0 0 7 980 1633 0 0 10 /**
 *
 */ 1 4 this 3 1781  
628 0 0 7 984 1631 0 0 0 0 
629 0 0 7 986 1785 0 0 10 /**
 *
 */ 1 4 copy 1 1783  
630 0 0 7 986 1785 0 0 215 /**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */ 3 5 image 1 1786  10 max_height 1 1521  2 up 1 1513  
631 0 0 7 986 1785 0 0 311 /**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */ 3 3 tex 1 1789  10 max_height 1 1521  2 up 1 1513  
632 0 0 7 987 1785 0 0 0 2 4 this 3 1785  4 copy 1 1783  
633 0 0 4 988 1627 0 0 10 /**
 *
 */ 2 4 this 3 1785  4 flag 1 1529  
634 0 0 7 989 1631 0 0 0 0 
635 0 0 7 1002 1791 1405 0 0 0 
636 0 0 7 1002 1791 1405 0 0 1 6 param0 0 1792  
637 0 0 7 991 1797 0 0 19 // Collision shapes 2 2 np 1 1795  5 clear 1 1529  
638 0 0 7 992 1799 0 0 17 // Internal names 0 
639 0 0 7 993 1799 0 0 10 /**
 *
 */ 0 
640 0 0 7 994 1802 0 0 19 // Geom vertex data 1 6 format 1 1802  
641 0 0 7 995 1802 0 0 10 /**
 *
 */ 1 6 format 1 1802  
642 0 0 7 996 1713 0 0 13 // Geom utils 3 4 node 1 1584  6 format 1 1802  9 two_sided 1 1529  
643 0 0 7 997 1713 0 0 10 /**
 *
 */ 2 4 node 1 1584  6 format 1 1802  
644 0 0 4 998 1627 0 0 10 /**
 *
 */ 3 4 geom 1 1713  4 resx 1 1523  4 resy 1 1523  
645 0 0 7 1005 1803 0 0 342 /**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */ 7 6 node_a 1 1676  6 node_b 1 1676  7 pivot_a 1 1679  7 pivot_b 1 1679  6 axis_a 1 1659  6 axis_b 1 1659  11 use_frame_a 1 1529  
646 0 0 7 1005 1803 0 0 73 /**
 * Constructs a hinge constraint which connects two rigid bodies.
 */ 5 6 node_a 1 1676  6 node_b 1 1676  4 ts_a 1 1633  4 ts_b 1 1633  11 use_frame_a 1 1529  
647 0 0 7 1005 1803 0 0 182 /**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */ 4 6 node_a 1 1676  7 pivot_a 1 1679  6 axis_a 1 1659  11 use_frame_a 1 1529  
648 0 0 7 1005 1803 0 0 106 /**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */ 3 6 node_a 1 1676  4 ts_a 1 1633  11 use_frame_a 1 1529  
649 0 0 6 1006 1521 0 0 66 /**
 * Returns the angle between node_a and node_b in degrees.
 */ 1 4 this 3 1803  
650 0 0 6 1007 1521 0 0 54 /**
 * Returns the lower angular limit in degrees.
 */ 1 4 this 3 1804  
651 0 0 6 1008 1521 0 0 54 /**
 * Returns the upper angular limit in degrees.
 */ 1 4 this 3 1804  
652 0 0 6 1009 1529 0 0 10 /**
 *
 */ 1 4 this 3 1804  
653 0 0 4 1010 1627 0 0 10 /**
 *
 */ 2 4 this 3 1803  5 value 1 1529  
654 0 0 4 1011 1627 0 0 65 /**
 * Sets the lower and upper rotational limits in degrees.
 */ 6 4 this 3 1803  3 low 1 1521  4 high 1 1521  8 softness 1 1521  4 bias 1 1521  10 relaxation 1 1521  
655 0 0 4 1012 1627 0 0 63 /**
 * Sets the hinge's rotation axis in world coordinates.
 */ 2 4 this 3 1803  4 axis 1 1659  
656 0 0 4 1013 1627 0 0 261 /**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */ 4 4 this 3 1803  6 enable 1 1529  15 target_velocity 1 1521  11 max_impulse 1 1521  
657 0 0 4 1014 1627 0 0 10 /**
 *
 */ 2 4 this 3 1803  6 enable 1 1529  
658 0 0 4 1015 1627 0 0 96 /**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */ 2 4 this 3 1803  11 max_impulse 1 1521  
659 0 0 4 1016 1627 0 0 10 /**
 *
 */ 3 4 this 3 1803  4 quat 1 1684  2 dt 1 1521  
660 0 0 4 1016 1627 0 0 10 /**
 *
 */ 3 4 this 3 1803  12 target_angle 1 1521  2 dt 1 1521  
661 0 0 4 1017 1627 0 0 10 /**
 *
 */ 3 4 this 3 1803  4 ts_a 1 1633  4 ts_b 1 1633  
662 0 0 7 1018 1633 0 0 10 /**
 *
 */ 1 4 this 3 1804  
663 0 0 7 1019 1633 0 0 10 /**
 *
 */ 1 4 this 3 1804  
664 0 0 7 1026 1631 0 0 0 0 
665 0 0 7 1028 1808 0 0 10 /**
 *
 */ 1 4 copy 1 1806  
666 0 0 7 1028 1808 0 0 10 /**
 *
 */ 2 7 shape_a 1 1603  7 shape_b 1 1603  
667 0 0 7 1029 1808 0 0 0 2 4 this 3 1808  4 copy 1 1806  
668 0 0 4 1030 1627 0 0 10 /**
 *
 */ 2 4 this 3 1808  2 ts 1 1633  
669 0 0 4 1031 1627 0 0 10 /**
 *
 */ 2 4 this 3 1808  2 ts 1 1633  
670 0 0 7 1032 1633 0 0 10 /**
 *
 */ 1 4 this 3 1806  
671 0 0 7 1033 1633 0 0 10 /**
 *
 */ 1 4 this 3 1806  
672 0 0 7 1034 1603 0 0 10 /**
 *
 */ 1 4 this 3 1806  
673 0 0 7 1035 1603 0 0 10 /**
 *
 */ 1 4 this 3 1806  
674 0 0 6 1036 1521 0 0 10 /**
 *
 */ 1 4 this 3 1806  
675 0 0 7 1044 1631 0 0 0 0 
676 0 0 7 1046 1811 0 0 10 /**
 *
 */ 1 4 copy 1 1809  
677 0 0 7 1046 1811 0 0 10 /**
 *
 */ 2 6 points 1 1763  5 radii 1 1812  
678 0 0 7 1047 1811 0 0 0 2 4 this 3 1811  4 copy 1 1809  
679 0 0 6 1048 1523 0 0 10 /**
 *
 */ 1 4 this 3 1809  
680 0 0 7 1049 1621 0 0 10 /**
 *
 */ 2 4 this 3 1809  5 index 1 1523  
681 0 0 6 1050 1521 0 0 10 /**
 *
 */ 2 4 this 3 1809  5 index 1 1523  
682 0 0 7 1054 1631 0 0 0 0 
683 0 0 7 1056 1819 0 0 10 /**
 *
 */ 1 4 copy 1 1817  
684 0 0 7 1056 1819 0 0 10 /**
 *
 */ 2 6 normal 1 1659  8 constant 1 1521  
685 0 0 7 1057 1819 0 0 0 2 4 this 3 1819  4 copy 1 1817  
686 0 0 7 1058 1622 0 0 10 /**
 *
 */ 1 4 this 3 1817  
687 0 0 6 1059 1521 0 0 10 /**
 *
 */ 1 4 this 3 1817  
688 0 0 7 1060 1819 0 0 10 /**
 *
 */ 1 5 solid 1 1820  
689 0 0 7 1063 1631 0 0 0 0 
690 0 0 7 1065 1823 0 0 10 /**
 *
 */ 5 6 node_a 1 1676  6 node_b 1 1676  7 frame_a 1 1633  7 frame_b 1 1633  11 use_frame_a 1 1529  
691 0 0 7 1065 1823 0 0 10 /**
 *
 */ 3 6 node_a 1 1676  7 frame_a 1 1633  10 useFrame_a 1 1529  
692 0 0 6 1066 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
693 0 0 6 1067 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
694 0 0 6 1068 1521 0 0 9 // Limits 1 4 this 3 1824  
695 0 0 6 1069 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
696 0 0 6 1070 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
697 0 0 6 1071 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
698 0 0 4 1072 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  5 value 1 1521  
699 0 0 4 1073 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  5 value 1 1521  
700 0 0 4 1074 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  5 value 1 1521  
701 0 0 4 1075 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  5 value 1 1521  
702 0 0 4 1076 1627 0 0 15 // Linear motor 2 4 this 3 1823  2 on 1 1529  
703 0 0 4 1077 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  15 target_velocity 1 1521  
704 0 0 4 1078 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  9 max_force 1 1521  
705 0 0 6 1079 1529 0 0 10 /**
 *
 */ 1 4 this 3 1824  
706 0 0 6 1080 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
707 0 0 6 1081 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
708 0 0 4 1082 1627 0 0 16 // Angular motor 2 4 this 3 1823  2 on 1 1529  
709 0 0 4 1083 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  15 target_velocity 1 1521  
710 0 0 4 1084 1627 0 0 10 /**
 *
 */ 2 4 this 3 1823  9 max_force 1 1521  
711 0 0 6 1085 1529 0 0 10 /**
 *
 */ 1 4 this 3 1824  
712 0 0 6 1086 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
713 0 0 6 1087 1521 0 0 10 /**
 *
 */ 1 4 this 3 1824  
714 0 0 4 1088 1627 0 0 9 // Frames 3 4 this 3 1823  4 ts_a 1 1633  4 ts_b 1 1633  
715 0 0 7 1089 1633 0 0 10 /**
 *
 */ 1 4 this 3 1824  
716 0 0 7 1090 1633 0 0 10 /**
 *
 */ 1 4 this 3 1824  
717 0 0 7 1105 1631 0 0 0 0 
718 0 0 7 1112 1719 1474 0 10 /**
 *
 */ 0 
719 0 0 7 1112 1719 1474 0 0 1 6 param0 0 1826  
720 0 0 4 1114 1627 0 0 10 /**
 *
 */ 2 4 this 3 1719  4 goal 1 1521  
721 0 0 4 1115 1627 0 0 10 /**
 *
 */ 2 4 this 3 1719  9 maxtorque 1 1521  
722 0 0 4 1116 1627 0 0 10 /**
 *
 */ 2 4 this 3 1719  5 angle 1 1521  
723 0 0 4 1117 1627 0 0 10 /**
 *
 */ 2 4 this 3 1719  4 sign 1 1521  
724 0 0 6 1110 1828 0 0 0 1 4 this 3 1719  
725 0 0 6 1111 1719 0 0 0 2 4 this 3 1828  4 this 1 1828  
726 0 0 7 1119 1584 0 0 10 /**
 *
 */ 1 4 this 3 1829  
727 0 0 7 1121 1631 0 0 0 0 
728 0 0 7 1123 1833 0 0 10 /**
 *
 */ 1 4 copy 1 1831  
729 0 0 7 1123 1833 0 0 10 /**
 *
 */ 1 6 radius 1 1521  
730 0 0 7 1124 1833 0 0 0 2 4 this 3 1833  4 copy 1 1831  
731 0 0 6 1125 1521 0 0 10 /**
 *
 */ 1 4 this 3 1831  
732 0 0 7 1126 1833 0 0 10 /**
 *
 */ 1 5 solid 1 1834  
733 0 0 7 1128 1631 0 0 0 0 
734 0 0 7 1130 1837 0 0 10 /**
 *
 */ 4 6 node_a 1 1676  6 node_b 1 1676  7 pivot_a 1 1679  7 pivot_b 1 1679  
735 0 0 7 1130 1837 0 0 10 /**
 *
 */ 2 6 node_a 1 1676  7 pivot_a 1 1679  
736 0 0 4 1131 1627 0 0 9 // Pivots 2 4 this 3 1837  7 pivot_a 1 1679  
737 0 0 4 1132 1627 0 0 10 /**
 *
 */ 2 4 this 3 1837  7 pivot_b 1 1679  
738 0 0 7 1133 1621 0 0 10 /**
 *
 */ 1 4 this 3 1838  
739 0 0 7 1134 1621 0 0 10 /**
 *
 */ 1 4 this 3 1838  
740 0 0 7 1137 1631 0 0 0 0 
741 0 0 7 1139 1842 1495 0 10 /**
 *
 */ 1 8 timestep 1 1840  
742 0 0 6 1140 1521 0 0 10 /**
 *
 */ 1 4 this 3 1843  
743 0 0 7 1142 1631 0 0 0 0 
744 0 0 7 1145 1845 0 0 10 /**
 *
 */ 0 
745 0 0 4 1146 1627 0 0 347 /**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 5 4 this 3 1845  2 p0 1 1679  2 p1 1 1679  2 p2 1 1679  25 remove_duplicate_vertices 1 1529  
746 0 0 4 1147 1627 0 0 452 /**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1845  6 points 1 1763  7 indices 1 1846  25 remove_duplicate_vertices 1 1529  
747 0 0 4 1148 1627 0 0 461 /**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1845  4 geom 1 1720  25 remove_duplicate_vertices 1 1529  2 ts 1 1633  
748 0 0 4 1149 1627 0 0 254 /**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */ 2 4 this 3 1845  8 distance 1 1521  
749 0 0 4 1150 1627 0 0 239 /**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */ 3 4 this 3 1845  9 num_verts 1 1523  11 num_indices 1 1523  
750 0 0 6 1151 1523 0 0 65 /**
 * Returns the number of triangles in this triangle mesh.
 */ 1 4 this 3 1848  
751 0 0 6 1152 1521 0 0 110 /**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */ 1 4 this 3 1848  
752 0 0 4 1153 1627 0 0 10 /**
 *
 */ 2 4 this 3 1848  3 out 1 1850  
753 0 0 4 1154 1627 0 0 10 /**
 *
 */ 3 4 this 3 1848  3 out 1 1850  12 indent_level 1 1523  
754 0 0 7 1157 1631 0 0 0 0 
755 0 0 7 1159 1852 0 0 93 /**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */ 4 4 mesh 1 1845  7 dynamic 1 1529  8 compress 1 1529  3 bvh 1 1529  
756 0 0 7 1159 1852 0 0 10 /**
 *
 */ 1 4 copy 1 1853  
757 0 0 7 1160 1852 0 0 0 2 4 this 3 1852  4 copy 1 1853  
758 0 0 4 1161 1627 0 0 10 /**
 *
 */ 3 4 this 3 1852  8 aabb_min 1 1679  8 aabb_max 1 1679  
759 0 0 6 1162 1529 0 0 10 /**
 *
 */ 1 4 this 3 1853  
760 0 0 6 1163 1529 0 0 10 /**
 *
 */ 1 4 this 3 1853  
761 0 0 7 1166 1631 0 0 0 0 
762 0 0 6 2 1513 0 0 10 /**
 *
 */ 0 
763 0 0 6 3 1523 0 0 60 /**
 * Returns the version of the linked Bullet library.
 */ 0 
342
1513 12 BulletUpAxis 0 532481 12 BulletUpAxis 12 BulletUpAxis 0 0 0 0 0 0 0 0 0 0 3 4 X_up 4 X_up 0
0 4 Y_up 4 Y_up 0
1 4 Z_up 4 Z_up 0
2 0 0

1514 12 BulletRayHit 0 140289 12 BulletRayHit 12 BulletRayHit 0 0 0 1 773 774 6 1855 1856 1857 1858 1859 1860 7 766 767 768 769 770 771 772 0 0 0 0 0 10
/**
 *
 */

1515 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1516 0 0 0 0 0 0 0 0 0 0

1516 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1517 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1519 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1521 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1522 0 0 0 0 0 0 0 0 0 0

1522 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1523 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1524 22 BulletAllHitsRayResult 0 140289 22 BulletAllHitsRayResult 22 BulletAllHitsRayResult 0 0 0 0 784 4 1861 1862 1863 1864 7 777 778 779 780 781 782 783 1 2152 0 1 3 1525 775 776 0 0 10
/**
 *
 */

1525 24 AllHitsRayResultCallback 0 263169 42 btCollisionWorld::AllHitsRayResultCallback 42 btCollisionWorld::AllHitsRayResultCallback 1526 0 0 0 0 0 0 0 0 0 0 0 0

1526 16 btCollisionWorld 0 2048 16 btCollisionWorld 16 btCollisionWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1527 11 BulletShape 0 75777 11 BulletShape 11 BulletShape 0 0 0 0 0 10 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 12 785 786 787 788 789 790 791 792 793 794 795 796 0 0 1 0 1528 0 0 0 0 10
/**
 *
 */

1528 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1529 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1530 12 char const * 0 8576 12 char const * 12 char const * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1531 10 char const 0 8832 10 char const 10 char const 0 0 1532 0 0 0 0 0 0 0 0 0 0

1532 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1533 14 BoundingSphere 0 2048 14 BoundingSphere 14 BoundingSphere 0 0 0 0 0 0 0 0 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1534 33 BulletBaseCharacterControllerNode 0 141313 33 BulletBaseCharacterControllerNode 33 BulletBaseCharacterControllerNode 0 0 0 0 798 0 1 797 0 0 1 0 1516 0 0 0 0 10
/**
 *
 */

1535 14 BulletBodyNode 0 75777 14 BulletBodyNode 14 BulletBodyNode 0 0 0 0 0 20 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 44 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 1 2153 0 1 0 1516 0 0 0 0 10
/**
 *
 */

1536 13 BulletShape * 0 8576 13 BulletShape * 13 BulletShape * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1537 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1539 32 ConstPointerTo< TransformState > 0 2048 32 ConstPointerTo< TransformState > 32 ConstPointerTo< TransformState > 0 0 0 0 0 0 0 0 0 0 0 0 0

1540 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 1541 0 0 0 0 0 0 0 0 0 0

1541 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1542 14 BulletBoxShape 0 75777 14 BulletBoxShape 14 BulletBoxShape 0 0 0 1 843 0 2 1895 1896 5 844 845 846 847 848 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1543 18 BulletCapsuleShape 0 75777 18 BulletCapsuleShape 18 BulletCapsuleShape 0 0 0 1 849 0 2 1897 1898 4 850 851 852 853 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1544 29 BulletCharacterControllerNode 0 75777 29 BulletCharacterControllerNode 29 BulletCharacterControllerNode 0 0 0 1 854 798 4 1899 1900 1901 1902 15 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 0 0 1 0 1534 0 0 0 0 10
/**
 *
 */

1545 25 BulletClosestHitRayResult 0 140289 25 BulletClosestHitRayResult 25 BulletClosestHitRayResult 0 0 0 1 882 883 8 1903 1904 1905 1906 1907 1908 1909 1910 10 872 873 874 875 876 877 878 879 880 881 0 0 1 3 1546 870 871 0 0 10
/**
 *
 */

1546 24 ClosestRayResultCallback 0 263169 42 btCollisionWorld::ClosestRayResultCallback 42 btCollisionWorld::ClosestRayResultCallback 1526 0 0 0 0 0 0 0 0 0 0 0 0

1547 27 BulletClosestHitSweepResult 0 140289 27 BulletClosestHitSweepResult 27 BulletClosestHitSweepResult 0 0 0 1 894 895 6 1911 1912 1913 1914 1915 1916 8 886 887 888 889 890 891 892 893 0 0 1 3 1548 884 885 0 0 10
/**
 *
 */

1548 27 ClosestConvexResultCallback 0 263169 45 btCollisionWorld::ClosestConvexResultCallback 45 btCollisionWorld::ClosestConvexResultCallback 1526 0 0 0 0 0 0 0 0 0 0 0 0

1549 15 BulletConeShape 0 75777 15 BulletConeShape 15 BulletConeShape 0 0 0 1 896 0 2 1917 1918 4 897 898 899 900 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1550 16 BulletConstraint 0 75777 16 BulletConstraint 16 BulletConstraint 0 0 0 0 0 6 1919 1936 1937 1938 1939 1940 13 901 902 903 904 905 906 907 908 909 910 911 912 950 0 0 1 0 1551 0 0 0 1 1552 10
/**
 *
 */

1551 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1552 15 ConstraintParam 0 794624 33 BulletConstraint::ConstraintParam 33 BulletConstraint::ConstraintParam 1550 0 0 0 0 0 0 0 0 0 4 6 CP_erp 24 BulletConstraint::CP_erp 0
1 11 CP_stop_erp 29 BulletConstraint::CP_stop_erp 0
2 6 CP_cfm 24 BulletConstraint::CP_cfm 0
3 11 CP_stop_cfm 29 BulletConstraint::CP_stop_cfm 0
4 0 0

1553 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1554 19 BulletRigidBodyNode 0 75777 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 1 913 0 16 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 36 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 0 0 1 0 1535 0 0 0 0 10
/**
 *
 */

1555 8 LMatrix3 0 2105344 8 LMatrix3 8 LMatrix3 0 0 1556 0 0 0 0 0 0 0 0 0 0

1556 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1557 25 BulletConeTwistConstraint 0 75777 25 BulletConeTwistConstraint 25 BulletConeTwistConstraint 0 0 0 1 951 0 3 1941 1942 1943 13 952 953 954 955 956 957 958 959 960 961 962 963 964 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1558 19 BulletManifoldPoint 0 26625 19 BulletManifoldPoint 19 BulletManifoldPoint 0 0 0 0 965 23 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 35 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 0 0 0 0 0 10
/**
 *
 */

1559 25 BulletContactCallbackData 0 10241 25 BulletContactCallbackData 25 BulletContactCallbackData 0 0 0 1 1001 0 7 1967 1968 1969 1970 1971 1972 1973 8 1002 1003 1004 1005 1006 1007 1008 1009 0 0 1 0 1560 0 0 0 0 10
/**
 *
 */

1560 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1561 13 BulletContact 0 140289 13 BulletContact 13 BulletContact 0 0 0 0 1017 7 1974 1975 1976 1977 1978 1979 1980 7 1010 1011 1012 1013 1014 1015 1016 0 0 0 0 0 10
/**
 *
 */

1562 19 BulletContactResult 0 140289 19 BulletContactResult 19 BulletContactResult 0 0 0 0 1022 1 1981 2 1020 1021 1 2154 0 1 3 1563 1018 1019 0 0 10
/**
 *
 */

1563 21 ContactResultCallback 0 263169 39 btCollisionWorld::ContactResultCallback 39 btCollisionWorld::ContactResultCallback 1526 0 0 0 0 0 0 0 0 0 0 0 0

1564 15 BulletDebugNode 0 75777 15 BulletDebugNode 15 BulletDebugNode 0 0 0 1 1023 0 4 1982 1983 1984 1985 10 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 0 0 1 0 1565 0 0 0 0 10
/**
 *
 */

1565 8 GeomNode 0 2049 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

1566 15 BulletGhostNode 0 75777 15 BulletGhostNode 15 BulletGhostNode 0 0 0 1 1034 0 1 1986 3 1035 1036 1037 1 2155 0 1 0 1535 0 0 0 0 10
/**
 *
 */

1567 25 BulletSoftBodyNodeElement 0 26625 25 BulletSoftBodyNodeElement 25 BulletSoftBodyNodeElement 0 0 0 1 1046 1038 6 1987 1988 1989 1990 1991 1992 7 1039 1040 1041 1042 1043 1044 1045 0 0 0 0 0 10
/**
 *
 */

1568 18 BulletSoftBodyNode 0 75777 18 BulletSoftBodyNode 18 BulletSoftBodyNode 0 0 0 0 0 7 1993 2019 2025 2026 2027 2028 2032 45 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1168 2 2156 2157 0 1 0 1535 0 0 0 0 10
/**
 *
 */

1569 20 BulletSoftBodyConfig 0 26625 20 BulletSoftBodyConfig 20 BulletSoftBodyConfig 0 0 0 1 1145 1091 25 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 53 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 0 0 0 0 2 1570 1571 10
/**
 *
 */

1570 13 CollisionFlag 0 794624 35 BulletSoftBodyConfig::CollisionFlag 35 BulletSoftBodyConfig::CollisionFlag 1569 0 0 0 0 0 0 0 0 0 7 21 CF_rigid_vs_soft_mask 43 BulletSoftBodyConfig::CF_rigid_vs_soft_mask 34
// RVSmask: Rigid versus soft mask
15 17 CF_sdf_rigid_soft 39 BulletSoftBodyConfig::CF_sdf_rigid_soft 35
// SDF_RS:  SDF based rigid vs soft
1 21 CF_cluster_rigid_soft 43 BulletSoftBodyConfig::CF_cluster_rigid_soft 43
// CL_RS:   Cluster vs convex rigid vs soft
2 20 CF_soft_vs_soft_mask 42 BulletSoftBodyConfig::CF_soft_vs_soft_mask 33
// SVSmask: Soft versus soft mask
48 24 CF_vertex_face_soft_soft 46 BulletSoftBodyConfig::CF_vertex_face_soft_soft 48
// VF_SS:   Vertex vs face soft vs soft handling
16 20 CF_cluster_soft_soft 42 BulletSoftBodyConfig::CF_cluster_soft_soft 52
// CL_SS:   Cluster vs cluster soft vs soft handling
32 15 CF_cluster_self 37 BulletSoftBodyConfig::CF_cluster_self 44
// CL_SELF: Cluster soft body self collision
64 0 0

1571 9 AeroModel 0 794624 31 BulletSoftBodyConfig::AeroModel 31 BulletSoftBodyConfig::AeroModel 1569 0 0 0 0 0 0 0 0 0 5 15 AM_vertex_point 37 BulletSoftBodyConfig::AM_vertex_point 58
// V_Point:    Vertex normals are oriented toward velocity
0 19 AM_vertex_two_sided 41 BulletSoftBodyConfig::AM_vertex_two_sided 58
// V_TwoSided: Vertex normals are fliped to match velocity
1 19 AM_vertex_one_sided 41 BulletSoftBodyConfig::AM_vertex_one_sided 48
// V_OneSided: Vertex normals are taken as it is
2 17 AM_face_two_sided 39 BulletSoftBodyConfig::AM_face_two_sided 56
// F_TwoSided: Face normals are fliped to match velocity
3 17 AM_face_one_sided 39 BulletSoftBodyConfig::AM_face_one_sided 46
// F_OneSided: Face normals are taken as it is
4 0 0

1572 23 BulletSoftBodyWorldInfo 0 26625 23 BulletSoftBodyWorldInfo 23 BulletSoftBodyWorldInfo 0 0 0 1 1158 1146 5 2020 2021 2022 2023 2024 11 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 0 0 0 0 0 10
/**
 *
 */

1573 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1574 22 BulletSoftBodyMaterial 0 26625 22 BulletSoftBodyMaterial 22 BulletSoftBodyMaterial 0 0 0 1 1167 1159 3 2029 2030 2031 7 1160 1161 1162 1163 1164 1165 1166 0 0 0 0 0 10
/**
 *
 */

1575 19 BulletVehicleTuning 0 10241 19 BulletVehicleTuning 19 BulletVehicleTuning 0 0 0 0 0 6 2033 2034 2035 2036 2037 2038 12 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 0 0 0 0 0 10
/**
 *
 */

1576 13 BulletVehicle 0 75777 13 BulletVehicle 13 BulletVehicle 0 0 0 1 1181 0 5 2039 2040 2041 2042 2076 15 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1256 1 2158 0 1 0 1551 0 0 0 0 257
/**
 * Simulates a raycast vehicle which casts a ray per wheel at the ground as a
 * cheap replacement for complex suspension simulation.  The suspension can be
 * tuned in various ways.  It is possible to add a (probably) arbitrary number
 * of wheels.
 */

1577 11 BulletWheel 0 26625 11 BulletWheel 11 BulletWheel 0 0 0 1 1255 1196 25 2043 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 48 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 0 0 0 0 0 145
/**
 * One wheel of a BulletVehicle.  Instances should not be created directly but
 * using the factory method BulletVehicle::create_wheel().
 */

1578 22 BulletWheelRaycastInfo 0 26625 22 BulletWheelRaycastInfo 22 BulletWheelRaycastInfo 0 0 0 1 1254 1245 8 2044 2045 2046 2047 2048 2049 2050 2051 8 1246 1247 1248 1249 1250 1251 1252 1253 0 0 0 0 0 10
/**
 *
 */

1579 11 BulletWorld 0 75777 11 BulletWorld 11 BulletWorld 0 0 0 1 1257 0 10 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 51 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 7 2159 2160 2161 2162 2163 2164 2165 0 1 0 1551 0 0 0 2 1580 1581 10
/**
 *
 */

1580 19 BroadphaseAlgorithm 0 794624 32 BulletWorld::BroadphaseAlgorithm 32 BulletWorld::BroadphaseAlgorithm 1579 0 0 0 0 0 0 0 0 0 2 18 BA_sweep_and_prune 31 BulletWorld::BA_sweep_and_prune 0
0 20 BA_dynamic_aabb_tree 33 BulletWorld::BA_dynamic_aabb_tree 0
1 0 16
// Configuration

1581 15 FilterAlgorithm 0 794624 28 BulletWorld::FilterAlgorithm 28 BulletWorld::FilterAlgorithm 1579 0 0 0 0 0 0 0 0 0 3 7 FA_mask 20 BulletWorld::FA_mask 0
0 14 FA_groups_mask 27 BulletWorld::FA_groups_mask 0
1 11 FA_callback 24 BulletWorld::FA_callback 0
2 0 0

1582 17 BulletDebugNode * 0 8576 17 BulletDebugNode * 17 BulletDebugNode * 0 0 1564 0 0 0 0 0 0 0 0 0 0

1583 17 BulletGhostNode * 0 8576 17 BulletGhostNode * 17 BulletGhostNode * 0 0 1566 0 0 0 0 0 0 0 0 0 0

1584 20 BulletSoftBodyNode * 0 8576 20 BulletSoftBodyNode * 20 BulletSoftBodyNode * 0 0 1568 0 0 0 0 0 0 0 0 0 0

1585 35 BulletBaseCharacterControllerNode * 0 8576 35 BulletBaseCharacterControllerNode * 35 BulletBaseCharacterControllerNode * 0 0 1534 0 0 0 0 0 0 0 0 0 0

1586 15 BulletVehicle * 0 8576 15 BulletVehicle * 15 BulletVehicle * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1587 18 BulletConstraint * 0 8576 18 BulletConstraint * 18 BulletConstraint * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1588 26 BulletPersistentManifold * 0 8576 26 BulletPersistentManifold * 26 BulletPersistentManifold * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1589 24 BulletPersistentManifold 0 26625 24 BulletPersistentManifold 24 BulletPersistentManifold 0 0 0 1 1307 1299 5 2087 2088 2089 2090 2091 7 1300 1301 1302 1303 1304 1305 1306 1 2166 0 0 0 0 10
/**
 *
 */

1590 21 BulletManifoldPoint * 0 8576 21 BulletManifoldPoint * 21 BulletManifoldPoint * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1591 21 BulletConvexHullShape 0 75777 21 BulletConvexHullShape 21 BulletConvexHullShape 0 0 0 1 1318 0 0 5 1319 1320 1321 1322 1323 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1592 27 BulletConvexPointCloudShape 0 75777 27 BulletConvexPointCloudShape 27 BulletConvexPointCloudShape 0 0 0 1 1324 0 1 2092 3 1325 1326 1327 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1593 19 BulletCylinderShape 0 75777 19 BulletCylinderShape 19 BulletCylinderShape 0 0 0 1 1328 0 3 2093 2094 2095 5 1329 1330 1331 1332 1333 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1594 24 BulletFilterCallbackData 0 141313 24 BulletFilterCallbackData 24 BulletFilterCallbackData 0 0 0 1 1334 1340 3 2096 2097 2098 5 1335 1336 1337 1338 1339 0 0 1 0 1560 0 0 0 0 10
/**
 *
 */

1595 26 BulletRotationalLimitMotor 0 26625 26 BulletRotationalLimitMotor 26 BulletRotationalLimitMotor 0 0 0 1 1341 1342 6 2099 2100 2101 2102 2103 2104 18 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1596 29 BulletTranslationalLimitMotor 0 26625 29 BulletTranslationalLimitMotor 29 BulletTranslationalLimitMotor 0 0 0 1 1361 1362 3 2105 2106 2107 17 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1597 23 BulletGenericConstraint 0 75777 23 BulletGenericConstraint 23 BulletGenericConstraint 0 0 0 1 1380 0 3 2108 2109 2110 11 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1598 22 BulletHeightfieldShape 0 75777 22 BulletHeightfieldShape 22 BulletHeightfieldShape 0 0 0 1 1392 0 0 3 1393 1394 1395 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1599 12 BulletHelper 0 141313 12 BulletHelper 12 BulletHelper 0 0 0 1 1404 1405 2 2111 2112 8 1396 1397 1398 1399 1400 1401 1402 1403 0 0 0 0 0 10
/**
 *
 */

1600 25 PointerTo< InternalName > 0 2048 25 PointerTo< InternalName > 25 PointerTo< InternalName > 0 0 0 0 0 0 0 0 0 0 0 0 0

1601 21 BulletHingeConstraint 0 75777 21 BulletHingeConstraint 21 BulletHingeConstraint 0 0 0 1 1406 0 6 2113 2114 2115 2116 2117 2118 15 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 0 0 1 0 1550 0 0 0 0 158
/**
 * The hinge constraint lets two bodies rotate around a given axis while
 * adhering to specified limits.  It's motor can apply angular force to them.
 */

1602 23 BulletMinkowskiSumShape 0 75777 23 BulletMinkowskiSumShape 23 BulletMinkowskiSumShape 0 0 0 1 1422 0 5 2119 2120 2121 2122 2123 9 1423 1424 1425 1426 1427 1428 1429 1430 1431 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1603 19 BulletShape const * 0 8576 19 BulletShape const * 19 BulletShape const * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1604 17 BulletShape const 0 8832 17 BulletShape const 17 BulletShape const 0 0 1527 0 0 0 0 0 0 0 0 0 0

1605 22 BulletMultiSphereShape 0 75777 22 BulletMultiSphereShape 22 BulletMultiSphereShape 0 0 0 1 1432 0 3 2124 2125 2126 5 1433 1434 1435 1436 1437 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1606 16 BulletPlaneShape 0 75777 16 BulletPlaneShape 16 BulletPlaneShape 0 0 0 1 1438 0 2 2127 2128 5 1439 1440 1441 1442 1443 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1607 22 BulletSliderConstraint 0 75777 22 BulletSliderConstraint 22 BulletSliderConstraint 0 0 0 1 1444 0 14 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 26 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1608 21 BulletSoftBodyControl 0 26625 21 BulletSoftBodyControl 21 BulletSoftBodyControl 0 0 0 1 1473 1474 0 4 1475 1476 1477 1478 0 0 1 3 1609 1471 1472 0 0 10
/**
 *
 */

1609 8 IControl 0 263169 28 btSoftBody::AJoint::IControl 28 btSoftBody::AJoint::IControl 1610 0 0 0 0 0 0 0 0 0 0 0 0

1610 6 AJoint 0 263168 18 btSoftBody::AJoint 18 btSoftBody::AJoint 1611 0 0 0 0 0 0 0 0 0 0 0 0

1611 10 btSoftBody 0 2048 10 btSoftBody 10 btSoftBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1612 19 BulletSoftBodyShape 0 75777 19 BulletSoftBodyShape 19 BulletSoftBodyShape 0 0 0 0 0 1 2143 2 1479 1480 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1613 17 BulletSphereShape 0 75777 17 BulletSphereShape 17 BulletSphereShape 0 0 0 1 1481 0 1 2144 4 1482 1483 1484 1485 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1614 25 BulletSphericalConstraint 0 75777 25 BulletSphericalConstraint 25 BulletSphericalConstraint 0 0 0 1 1486 0 2 2145 2146 5 1487 1488 1489 1490 1491 0 0 1 0 1550 0 0 0 0 328
/**
 * A constraint between two rigid bodies, each with a pivot point.  The pivot
 * points are described in the body's local space.  The constraint limits
 * movement of the two rigid bodies in such a way that the pivot points match
 * in global space.  The spherical constraint can be seen as a "ball and
 * socket" joint.
 */

1615 22 BulletTickCallbackData 0 141313 22 BulletTickCallbackData 22 BulletTickCallbackData 0 0 0 1 1492 1495 1 2147 2 1493 1494 0 0 1 0 1560 0 0 0 0 10
/**
 *
 */

1616 18 BulletTriangleMesh 0 75777 18 BulletTriangleMesh 18 BulletTriangleMesh 0 0 0 1 1496 0 2 2148 2149 10 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 0 0 1 0 1528 0 0 0 0 10
/**
 *
 */

1617 23 BulletTriangleMeshShape 0 75777 23 BulletTriangleMeshShape 23 BulletTriangleMeshShape 0 0 0 1 1507 0 2 2150 2151 5 1508 1509 1510 1511 1512 0 0 1 0 1527 0 0 0 0 10
/**
 *
 */

1618 14 BulletRayHit * 0 8576 14 BulletRayHit * 14 BulletRayHit * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1619 20 BulletRayHit const * 0 8576 20 BulletRayHit const * 20 BulletRayHit const * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1620 18 BulletRayHit const 0 8832 18 BulletRayHit const 18 BulletRayHit const 0 0 1514 0 0 0 0 0 0 0 0 0 0

1621 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1622 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1519 0 0 0 0 0 0 0 0 0 0

1623 24 BulletAllHitsRayResult * 0 8576 24 BulletAllHitsRayResult * 24 BulletAllHitsRayResult * 0 0 1524 0 0 0 0 0 0 0 0 0 0

1624 30 BulletAllHitsRayResult const * 0 8576 30 BulletAllHitsRayResult const * 30 BulletAllHitsRayResult const * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 28 BulletAllHitsRayResult const 0 8832 28 BulletAllHitsRayResult const 28 BulletAllHitsRayResult const 0 0 1524 0 0 0 0 0 0 0 0 0 0

1626 26 AllHitsRayResultCallback * 0 8576 44 btCollisionWorld::AllHitsRayResultCallback * 44 btCollisionWorld::AllHitsRayResultCallback * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1627 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1628 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1629 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1630 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1631 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1630 0 0 0 0 0 0 0 0 0 0

1632 16 BulletBodyNode * 0 8576 16 BulletBodyNode * 16 BulletBodyNode * 0 0 1535 0 0 0 0 0 0 0 0 0 0

1633 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1634 0 0 0 0 0 0 0 0 0 0

1634 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1635 0 0 0 0 0 0 0 0 0 0

1635 14 TransformState 0 2048 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1636 22 BulletBodyNode const * 0 8576 22 BulletBodyNode const * 22 BulletBodyNode const * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1637 20 BulletBodyNode const 0 8832 20 BulletBodyNode const 20 BulletBodyNode const 0 0 1535 0 0 0 0 0 0 0 0 0 0

1638 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 1537 0 0 0 0 0 0 0 0 0 0

1639 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 1640 0 0 0 0 0 0 0 0 0 0

1640 13 CollisionNode 0 2048 13 CollisionNode 13 CollisionNode 0 0 0 0 0 0 0 0 0 0 0 0 261
/**
 * A node in the scene graph that can hold any number of CollisionSolids.
 * This may either represent a bit of static geometry in the scene that things
 * will collide with, or an animated object twirling around in the world and
 * running into things.
 */

1641 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1642 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1645 10 bool const 0 8832 10 bool const 10 bool const 0 0 1529 0 0 0 0 0 0 0 0 0 0

1646 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 1647 0 0 0 0 0 0 0 0 0 0

1647 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1648 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1649 22 BulletBoxShape const * 0 8576 22 BulletBoxShape const * 22 BulletBoxShape const * 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 20 BulletBoxShape const 0 8832 20 BulletBoxShape const 20 BulletBoxShape const 0 0 1542 0 0 0 0 0 0 0 0 0 0

1651 16 BulletBoxShape * 0 8576 16 BulletBoxShape * 16 BulletBoxShape * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1652 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 1654 0 0 0 0 0 0 0 0 0 0

1654 12 CollisionBox 0 2048 12 CollisionBox 12 CollisionBox 0 0 0 0 0 0 0 0 0 0 0 0 47
/**
 * A cuboid collision volume or object.
 */

1655 26 BulletCapsuleShape const * 0 8576 26 BulletCapsuleShape const * 26 BulletCapsuleShape const * 0 0 1656 0 0 0 0 0 0 0 0 0 0

1656 24 BulletCapsuleShape const 0 8832 24 BulletCapsuleShape const 24 BulletCapsuleShape const 0 0 1543 0 0 0 0 0 0 0 0 0 0

1657 20 BulletCapsuleShape * 0 8576 20 BulletCapsuleShape * 20 BulletCapsuleShape * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1658 31 BulletCharacterControllerNode * 0 8576 31 BulletCharacterControllerNode * 31 BulletCharacterControllerNode * 0 0 1544 0 0 0 0 0 0 0 0 0 0

1659 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1519 0 0 0 0 0 0 0 0 0 0

1661 37 BulletCharacterControllerNode const * 0 8576 37 BulletCharacterControllerNode const * 37 BulletCharacterControllerNode const * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1662 35 BulletCharacterControllerNode const 0 8832 35 BulletCharacterControllerNode const 35 BulletCharacterControllerNode const 0 0 1544 0 0 0 0 0 0 0 0 0 0

1663 33 BulletClosestHitRayResult const * 0 8576 33 BulletClosestHitRayResult const * 33 BulletClosestHitRayResult const * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1664 31 BulletClosestHitRayResult const 0 8832 31 BulletClosestHitRayResult const 31 BulletClosestHitRayResult const 0 0 1545 0 0 0 0 0 0 0 0 0 0

1665 27 BulletClosestHitRayResult * 0 8576 27 BulletClosestHitRayResult * 27 BulletClosestHitRayResult * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1666 26 ClosestRayResultCallback * 0 8576 44 btCollisionWorld::ClosestRayResultCallback * 44 btCollisionWorld::ClosestRayResultCallback * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1667 35 BulletClosestHitSweepResult const * 0 8576 35 BulletClosestHitSweepResult const * 35 BulletClosestHitSweepResult const * 0 0 1668 0 0 0 0 0 0 0 0 0 0

1668 33 BulletClosestHitSweepResult const 0 8832 33 BulletClosestHitSweepResult const 33 BulletClosestHitSweepResult const 0 0 1547 0 0 0 0 0 0 0 0 0 0

1669 29 BulletClosestHitSweepResult * 0 8576 29 BulletClosestHitSweepResult * 29 BulletClosestHitSweepResult * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1670 29 ClosestConvexResultCallback * 0 8576 47 btCollisionWorld::ClosestConvexResultCallback * 47 btCollisionWorld::ClosestConvexResultCallback * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1671 23 BulletConeShape const * 0 8576 23 BulletConeShape const * 23 BulletConeShape const * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 21 BulletConeShape const 0 8832 21 BulletConeShape const 21 BulletConeShape const 0 0 1549 0 0 0 0 0 0 0 0 0 0

1673 17 BulletConeShape * 0 8576 17 BulletConeShape * 17 BulletConeShape * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1674 24 BulletConstraint const * 0 8576 24 BulletConstraint const * 24 BulletConstraint const * 0 0 1675 0 0 0 0 0 0 0 0 0 0

1675 22 BulletConstraint const 0 8832 22 BulletConstraint const 22 BulletConstraint const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1676 27 BulletRigidBodyNode const * 0 8576 27 BulletRigidBodyNode const * 27 BulletRigidBodyNode const * 0 0 1677 0 0 0 0 0 0 0 0 0 0

1677 25 BulletRigidBodyNode const 0 8832 25 BulletRigidBodyNode const 25 BulletRigidBodyNode const 0 0 1554 0 0 0 0 0 0 0 0 0 0

1678 10 LMatrix3 * 0 8576 10 LMatrix3 * 10 LMatrix3 * 0 0 1555 0 0 0 0 0 0 0 0 0 0

1679 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1680 0 0 0 0 0 0 0 0 0 0

1680 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1517 0 0 0 0 0 0 0 0 0 0

1681 27 BulletConeTwistConstraint * 0 8576 27 BulletConeTwistConstraint * 27 BulletConeTwistConstraint * 0 0 1557 0 0 0 0 0 0 0 0 0 0

1682 33 BulletConeTwistConstraint const * 0 8576 33 BulletConeTwistConstraint const * 33 BulletConeTwistConstraint const * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1683 31 BulletConeTwistConstraint const 0 8832 31 BulletConeTwistConstraint const 31 BulletConeTwistConstraint const 0 0 1557 0 0 0 0 0 0 0 0 0 0

1684 19 LQuaternion const * 0 8576 19 LQuaternion const * 19 LQuaternion const * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1685 17 LQuaternion const 0 8832 17 LQuaternion const 17 LQuaternion const 0 0 1686 0 0 0 0 0 0 0 0 0 0

1686 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1688 27 BulletManifoldPoint const * 0 8576 27 BulletManifoldPoint const * 27 BulletManifoldPoint const * 0 0 1689 0 0 0 0 0 0 0 0 0 0

1689 25 BulletManifoldPoint const 0 8832 25 BulletManifoldPoint const 25 BulletManifoldPoint const 0 0 1558 0 0 0 0 0 0 0 0 0 0

1690 27 BulletContactCallbackData * 0 8576 27 BulletContactCallbackData * 27 BulletContactCallbackData * 0 0 1559 0 0 0 0 0 0 0 0 0 0

1691 33 BulletContactCallbackData const * 0 8576 33 BulletContactCallbackData const * 33 BulletContactCallbackData const * 0 0 1692 0 0 0 0 0 0 0 0 0 0

1692 31 BulletContactCallbackData const 0 8832 31 BulletContactCallbackData const 31 BulletContactCallbackData const 0 0 1559 0 0 0 0 0 0 0 0 0 0

1693 15 BulletContact * 0 8576 15 BulletContact * 15 BulletContact * 0 0 1561 0 0 0 0 0 0 0 0 0 0

1694 21 BulletContact const * 0 8576 21 BulletContact const * 21 BulletContact const * 0 0 1695 0 0 0 0 0 0 0 0 0 0

1695 19 BulletContact const 0 8832 19 BulletContact const 19 BulletContact const 0 0 1561 0 0 0 0 0 0 0 0 0 0

1696 27 BulletContactResult const * 0 8576 27 BulletContactResult const * 27 BulletContactResult const * 0 0 1697 0 0 0 0 0 0 0 0 0 0

1697 25 BulletContactResult const 0 8832 25 BulletContactResult const 25 BulletContactResult const 0 0 1562 0 0 0 0 0 0 0 0 0 0

1698 21 BulletContactResult * 0 8576 21 BulletContactResult * 21 BulletContactResult * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1699 23 ContactResultCallback * 0 8576 41 btCollisionWorld::ContactResultCallback * 41 btCollisionWorld::ContactResultCallback * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1700 23 BulletDebugNode const * 0 8576 23 BulletDebugNode const * 23 BulletDebugNode const * 0 0 1701 0 0 0 0 0 0 0 0 0 0

1701 21 BulletDebugNode const 0 8832 21 BulletDebugNode const 21 BulletDebugNode const 0 0 1564 0 0 0 0 0 0 0 0 0 0

1702 23 BulletGhostNode const * 0 8576 23 BulletGhostNode const * 23 BulletGhostNode const * 0 0 1703 0 0 0 0 0 0 0 0 0 0

1703 21 BulletGhostNode const 0 8832 21 BulletGhostNode const 21 BulletGhostNode const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1704 33 BulletSoftBodyNodeElement const * 0 8576 33 BulletSoftBodyNodeElement const * 33 BulletSoftBodyNodeElement const * 0 0 1705 0 0 0 0 0 0 0 0 0 0

1705 31 BulletSoftBodyNodeElement const 0 8832 31 BulletSoftBodyNodeElement const 31 BulletSoftBodyNodeElement const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1706 27 BulletSoftBodyNodeElement * 0 8576 27 BulletSoftBodyNodeElement * 27 BulletSoftBodyNodeElement * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1707 22 BulletSoftBodyConfig * 0 8576 22 BulletSoftBodyConfig * 22 BulletSoftBodyConfig * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1708 25 BulletSoftBodyWorldInfo * 0 8576 25 BulletSoftBodyWorldInfo * 25 BulletSoftBodyWorldInfo * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1709 24 BulletSoftBodyMaterial * 0 8576 24 BulletSoftBodyMaterial * 24 BulletSoftBodyMaterial * 0 0 1574 0 0 0 0 0 0 0 0 0 0

1710 26 BulletSoftBodyNode const * 0 8576 26 BulletSoftBodyNode const * 26 BulletSoftBodyNode const * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 24 BulletSoftBodyNode const 0 8832 24 BulletSoftBodyNode const 24 BulletSoftBodyNode const 0 0 1568 0 0 0 0 0 0 0 0 0 0

1712 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1713 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 1714 0 0 0 0 0 0 0 0 0 0

1714 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1715 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 1716 0 0 0 0 0 0 0 0 0 0

1716 19 NurbsCurveEvaluator 0 2048 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 492
/**
 * This class is an abstraction for evaluating NURBS curves.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 *
 * This is not related to NurbsCurve, CubicCurveseg or any of the
 * ParametricCurve-derived objects in this module.  It is a completely
 * parallel implementation of NURBS curves, and will probably eventually
 * replace the whole ParametricCurve class hierarchy.
 */

1717 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 1718 0 0 0 0 0 0 0 0 0 0

1718 21 NurbsSurfaceEvaluator 0 2048 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 227
/**
 * This class is an abstraction for evaluating NURBS surfaces.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 */

1719 23 BulletSoftBodyControl * 0 8576 23 BulletSoftBodyControl * 23 BulletSoftBodyControl * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1720 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1714 0 0 0 0 0 0 0 0 0 0

1722 15 PTA_LVecBase3 * 0 8576 15 PTA_LVecBase3 * 15 PTA_LVecBase3 * 0 0 1723 0 0 0 0 0 0 0 0 0 0

1723 13 PTA_LVecBase3 0 2105344 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1725 0 0 0 0 0 0 0 0 0 0

1725 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1726 9 PTA_int * 0 8576 9 PTA_int * 9 PTA_int * 0 0 1727 0 0 0 0 0 0 0 0 0 0

1727 7 PTA_int 0 2105344 7 PTA_int 7 PTA_int 0 0 1728 0 0 0 0 0 0 0 0 0 0

1728 21 PointerToArray< int > 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

1729 28 BulletSoftBodyConfig const * 0 8576 28 BulletSoftBodyConfig const * 28 BulletSoftBodyConfig const * 0 0 1730 0 0 0 0 0 0 0 0 0 0

1730 26 BulletSoftBodyConfig const 0 8832 26 BulletSoftBodyConfig const 26 BulletSoftBodyConfig const 0 0 1569 0 0 0 0 0 0 0 0 0 0

1731 31 BulletSoftBodyWorldInfo const * 0 8576 31 BulletSoftBodyWorldInfo const * 31 BulletSoftBodyWorldInfo const * 0 0 1732 0 0 0 0 0 0 0 0 0 0

1732 29 BulletSoftBodyWorldInfo const 0 8832 29 BulletSoftBodyWorldInfo const 29 BulletSoftBodyWorldInfo const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1733 30 BulletSoftBodyMaterial const * 0 8576 30 BulletSoftBodyMaterial const * 30 BulletSoftBodyMaterial const * 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 28 BulletSoftBodyMaterial const 0 8832 28 BulletSoftBodyMaterial const 28 BulletSoftBodyMaterial const 0 0 1574 0 0 0 0 0 0 0 0 0 0

1735 21 BulletVehicleTuning * 0 8576 21 BulletVehicleTuning * 21 BulletVehicleTuning * 0 0 1575 0 0 0 0 0 0 0 0 0 0

1736 27 BulletVehicleTuning const * 0 8576 27 BulletVehicleTuning const * 27 BulletVehicleTuning const * 0 0 1737 0 0 0 0 0 0 0 0 0 0

1737 25 BulletVehicleTuning const 0 8832 25 BulletVehicleTuning const 25 BulletVehicleTuning const 0 0 1575 0 0 0 0 0 0 0 0 0 0

1738 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1579 0 0 0 0 0 0 0 0 0 0

1739 21 BulletVehicle const * 0 8576 21 BulletVehicle const * 21 BulletVehicle const * 0 0 1740 0 0 0 0 0 0 0 0 0 0

1740 19 BulletVehicle const 0 8832 19 BulletVehicle const 19 BulletVehicle const 0 0 1576 0 0 0 0 0 0 0 0 0 0

1741 13 BulletWheel * 0 8576 13 BulletWheel * 13 BulletWheel * 0 0 1577 0 0 0 0 0 0 0 0 0 0

1742 19 BulletWheel const * 0 8576 19 BulletWheel const * 19 BulletWheel const * 0 0 1743 0 0 0 0 0 0 0 0 0 0

1743 17 BulletWheel const 0 8832 17 BulletWheel const 17 BulletWheel const 0 0 1577 0 0 0 0 0 0 0 0 0 0

1744 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1745 0 0 0 0 0 0 0 0 0 0

1745 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1537 0 0 0 0 0 0 0 0 0 0

1746 24 BulletWheelRaycastInfo * 0 8576 24 BulletWheelRaycastInfo * 24 BulletWheelRaycastInfo * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1747 30 BulletWheelRaycastInfo const * 0 8576 30 BulletWheelRaycastInfo const * 30 BulletWheelRaycastInfo const * 0 0 1748 0 0 0 0 0 0 0 0 0 0

1748 28 BulletWheelRaycastInfo const 0 8832 28 BulletWheelRaycastInfo const 28 BulletWheelRaycastInfo const 0 0 1578 0 0 0 0 0 0 0 0 0 0

1749 19 BulletWorld const * 0 8576 19 BulletWorld const * 19 BulletWorld const * 0 0 1750 0 0 0 0 0 0 0 0 0 0

1750 17 BulletWorld const 0 8832 17 BulletWorld const 17 BulletWorld const 0 0 1579 0 0 0 0 0 0 0 0 0 0

1751 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1753 19 CollideMask const * 0 8576 19 CollideMask const * 19 CollideMask const * 0 0 1754 0 0 0 0 0 0 0 0 0 0

1754 17 CollideMask const 0 8832 17 CollideMask const 17 CollideMask const 0 0 1642 0 0 0 0 0 0 0 0 0 0

1755 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1756 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1757 0 0 0 0 0 0 0 0 0 0

1757 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1758 32 BulletPersistentManifold const * 0 8576 32 BulletPersistentManifold const * 32 BulletPersistentManifold const * 0 0 1759 0 0 0 0 0 0 0 0 0 0

1759 30 BulletPersistentManifold const 0 8832 30 BulletPersistentManifold const 30 BulletPersistentManifold const 0 0 1589 0 0 0 0 0 0 0 0 0 0

1760 23 BulletConvexHullShape * 0 8576 23 BulletConvexHullShape * 23 BulletConvexHullShape * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1761 29 BulletConvexHullShape const * 0 8576 29 BulletConvexHullShape const * 29 BulletConvexHullShape const * 0 0 1762 0 0 0 0 0 0 0 0 0 0

1762 27 BulletConvexHullShape const 0 8832 27 BulletConvexHullShape const 27 BulletConvexHullShape const 0 0 1591 0 0 0 0 0 0 0 0 0 0

1763 21 PTA_LVecBase3 const * 0 8576 21 PTA_LVecBase3 const * 21 PTA_LVecBase3 const * 0 0 1764 0 0 0 0 0 0 0 0 0 0

1764 19 PTA_LVecBase3 const 0 8832 19 PTA_LVecBase3 const 19 PTA_LVecBase3 const 0 0 1723 0 0 0 0 0 0 0 0 0 0

1765 35 BulletConvexPointCloudShape const * 0 8576 35 BulletConvexPointCloudShape const * 35 BulletConvexPointCloudShape const * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 33 BulletConvexPointCloudShape const 0 8832 33 BulletConvexPointCloudShape const 33 BulletConvexPointCloudShape const 0 0 1592 0 0 0 0 0 0 0 0 0 0

1767 29 BulletConvexPointCloudShape * 0 8576 29 BulletConvexPointCloudShape * 29 BulletConvexPointCloudShape * 0 0 1592 0 0 0 0 0 0 0 0 0 0

1768 27 BulletCylinderShape const * 0 8576 27 BulletCylinderShape const * 27 BulletCylinderShape const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 25 BulletCylinderShape const 0 8832 25 BulletCylinderShape const 25 BulletCylinderShape const 0 0 1593 0 0 0 0 0 0 0 0 0 0

1770 21 BulletCylinderShape * 0 8576 21 BulletCylinderShape * 21 BulletCylinderShape * 0 0 1593 0 0 0 0 0 0 0 0 0 0

1771 26 BulletFilterCallbackData * 0 8576 26 BulletFilterCallbackData * 26 BulletFilterCallbackData * 0 0 1594 0 0 0 0 0 0 0 0 0 0

1772 32 BulletFilterCallbackData const * 0 8576 32 BulletFilterCallbackData const * 32 BulletFilterCallbackData const * 0 0 1773 0 0 0 0 0 0 0 0 0 0

1773 30 BulletFilterCallbackData const 0 8832 30 BulletFilterCallbackData const 30 BulletFilterCallbackData const 0 0 1594 0 0 0 0 0 0 0 0 0 0

1774 34 BulletRotationalLimitMotor const * 0 8576 34 BulletRotationalLimitMotor const * 34 BulletRotationalLimitMotor const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 32 BulletRotationalLimitMotor const 0 8832 32 BulletRotationalLimitMotor const 32 BulletRotationalLimitMotor const 0 0 1595 0 0 0 0 0 0 0 0 0 0

1776 28 BulletRotationalLimitMotor * 0 8576 28 BulletRotationalLimitMotor * 28 BulletRotationalLimitMotor * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1777 37 BulletTranslationalLimitMotor const * 0 8576 37 BulletTranslationalLimitMotor const * 37 BulletTranslationalLimitMotor const * 0 0 1778 0 0 0 0 0 0 0 0 0 0

1778 35 BulletTranslationalLimitMotor const 0 8832 35 BulletTranslationalLimitMotor const 35 BulletTranslationalLimitMotor const 0 0 1596 0 0 0 0 0 0 0 0 0 0

1779 31 BulletTranslationalLimitMotor * 0 8576 31 BulletTranslationalLimitMotor * 31 BulletTranslationalLimitMotor * 0 0 1596 0 0 0 0 0 0 0 0 0 0

1780 25 BulletGenericConstraint * 0 8576 25 BulletGenericConstraint * 25 BulletGenericConstraint * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1781 31 BulletGenericConstraint const * 0 8576 31 BulletGenericConstraint const * 31 BulletGenericConstraint const * 0 0 1782 0 0 0 0 0 0 0 0 0 0

1782 29 BulletGenericConstraint const 0 8832 29 BulletGenericConstraint const 29 BulletGenericConstraint const 0 0 1597 0 0 0 0 0 0 0 0 0 0

1783 30 BulletHeightfieldShape const * 0 8576 30 BulletHeightfieldShape const * 30 BulletHeightfieldShape const * 0 0 1784 0 0 0 0 0 0 0 0 0 0

1784 28 BulletHeightfieldShape const 0 8832 28 BulletHeightfieldShape const 28 BulletHeightfieldShape const 0 0 1598 0 0 0 0 0 0 0 0 0 0

1785 24 BulletHeightfieldShape * 0 8576 24 BulletHeightfieldShape * 24 BulletHeightfieldShape * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1786 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 1787 0 0 0 0 0 0 0 0 0 0

1787 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 1788 0 0 0 0 0 0 0 0 0 0

1788 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1516
/**
 * The name of this class derives from the fact that we originally implemented
 * it as a layer on top of the "pnm library", based on netpbm, which was built
 * to implement pbm, pgm, and pbm files, and is the underlying support of a
 * number of public-domain image file converters.  Nowadays we are no longer
 * derived directly from the pnm library, mainly to allow support of C++
 * iostreams instead of the C stdio FILE interface.
 *
 * Conceptually, a PNMImage is a two-dimensional array of xels, which are the
 * PNM-defined generic pixel type.  Each xel may have a red, green, and blue
 * component, or (if the image is grayscale) a gray component.  The image may
 * be read in, the individual xels manipulated, and written out again, or a
 * black image may be constructed from scratch.
 *
 * A PNMImage has a color space and a maxval, the combination of which defines
 * how a floating-point linear color value is encoded as an integer value in
 * memory.  The functions ending in _val operate on encoded colors, whereas
 * the regular ones work with linear floating-point values.  All operations
 * are color space correct unless otherwise specified.
 *
 * The image is of size XSize() by YSize() xels, numbered from top to bottom,
 * left to right, beginning at zero.
 *
 * Files can be specified by filename, or by an iostream pointer.  The
 * filename "-" refers to stdin or stdout.
 *
 * This class is not inherently thread-safe; use it from a single thread or
 * protect access using a mutex.
 */

1789 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1790 0 0 0 0 0 0 0 0 0 0

1790 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1791 14 BulletHelper * 0 8576 14 BulletHelper * 14 BulletHelper * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1792 20 BulletHelper const * 0 8576 20 BulletHelper const * 20 BulletHelper const * 0 0 1793 0 0 0 0 0 0 0 0 0 0

1793 18 BulletHelper const 0 8832 18 BulletHelper const 18 BulletHelper const 0 0 1599 0 0 0 0 0 0 0 0 0 0

1794 18 NodePathCollection 0 2048 18 NodePathCollection 18 NodePathCollection 0 0 0 0 0 0 0 0 0 0 0 0 178
/**
 * This is a set of zero or more NodePaths.  It's handy for returning from
 * functions that need to return multiple NodePaths (for instance,
 * NodePaths::get_children).
 */

1795 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1796 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1797 20 NodePathCollection * 0 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 1794 0 0 0 0 0 0 0 0 0 0

1798 12 InternalName 0 2048 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 514
/**
 * Encodes a string name in a hash table, mapping it to a pointer.  This is
 * used to tokenify names so they may be used efficiently in low-level Panda
 * structures, for instance to differentiate the multiple sets of texture
 * coordinates that might be stored on a Geom.
 *
 * InternalNames are hierarchical, with the '.' used by convention as a
 * separator character.  You can construct a single InternalName as a
 * composition of one or more other names, or by giving it a source string
 * directly.
 */

1799 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 1798 0 0 0 0 0 0 0 0 0 0

1800 22 GeomVertexFormat const 0 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 1801 0 0 0 0 0 0 0 0 0 0

1801 16 GeomVertexFormat 0 2048 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 0 0 0 0 0 0 0 0 0 924
/**
 * This class defines the physical layout of the vertex data stored within a
 * Geom.  The layout consists of a list of named columns, each of which has a
 * numeric type and a size.
 *
 * The columns are typically interleaved within a single array, but they may
 * also be distributed among multiple different arrays; at the extreme, each
 * column may be alone within its own array (which amounts to a parallel-array
 * definition).
 *
 * Thus, a GeomVertexFormat is really a list of GeomVertexArrayFormats, each
 * of which contains a list of columns.  However, a particular column name
 * should not appear more than once in the format, even between different
 * arrays.
 *
 * There are a handful of standard pre-defined GeomVertexFormat objects, or
 * you may define your own as needed.  You may record any combination of
 * standard and/or user-defined columns in your custom GeomVertexFormat
 * constructions.
 */

1802 24 GeomVertexFormat const * 0 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1803 23 BulletHingeConstraint * 0 8576 23 BulletHingeConstraint * 23 BulletHingeConstraint * 0 0 1601 0 0 0 0 0 0 0 0 0 0

1804 29 BulletHingeConstraint const * 0 8576 29 BulletHingeConstraint const * 29 BulletHingeConstraint const * 0 0 1805 0 0 0 0 0 0 0 0 0 0

1805 27 BulletHingeConstraint const 0 8832 27 BulletHingeConstraint const 27 BulletHingeConstraint const 0 0 1601 0 0 0 0 0 0 0 0 0 0

1806 31 BulletMinkowskiSumShape const * 0 8576 31 BulletMinkowskiSumShape const * 31 BulletMinkowskiSumShape const * 0 0 1807 0 0 0 0 0 0 0 0 0 0

1807 29 BulletMinkowskiSumShape const 0 8832 29 BulletMinkowskiSumShape const 29 BulletMinkowskiSumShape const 0 0 1602 0 0 0 0 0 0 0 0 0 0

1808 25 BulletMinkowskiSumShape * 0 8576 25 BulletMinkowskiSumShape * 25 BulletMinkowskiSumShape * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1809 30 BulletMultiSphereShape const * 0 8576 30 BulletMultiSphereShape const * 30 BulletMultiSphereShape const * 0 0 1810 0 0 0 0 0 0 0 0 0 0

1810 28 BulletMultiSphereShape const 0 8832 28 BulletMultiSphereShape const 28 BulletMultiSphereShape const 0 0 1605 0 0 0 0 0 0 0 0 0 0

1811 24 BulletMultiSphereShape * 0 8576 24 BulletMultiSphereShape * 24 BulletMultiSphereShape * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1812 20 PTA_stdfloat const * 0 8576 20 PTA_stdfloat const * 20 PTA_stdfloat const * 0 0 1813 0 0 0 0 0 0 0 0 0 0

1813 18 PTA_stdfloat const 0 8832 18 PTA_stdfloat const 18 PTA_stdfloat const 0 0 1814 0 0 0 0 0 0 0 0 0 0

1814 12 PTA_stdfloat 0 2105344 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1815 0 0 0 0 0 0 0 0 0 0

1815 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1816 0 0 0 0 0 0 0 0 0 0

1816 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1817 24 BulletPlaneShape const * 0 8576 24 BulletPlaneShape const * 24 BulletPlaneShape const * 0 0 1818 0 0 0 0 0 0 0 0 0 0

1818 22 BulletPlaneShape const 0 8832 22 BulletPlaneShape const 22 BulletPlaneShape const 0 0 1606 0 0 0 0 0 0 0 0 0 0

1819 18 BulletPlaneShape * 0 8576 18 BulletPlaneShape * 18 BulletPlaneShape * 0 0 1606 0 0 0 0 0 0 0 0 0 0

1820 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 1821 0 0 0 0 0 0 0 0 0 0

1821 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 1822 0 0 0 0 0 0 0 0 0 0

1822 14 CollisionPlane 0 2048 14 CollisionPlane 14 CollisionPlane 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1823 24 BulletSliderConstraint * 0 8576 24 BulletSliderConstraint * 24 BulletSliderConstraint * 0 0 1607 0 0 0 0 0 0 0 0 0 0

1824 30 BulletSliderConstraint const * 0 8576 30 BulletSliderConstraint const * 30 BulletSliderConstraint const * 0 0 1825 0 0 0 0 0 0 0 0 0 0

1825 28 BulletSliderConstraint const 0 8832 28 BulletSliderConstraint const 28 BulletSliderConstraint const 0 0 1607 0 0 0 0 0 0 0 0 0 0

1826 29 BulletSoftBodyControl const * 0 8576 29 BulletSoftBodyControl const * 29 BulletSoftBodyControl const * 0 0 1827 0 0 0 0 0 0 0 0 0 0

1827 27 BulletSoftBodyControl const 0 8832 27 BulletSoftBodyControl const 27 BulletSoftBodyControl const 0 0 1608 0 0 0 0 0 0 0 0 0 0

1828 10 IControl * 0 8576 30 btSoftBody::AJoint::IControl * 30 btSoftBody::AJoint::IControl * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1829 27 BulletSoftBodyShape const * 0 8576 27 BulletSoftBodyShape const * 27 BulletSoftBodyShape const * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1830 25 BulletSoftBodyShape const 0 8832 25 BulletSoftBodyShape const 25 BulletSoftBodyShape const 0 0 1612 0 0 0 0 0 0 0 0 0 0

1831 25 BulletSphereShape const * 0 8576 25 BulletSphereShape const * 25 BulletSphereShape const * 0 0 1832 0 0 0 0 0 0 0 0 0 0

1832 23 BulletSphereShape const 0 8832 23 BulletSphereShape const 23 BulletSphereShape const 0 0 1613 0 0 0 0 0 0 0 0 0 0

1833 19 BulletSphereShape * 0 8576 19 BulletSphereShape * 19 BulletSphereShape * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1834 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 1835 0 0 0 0 0 0 0 0 0 0

1835 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 1836 0 0 0 0 0 0 0 0 0 0

1836 15 CollisionSphere 0 2048 15 CollisionSphere 15 CollisionSphere 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * A spherical collision volume or object.
 */

1837 27 BulletSphericalConstraint * 0 8576 27 BulletSphericalConstraint * 27 BulletSphericalConstraint * 0 0 1614 0 0 0 0 0 0 0 0 0 0

1838 33 BulletSphericalConstraint const * 0 8576 33 BulletSphericalConstraint const * 33 BulletSphericalConstraint const * 0 0 1839 0 0 0 0 0 0 0 0 0 0

1839 31 BulletSphericalConstraint const 0 8832 31 BulletSphericalConstraint const 31 BulletSphericalConstraint const 0 0 1614 0 0 0 0 0 0 0 0 0 0

1840 8 btScalar 0 2105344 8 btScalar 8 btScalar 0 0 1841 0 0 0 0 0 0 0 0 0 0

1841 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1842 24 BulletTickCallbackData * 0 8576 24 BulletTickCallbackData * 24 BulletTickCallbackData * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1843 30 BulletTickCallbackData const * 0 8576 30 BulletTickCallbackData const * 30 BulletTickCallbackData const * 0 0 1844 0 0 0 0 0 0 0 0 0 0

1844 28 BulletTickCallbackData const 0 8832 28 BulletTickCallbackData const 28 BulletTickCallbackData const 0 0 1615 0 0 0 0 0 0 0 0 0 0

1845 20 BulletTriangleMesh * 0 8576 20 BulletTriangleMesh * 20 BulletTriangleMesh * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1846 15 PTA_int const * 0 8576 15 PTA_int const * 15 PTA_int const * 0 0 1847 0 0 0 0 0 0 0 0 0 0

1847 13 PTA_int const 0 8832 13 PTA_int const 13 PTA_int const 0 0 1727 0 0 0 0 0 0 0 0 0 0

1848 26 BulletTriangleMesh const * 0 8576 26 BulletTriangleMesh const * 26 BulletTriangleMesh const * 0 0 1849 0 0 0 0 0 0 0 0 0 0

1849 24 BulletTriangleMesh const 0 8832 24 BulletTriangleMesh const 24 BulletTriangleMesh const 0 0 1616 0 0 0 0 0 0 0 0 0 0

1850 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1851 0 0 0 0 0 0 0 0 0 0

1851 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1852 25 BulletTriangleMeshShape * 0 8576 25 BulletTriangleMeshShape * 25 BulletTriangleMeshShape * 0 0 1617 0 0 0 0 0 0 0 0 0 0

1853 31 BulletTriangleMeshShape const * 0 8576 31 BulletTriangleMeshShape const * 31 BulletTriangleMeshShape const * 0 0 1854 0 0 0 0 0 0 0 0 0 0

1854 29 BulletTriangleMeshShape const 0 8832 29 BulletTriangleMeshShape const 29 BulletTriangleMeshShape const 0 0 1617 0 0 0 0 0 0 0 0 0 0

0
297
1855 4 node 0 2 1515 767 0 0 0 0 0 18 BulletRayHit::node 0

1856 7 hit_pos 0 2 1517 768 0 0 0 0 0 21 BulletRayHit::hit_pos 0

1857 10 hit_normal 0 2 1519 769 0 0 0 0 0 24 BulletRayHit::hit_normal 0

1858 12 hit_fraction 0 2 1521 770 0 0 0 0 0 26 BulletRayHit::hit_fraction 0

1859 10 shape_part 0 2 1523 771 0 0 0 0 0 24 BulletRayHit::shape_part 0

1860 14 triangle_index 0 2 1523 772 0 0 0 0 0 28 BulletRayHit::triangle_index 0

1861 8 from_pos 0 2 1517 778 0 0 0 0 0 32 BulletAllHitsRayResult::from_pos 0

1862 6 to_pos 0 2 1517 779 0 0 0 0 0 30 BulletAllHitsRayResult::to_pos 0

1863 20 closest_hit_fraction 0 2 1521 781 0 0 0 0 0 44 BulletAllHitsRayResult::closest_hit_fraction 0

1864 4 hits 0 66 1514 783 0 0 0 0 782 28 BulletAllHitsRayResult::hits 0

1865 10 polyhedral 0 2 1529 785 0 0 0 0 0 23 BulletShape::polyhedral 0

1866 6 convex 0 2 1529 786 0 0 0 0 0 19 BulletShape::convex 0

1867 9 convex_2d 0 2 1529 787 0 0 0 0 0 22 BulletShape::convex_2d 0

1868 7 concave 0 2 1529 788 0 0 0 0 0 20 BulletShape::concave 0

1869 8 infinite 0 2 1529 789 0 0 0 0 0 21 BulletShape::infinite 0

1870 10 non_moving 0 2 1529 790 0 0 0 0 0 23 BulletShape::non_moving 0

1871 9 soft_body 0 2 1529 791 0 0 0 0 0 22 BulletShape::soft_body 0

1872 6 margin 0 6 1521 794 792 0 0 0 0 19 BulletShape::margin 0

1873 4 name 0 2 1530 793 0 0 0 0 0 17 BulletShape::name 0

1874 12 shape_bounds 0 2 1533 795 0 0 0 0 0 25 BulletShape::shape_bounds 0

1875 6 shapes 0 66 1536 802 0 0 0 0 801 22 BulletBodyNode::shapes 0

1876 9 shape_pos 0 66 1517 803 0 0 0 0 801 25 BulletBodyNode::shape_pos 0

1877 9 shape_mat 0 66 1537 804 0 0 0 0 801 25 BulletBodyNode::shape_mat 0

1878 15 shape_transform 0 66 1539 805 0 0 0 0 801 31 BulletBodyNode::shape_transform 0

1879 12 shape_bounds 0 2 1533 806 0 0 0 0 0 28 BulletBodyNode::shape_bounds 0

1880 6 static 0 6 1529 808 810 0 0 0 0 22 BulletBodyNode::static 0

1881 9 kinematic 0 6 1529 809 811 0 0 0 0 25 BulletBodyNode::kinematic 0

1882 22 collision_notification 0 6 1529 814 813 0 0 0 0 38 BulletBodyNode::collision_notification 0

1883 18 collision_response 0 6 1529 816 815 0 0 0 0 34 BulletBodyNode::collision_response 0

1884 16 contact_response 0 2 1529 818 0 0 0 0 0 32 BulletBodyNode::contact_response 0

1885 28 contact_processing_threshold 0 6 1521 819 820 0 0 0 0 44 BulletBodyNode::contact_processing_threshold 0

1886 6 active 0 6 1529 821 823 0 0 0 0 22 BulletBodyNode::active 0

1887 17 deactivation_time 0 6 1521 825 824 0 0 0 0 33 BulletBodyNode::deactivation_time 0

1888 20 deactivation_enabled 0 6 1529 827 826 0 0 0 0 36 BulletBodyNode::deactivation_enabled 0

1889 13 debug_enabled 0 6 1529 829 828 0 0 0 0 29 BulletBodyNode::debug_enabled 0

1890 11 restitution 0 6 1521 830 831 0 0 0 0 27 BulletBodyNode::restitution 0

1891 8 friction 0 6 1521 832 833 0 0 0 0 24 BulletBodyNode::friction 0

1892 20 anisotropic_friction 0 6 1540 836 835 0 0 0 0 36 BulletBodyNode::anisotropic_friction 0

1893 23 ccd_swept_sphere_radius 0 6 1521 837 839 0 0 0 0 39 BulletBodyNode::ccd_swept_sphere_radius 0

1894 20 ccd_motion_threshold 0 6 1521 838 840 0 0 0 0 36 BulletBodyNode::ccd_motion_threshold 0

1895 24 half_extents_with_margin 0 2 1540 846 0 0 0 0 0 40 BulletBoxShape::half_extents_with_margin 0

1896 27 half_extents_without_margin 0 2 1540 845 0 0 0 0 0 43 BulletBoxShape::half_extents_without_margin 0

1897 6 radius 0 2 1521 851 0 0 0 0 0 26 BulletCapsuleShape::radius 0

1898 11 half_height 0 2 1521 852 0 0 0 0 0 31 BulletCapsuleShape::half_height 0

1899 5 shape 0 2 1536 857 0 0 0 0 0 36 BulletCharacterControllerNode::shape 0

1900 7 gravity 0 6 1521 859 858 0 0 0 0 38 BulletCharacterControllerNode::gravity 0

1901 9 max_slope 0 6 1521 864 863 0 0 0 0 40 BulletCharacterControllerNode::max_slope 0

1902 9 on_ground 0 2 1529 866 0 0 0 0 0 40 BulletCharacterControllerNode::on_ground 0

1903 8 from_pos 0 2 1517 873 0 0 0 0 0 35 BulletClosestHitRayResult::from_pos 0

1904 6 to_pos 0 2 1517 874 0 0 0 0 0 33 BulletClosestHitRayResult::to_pos 0

1905 4 node 0 2 1515 876 0 0 0 0 0 31 BulletClosestHitRayResult::node 0

1906 7 hit_pos 0 2 1517 877 0 0 0 0 0 34 BulletClosestHitRayResult::hit_pos 0

1907 10 hit_normal 0 2 1519 878 0 0 0 0 0 37 BulletClosestHitRayResult::hit_normal 0

1908 12 hit_fraction 0 2 1521 879 0 0 0 0 0 39 BulletClosestHitRayResult::hit_fraction 0

1909 10 shape_part 0 2 1523 880 0 0 0 0 0 37 BulletClosestHitRayResult::shape_part 0

1910 14 triangle_index 0 2 1523 881 0 0 0 0 0 41 BulletClosestHitRayResult::triangle_index 0

1911 8 from_pos 0 2 1517 887 0 0 0 0 0 37 BulletClosestHitSweepResult::from_pos 0

1912 6 to_pos 0 2 1517 888 0 0 0 0 0 35 BulletClosestHitSweepResult::to_pos 0

1913 4 node 0 2 1515 890 0 0 0 0 0 33 BulletClosestHitSweepResult::node 0

1914 7 hit_pos 0 2 1517 891 0 0 0 0 0 36 BulletClosestHitSweepResult::hit_pos 0

1915 10 hit_normal 0 2 1519 892 0 0 0 0 0 39 BulletClosestHitSweepResult::hit_normal 0

1916 12 hit_fraction 0 2 1521 893 0 0 0 0 0 41 BulletClosestHitSweepResult::hit_fraction 0

1917 6 radius 0 2 1521 898 0 0 0 0 0 23 BulletConeShape::radius 0

1918 6 height 0 2 1521 899 0 0 0 0 0 23 BulletConeShape::height 0

1919 12 rigid_body_a 0 2 1553 901 0 0 0 0 0 30 BulletConstraint::rigid_body_a 0

1920 4 mass 0 6 1521 915 914 0 0 0 0 25 BulletRigidBodyNode::mass 0

1921 8 inv_mass 0 2 1521 916 0 0 0 0 0 29 BulletRigidBodyNode::inv_mass 0

1922 7 inertia 0 6 1519 918 917 0 0 0 0 28 BulletRigidBodyNode::inertia 0

1923 22 inv_inertia_diag_local 0 2 1519 919 0 0 0 0 0 43 BulletRigidBodyNode::inv_inertia_diag_local 0

1924 24 inv_inertia_tensor_world 0 2 1555 920 0 0 0 0 0 45 BulletRigidBodyNode::inv_inertia_tensor_world 0

1925 15 linear_velocity 0 6 1519 921 923 0 0 0 0 36 BulletRigidBodyNode::linear_velocity 0

1926 16 angular_velocity 0 6 1519 922 924 0 0 0 0 37 BulletRigidBodyNode::angular_velocity 0

1927 14 linear_damping 0 6 1521 925 927 0 0 0 0 35 BulletRigidBodyNode::linear_damping 0

1928 15 angular_damping 0 6 1521 926 928 0 0 0 0 36 BulletRigidBodyNode::angular_damping 0

1929 11 total_force 0 2 1519 936 0 0 0 0 0 32 BulletRigidBodyNode::total_force 0

1930 12 total_torque 0 2 1519 937 0 0 0 0 0 33 BulletRigidBodyNode::total_torque 0

1931 22 linear_sleep_threshold 0 6 1521 938 940 0 0 0 0 43 BulletRigidBodyNode::linear_sleep_threshold 0

1932 23 angular_sleep_threshold 0 6 1521 939 941 0 0 0 0 44 BulletRigidBodyNode::angular_sleep_threshold 0

1933 7 gravity 0 6 1519 943 942 0 0 0 0 28 BulletRigidBodyNode::gravity 0

1934 13 linear_factor 0 6 1519 944 946 0 0 0 0 34 BulletRigidBodyNode::linear_factor 0

1935 14 angular_factor 0 6 1519 945 947 0 0 0 0 35 BulletRigidBodyNode::angular_factor 0

1936 12 rigid_body_b 0 2 1553 902 0 0 0 0 0 30 BulletConstraint::rigid_body_b 0

1937 15 debug_draw_size 0 6 1521 905 904 0 0 0 0 33 BulletConstraint::debug_draw_size 0

1938 15 applied_impulse 0 2 1521 906 0 0 0 0 0 33 BulletConstraint::applied_impulse 0

1939 18 breaking_threshold 0 6 1521 908 907 0 0 0 0 36 BulletConstraint::breaking_threshold 0

1940 7 enabled 0 6 1529 910 909 0 0 0 0 25 BulletConstraint::enabled 0

1941 13 fix_threshold 0 6 1521 954 955 0 0 0 0 40 BulletConeTwistConstraint::fix_threshold 0

1942 7 frame_a 0 2 1539 962 0 0 0 0 0 34 BulletConeTwistConstraint::frame_a 0

1943 7 frame_b 0 2 1539 963 0 0 0 0 0 34 BulletConeTwistConstraint::frame_b 0

1944 9 life_time 0 2 1523 966 0 0 0 0 0 30 BulletManifoldPoint::life_time 0

1945 8 distance 0 2 1521 967 0 0 0 0 0 29 BulletManifoldPoint::distance 0

1946 15 applied_impulse 0 6 1521 968 985 0 0 0 0 36 BulletManifoldPoint::applied_impulse 0

1947 19 position_world_on_a 0 2 1517 969 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_a 0

1948 19 position_world_on_b 0 2 1517 970 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_b 0

1949 17 normal_world_on_b 0 2 1519 971 0 0 0 0 0 38 BulletManifoldPoint::normal_world_on_b 0

1950 13 local_point_a 0 2 1517 972 0 0 0 0 0 34 BulletManifoldPoint::local_point_a 0

1951 13 local_point_b 0 2 1517 973 0 0 0 0 0 34 BulletManifoldPoint::local_point_b 0

1952 8 part_id0 0 2 1523 974 0 0 0 0 0 29 BulletManifoldPoint::part_id0 0

1953 8 part_id1 0 2 1523 975 0 0 0 0 0 29 BulletManifoldPoint::part_id1 0

1954 6 index0 0 2 1523 976 0 0 0 0 0 27 BulletManifoldPoint::index0 0

1955 6 index1 0 2 1523 977 0 0 0 0 0 27 BulletManifoldPoint::index1 0

1956 28 lateral_friction_initialized 0 6 1529 990 978 0 0 0 0 49 BulletManifoldPoint::lateral_friction_initialized 0

1957 21 lateral_friction_dir1 0 6 1519 991 979 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir1 0

1958 21 lateral_friction_dir2 0 6 1519 992 980 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir2 0

1959 15 contact_motion1 0 6 1521 993 981 0 0 0 0 36 BulletManifoldPoint::contact_motion1 0

1960 15 contact_motion2 0 6 1521 994 982 0 0 0 0 36 BulletManifoldPoint::contact_motion2 0

1961 17 combined_friction 0 6 1521 995 983 0 0 0 0 38 BulletManifoldPoint::combined_friction 0

1962 20 combined_restitution 0 6 1521 996 984 0 0 0 0 41 BulletManifoldPoint::combined_restitution 0

1963 24 applied_impulse_lateral1 0 6 1521 997 986 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral1 0

1964 24 applied_impulse_lateral2 0 6 1521 998 987 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral2 0

1965 12 contact_cfm1 0 6 1521 999 988 0 0 0 0 33 BulletManifoldPoint::contact_cfm1 0

1966 12 contact_cfm2 0 6 1521 1000 989 0 0 0 0 33 BulletManifoldPoint::contact_cfm2 0

1967 8 manifold 0 2 1558 1002 0 0 0 0 0 35 BulletContactCallbackData::manifold 0

1968 5 node0 0 2 1515 1003 0 0 0 0 0 32 BulletContactCallbackData::node0 0

1969 5 node1 0 2 1515 1004 0 0 0 0 0 32 BulletContactCallbackData::node1 0

1970 8 part_id0 0 2 1523 1005 0 0 0 0 0 35 BulletContactCallbackData::part_id0 0

1971 8 part_id1 0 2 1523 1006 0 0 0 0 0 35 BulletContactCallbackData::part_id1 0

1972 6 index0 0 2 1523 1007 0 0 0 0 0 33 BulletContactCallbackData::index0 0

1973 6 index1 0 2 1523 1008 0 0 0 0 0 33 BulletContactCallbackData::index1 0

1974 14 manifold_point 0 2 1558 1010 0 0 0 0 0 29 BulletContact::manifold_point 0

1975 5 node0 0 2 1515 1011 0 0 0 0 0 20 BulletContact::node0 0

1976 5 node1 0 2 1515 1012 0 0 0 0 0 20 BulletContact::node1 0

1977 4 idx0 0 2 1523 1013 0 0 0 0 0 19 BulletContact::idx0 0

1978 4 idx1 0 2 1523 1014 0 0 0 0 0 19 BulletContact::idx1 0

1979 8 part_id0 0 2 1523 1015 0 0 0 0 0 23 BulletContact::part_id0 0

1980 8 part_id1 0 2 1523 1016 0 0 0 0 0 23 BulletContact::part_id1 0

1981 8 contacts 0 66 1561 1021 0 0 0 0 1020 29 BulletContactResult::contacts 0

1982 9 wireframe 0 6 1529 1029 1025 0 0 0 0 26 BulletDebugNode::wireframe 0

1983 11 constraints 0 6 1529 1030 1026 0 0 0 0 28 BulletDebugNode::constraints 0

1984 14 bounding_boxes 0 6 1529 1031 1027 0 0 0 0 31 BulletDebugNode::bounding_boxes 0

1985 7 normals 0 6 1529 1032 1028 0 0 0 0 24 BulletDebugNode::normals 0

1986 17 overlapping_nodes 0 66 1515 1036 0 0 0 0 1035 34 BulletGhostNode::overlapping_nodes 0

1987 3 pos 0 2 1517 1040 0 0 0 0 0 30 BulletSoftBodyNodeElement::pos 0

1988 8 velocity 0 2 1519 1041 0 0 0 0 0 35 BulletSoftBodyNodeElement::velocity 0

1989 6 normal 0 2 1519 1042 0 0 0 0 0 33 BulletSoftBodyNodeElement::normal 0

1990 8 inv_mass 0 2 1521 1043 0 0 0 0 0 35 BulletSoftBodyNodeElement::inv_mass 0

1991 4 area 0 2 1521 1044 0 0 0 0 0 31 BulletSoftBodyNodeElement::area 0

1992 8 attached 0 2 1523 1045 0 0 0 0 0 35 BulletSoftBodyNodeElement::attached 0

1993 3 cfg 0 2 1569 1047 0 0 0 0 0 23 BulletSoftBodyNode::cfg 0

1994 10 aero_model 0 6 1571 1096 1095 0 0 0 0 32 BulletSoftBodyConfig::aero_model 0

1995 28 velocities_correction_factor 0 6 1521 1121 1097 0 0 0 0 50 BulletSoftBodyConfig::velocities_correction_factor 0

1996 19 damping_coefficient 0 6 1521 1122 1098 0 0 0 0 41 BulletSoftBodyConfig::damping_coefficient 0

1997 16 drag_coefficient 0 6 1521 1123 1099 0 0 0 0 38 BulletSoftBodyConfig::drag_coefficient 0

1998 16 lift_coefficient 0 6 1521 1124 1100 0 0 0 0 38 BulletSoftBodyConfig::lift_coefficient 0

1999 20 pressure_coefficient 0 6 1521 1125 1101 0 0 0 0 42 BulletSoftBodyConfig::pressure_coefficient 0

2000 31 volume_conservation_coefficient 0 6 1521 1126 1102 0 0 0 0 53 BulletSoftBodyConfig::volume_conservation_coefficient 0

2001 28 dynamic_friction_coefficient 0 6 1521 1127 1103 0 0 0 0 50 BulletSoftBodyConfig::dynamic_friction_coefficient 0

2002 25 pose_matching_coefficient 0 6 1521 1128 1104 0 0 0 0 47 BulletSoftBodyConfig::pose_matching_coefficient 0

2003 23 rigid_contacts_hardness 0 6 1521 1129 1105 0 0 0 0 45 BulletSoftBodyConfig::rigid_contacts_hardness 0

2004 25 kinetic_contacts_hardness 0 6 1521 1130 1106 0 0 0 0 47 BulletSoftBodyConfig::kinetic_contacts_hardness 0

2005 22 soft_contacts_hardness 0 6 1521 1131 1107 0 0 0 0 44 BulletSoftBodyConfig::soft_contacts_hardness 0

2006 16 anchors_hardness 0 6 1521 1132 1108 0 0 0 0 38 BulletSoftBodyConfig::anchors_hardness 0

2007 22 soft_vs_rigid_hardness 0 6 1521 1133 1109 0 0 0 0 44 BulletSoftBodyConfig::soft_vs_rigid_hardness 0

2008 24 soft_vs_kinetic_hardness 0 6 1521 1134 1110 0 0 0 0 46 BulletSoftBodyConfig::soft_vs_kinetic_hardness 0

2009 21 soft_vs_soft_hardness 0 6 1521 1135 1111 0 0 0 0 43 BulletSoftBodyConfig::soft_vs_soft_hardness 0

2010 27 soft_vs_rigid_impulse_split 0 6 1521 1136 1112 0 0 0 0 49 BulletSoftBodyConfig::soft_vs_rigid_impulse_split 0

2011 29 soft_vs_kinetic_impulse_split 0 6 1521 1137 1113 0 0 0 0 51 BulletSoftBodyConfig::soft_vs_kinetic_impulse_split 0

2012 26 soft_vs_soft_impulse_split 0 6 1521 1138 1114 0 0 0 0 48 BulletSoftBodyConfig::soft_vs_soft_impulse_split 0

2013 9 maxvolume 0 6 1521 1139 1115 0 0 0 0 31 BulletSoftBodyConfig::maxvolume 0

2014 9 timescale 0 6 1521 1140 1116 0 0 0 0 31 BulletSoftBodyConfig::timescale 0

2015 27 positions_solver_iterations 0 6 1523 1141 1117 0 0 0 0 49 BulletSoftBodyConfig::positions_solver_iterations 0

2016 28 velocities_solver_iterations 0 6 1523 1142 1118 0 0 0 0 50 BulletSoftBodyConfig::velocities_solver_iterations 0

2017 23 drift_solver_iterations 0 6 1523 1143 1119 0 0 0 0 45 BulletSoftBodyConfig::drift_solver_iterations 0

2018 25 cluster_solver_iterations 0 6 1523 1144 1120 0 0 0 0 47 BulletSoftBodyConfig::cluster_solver_iterations 0

2019 10 world_info 0 2 1572 1048 0 0 0 0 0 30 BulletSoftBodyNode::world_info 0

2020 11 air_density 0 6 1521 1152 1147 0 0 0 0 36 BulletSoftBodyWorldInfo::air_density 0

2021 13 water_density 0 6 1521 1153 1148 0 0 0 0 38 BulletSoftBodyWorldInfo::water_density 0

2022 12 water_offset 0 6 1521 1154 1149 0 0 0 0 37 BulletSoftBodyWorldInfo::water_offset 0

2023 12 water_normal 0 6 1519 1155 1150 0 0 0 0 37 BulletSoftBodyWorldInfo::water_normal 0

2024 7 gravity 0 6 1519 1156 1151 0 0 0 0 32 BulletSoftBodyWorldInfo::gravity 0

2025 13 wind_velocity 0 6 1519 1063 1062 0 0 0 0 33 BulletSoftBodyNode::wind_velocity 0

2026 4 aabb 0 2 1573 1065 0 0 0 0 0 24 BulletSoftBodyNode::aabb 0

2027 12 num_clusters 0 2 1523 1069 0 0 0 0 0 32 BulletSoftBodyNode::num_clusters 0

2028 9 materials 0 66 1574 1081 0 0 0 0 1080 29 BulletSoftBodyNode::materials 0

2029 16 linear_stiffness 0 6 1521 1161 1162 0 0 0 0 40 BulletSoftBodyMaterial::linear_stiffness 0

2030 17 angular_stiffness 0 6 1521 1163 1164 0 0 0 0 41 BulletSoftBodyMaterial::angular_stiffness 0

2031 19 volume_preservation 0 6 1521 1165 1166 0 0 0 0 43 BulletSoftBodyMaterial::volume_preservation 0

2032 5 nodes 0 66 1567 1084 0 0 0 0 1083 25 BulletSoftBodyNode::nodes 0

2033 20 suspension_stiffness 0 6 1521 1175 1169 0 0 0 0 41 BulletVehicleTuning::suspension_stiffness 0

2034 22 suspension_compression 0 6 1521 1176 1170 0 0 0 0 43 BulletVehicleTuning::suspension_compression 0

2035 18 suspension_damping 0 6 1521 1177 1171 0 0 0 0 39 BulletVehicleTuning::suspension_damping 0

2036 24 max_suspension_travel_cm 0 6 1521 1178 1172 0 0 0 0 45 BulletVehicleTuning::max_suspension_travel_cm 0

2037 13 friction_slip 0 6 1521 1179 1173 0 0 0 0 34 BulletVehicleTuning::friction_slip 0

2038 20 max_suspension_force 0 6 1521 1180 1174 0 0 0 0 41 BulletVehicleTuning::max_suspension_force 0

2039 7 chassis 0 2 1553 1186 0 0 0 0 0 22 BulletVehicle::chassis 0

2040 21 current_speed_km_hour 0 2 1521 1187 0 0 0 0 0 36 BulletVehicle::current_speed_km_hour 0

2041 14 forward_vector 0 2 1519 1189 0 0 0 0 0 29 BulletVehicle::forward_vector 0

2042 6 wheels 0 66 1577 1194 0 0 0 0 1193 21 BulletVehicle::wheels 0

2043 12 raycast_info 0 2 1578 1244 0 0 0 0 0 25 BulletWheel::raycast_info 0

2044 10 in_contact 0 2 1529 1246 0 0 0 0 0 34 BulletWheelRaycastInfo::in_contact 0

2045 17 suspension_length 0 2 1521 1247 0 0 0 0 0 41 BulletWheelRaycastInfo::suspension_length 0

2046 17 contact_normal_ws 0 2 1519 1248 0 0 0 0 0 41 BulletWheelRaycastInfo::contact_normal_ws 0

2047 18 wheel_direction_ws 0 2 1519 1249 0 0 0 0 0 42 BulletWheelRaycastInfo::wheel_direction_ws 0

2048 13 wheel_axle_ws 0 2 1519 1250 0 0 0 0 0 37 BulletWheelRaycastInfo::wheel_axle_ws 0

2049 16 contact_point_ws 0 2 1517 1251 0 0 0 0 0 40 BulletWheelRaycastInfo::contact_point_ws 0

2050 13 hard_point_ws 0 2 1517 1252 0 0 0 0 0 37 BulletWheelRaycastInfo::hard_point_ws 0

2051 13 ground_object 0 2 1515 1253 0 0 0 0 0 37 BulletWheelRaycastInfo::ground_object 0

2052 22 suspension_rest_length 0 2 1521 1220 0 0 0 0 0 35 BulletWheel::suspension_rest_length 0

2053 20 suspension_stiffness 0 6 1521 1221 1197 0 0 0 0 33 BulletWheel::suspension_stiffness 0

2054 24 max_suspension_travel_cm 0 6 1521 1222 1198 0 0 0 0 37 BulletWheel::max_suspension_travel_cm 0

2055 13 friction_slip 0 6 1521 1223 1199 0 0 0 0 26 BulletWheel::friction_slip 0

2056 20 max_suspension_force 0 6 1521 1224 1200 0 0 0 0 33 BulletWheel::max_suspension_force 0

2057 26 wheels_damping_compression 0 6 1521 1225 1201 0 0 0 0 39 BulletWheel::wheels_damping_compression 0

2058 25 wheels_damping_relaxation 0 6 1521 1226 1202 0 0 0 0 38 BulletWheel::wheels_damping_relaxation 0

2059 14 roll_influence 0 6 1521 1227 1203 0 0 0 0 27 BulletWheel::roll_influence 0

2060 12 wheel_radius 0 6 1521 1228 1204 0 0 0 0 25 BulletWheel::wheel_radius 0

2061 8 steering 0 6 1521 1229 1205 0 0 0 0 21 BulletWheel::steering 0

2062 8 rotation 0 6 1521 1230 1206 0 0 0 0 21 BulletWheel::rotation 0

2063 14 delta_rotation 0 6 1521 1231 1207 0 0 0 0 27 BulletWheel::delta_rotation 0

2064 12 engine_force 0 6 1521 1232 1208 0 0 0 0 25 BulletWheel::engine_force 0

2065 5 brake 0 6 1521 1233 1209 0 0 0 0 18 BulletWheel::brake 0

2066 9 skid_info 0 6 1521 1234 1210 0 0 0 0 22 BulletWheel::skid_info 0

2067 23 wheels_suspension_force 0 6 1521 1235 1211 0 0 0 0 36 BulletWheel::wheels_suspension_force 0

2068 28 suspension_relative_velocity 0 6 1521 1236 1212 0 0 0 0 41 BulletWheel::suspension_relative_velocity 0

2069 31 clipped_inv_connection_point_cs 0 6 1521 1237 1213 0 0 0 0 44 BulletWheel::clipped_inv_connection_point_cs 0

2070 27 chassis_connection_point_cs 0 6 1517 1238 1214 0 0 0 0 40 BulletWheel::chassis_connection_point_cs 0

2071 18 wheel_direction_cs 0 6 1519 1239 1215 0 0 0 0 31 BulletWheel::wheel_direction_cs 0

2072 13 wheel_axle_cs 0 6 1519 1240 1216 0 0 0 0 26 BulletWheel::wheel_axle_cs 0

2073 15 world_transform 0 6 1537 1241 1217 0 0 0 0 28 BulletWheel::world_transform 0

2074 11 front_wheel 0 6 1529 1242 1218 0 0 0 0 24 BulletWheel::front_wheel 0

2075 4 node 0 6 1515 1243 1219 0 0 0 0 17 BulletWheel::node 0

2076 6 tuning 0 2 1575 1195 0 0 0 0 0 21 BulletVehicle::tuning 0

2077 7 gravity 0 6 1519 1259 1258 0 0 0 0 20 BulletWorld::gravity 0

2078 10 world_info 0 2 1572 1261 0 0 0 0 0 23 BulletWorld::world_info 0

2079 10 debug_node 0 30 1582 1264 1262 1265 1263 0 0 23 BulletWorld::debug_node 0

2080 6 ghosts 0 66 1583 1270 0 0 0 0 1269 19 BulletWorld::ghosts 0

2081 12 rigid_bodies 0 66 1553 1272 0 0 0 0 1271 25 BulletWorld::rigid_bodies 0

2082 11 soft_bodies 0 66 1584 1274 0 0 0 0 1273 24 BulletWorld::soft_bodies 0

2083 10 characters 0 66 1585 1276 0 0 0 0 1275 23 BulletWorld::characters 0

2084 8 vehicles 0 66 1586 1280 0 0 0 0 1279 21 BulletWorld::vehicles 0

2085 11 constraints 0 66 1587 1282 0 0 0 0 1281 24 BulletWorld::constraints 0

2086 9 manifolds 0 66 1588 1290 0 0 0 0 1289 22 BulletWorld::manifolds 0

2087 5 node0 0 2 1515 1300 0 0 0 0 0 31 BulletPersistentManifold::node0 0

2088 5 node1 0 2 1515 1301 0 0 0 0 0 31 BulletPersistentManifold::node1 0

2089 15 manifold_points 0 66 1590 1303 0 0 0 0 1302 41 BulletPersistentManifold::manifold_points 0

2090 26 contact_breaking_threshold 0 2 1521 1304 0 0 0 0 0 52 BulletPersistentManifold::contact_breaking_threshold 0

2091 28 contact_processing_threshold 0 2 1521 1305 0 0 0 0 0 54 BulletPersistentManifold::contact_processing_threshold 0

2092 10 num_points 0 2 1523 1326 0 0 0 0 0 39 BulletConvexPointCloudShape::num_points 0

2093 6 radius 0 2 1521 1330 0 0 0 0 0 27 BulletCylinderShape::radius 0

2094 27 half_extents_without_margin 0 2 1540 1331 0 0 0 0 0 48 BulletCylinderShape::half_extents_without_margin 0

2095 24 half_extents_with_margin 0 2 1540 1332 0 0 0 0 0 45 BulletCylinderShape::half_extents_with_margin 0

2096 6 node_0 0 2 1515 1335 0 0 0 0 0 32 BulletFilterCallbackData::node_0 0

2097 6 node_1 0 2 1515 1336 0 0 0 0 0 32 BulletFilterCallbackData::node_1 0

2098 7 collide 0 6 1529 1338 1337 0 0 0 0 33 BulletFilterCallbackData::collide 0

2099 7 limited 0 2 1529 1355 0 0 0 0 0 35 BulletRotationalLimitMotor::limited 0

2100 13 motor_enabled 0 6 1529 1356 1343 0 0 0 0 41 BulletRotationalLimitMotor::motor_enabled 0

2101 13 current_limit 0 2 1523 1357 0 0 0 0 0 41 BulletRotationalLimitMotor::current_limit 0

2102 13 current_error 0 2 1521 1358 0 0 0 0 0 41 BulletRotationalLimitMotor::current_error 0

2103 16 current_position 0 2 1521 1359 0 0 0 0 0 44 BulletRotationalLimitMotor::current_position 0

2104 19 accumulated_impulse 0 2 1521 1360 0 0 0 0 0 47 BulletRotationalLimitMotor::accumulated_impulse 0

2105 13 current_error 0 2 1519 1377 0 0 0 0 0 44 BulletTranslationalLimitMotor::current_error 0

2106 12 current_diff 0 2 1517 1378 0 0 0 0 0 43 BulletTranslationalLimitMotor::current_diff 0

2107 19 accumulated_impulse 0 2 1519 1379 0 0 0 0 0 50 BulletTranslationalLimitMotor::accumulated_impulse 0

2108 25 translational_limit_motor 0 2 1596 1387 0 0 0 0 0 50 BulletGenericConstraint::translational_limit_motor 0

2109 7 frame_a 0 2 1539 1389 0 0 0 0 0 32 BulletGenericConstraint::frame_a 0

2110 7 frame_b 0 2 1539 1390 0 0 0 0 0 32 BulletGenericConstraint::frame_b 0

2111 8 sb_index 0 2 1600 1397 0 0 0 0 0 22 BulletHelper::sb_index 0

2112 7 sb_flip 0 2 1600 1398 0 0 0 0 0 21 BulletHelper::sb_flip 0

2113 11 hinge_angle 0 2 1521 1407 0 0 0 0 0 34 BulletHingeConstraint::hinge_angle 0

2114 11 lower_limit 0 2 1521 1408 0 0 0 0 0 34 BulletHingeConstraint::lower_limit 0

2115 11 upper_limit 0 2 1521 1409 0 0 0 0 0 34 BulletHingeConstraint::upper_limit 0

2116 12 angular_only 0 6 1529 1410 1411 0 0 0 0 35 BulletHingeConstraint::angular_only 0

2117 7 frame_a 0 2 1539 1419 0 0 0 0 0 30 BulletHingeConstraint::frame_a 0

2118 7 frame_b 0 2 1539 1420 0 0 0 0 0 30 BulletHingeConstraint::frame_b 0

2119 11 transform_a 0 6 1539 1426 1424 0 0 0 0 36 BulletMinkowskiSumShape::transform_a 0

2120 11 transform_b 0 6 1539 1427 1425 0 0 0 0 36 BulletMinkowskiSumShape::transform_b 0

2121 7 shape_a 0 2 1603 1428 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_a 0

2122 7 shape_b 0 2 1603 1429 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_b 0

2123 6 margin 0 2 1521 1430 0 0 0 0 0 31 BulletMinkowskiSumShape::margin 0

2124 12 sphere_count 0 2 1523 1434 0 0 0 0 0 36 BulletMultiSphereShape::sphere_count 0

2125 10 sphere_pos 0 66 1517 1435 0 0 0 0 1434 34 BulletMultiSphereShape::sphere_pos 0

2126 13 sphere_radius 0 66 1521 1436 0 0 0 0 1434 37 BulletMultiSphereShape::sphere_radius 0

2127 12 plane_normal 0 2 1519 1440 0 0 0 0 0 30 BulletPlaneShape::plane_normal 0

2128 14 plane_constant 0 2 1521 1441 0 0 0 0 0 32 BulletPlaneShape::plane_constant 0

2129 10 linear_pos 0 2 1521 1445 0 0 0 0 0 34 BulletSliderConstraint::linear_pos 0

2130 11 angular_pos 0 2 1521 1446 0 0 0 0 0 35 BulletSliderConstraint::angular_pos 0

2131 18 lower_linear_limit 0 6 1521 1447 1451 0 0 0 0 42 BulletSliderConstraint::lower_linear_limit 0

2132 18 upper_linear_limit 0 6 1521 1448 1452 0 0 0 0 42 BulletSliderConstraint::upper_linear_limit 0

2133 19 lower_angular_limit 0 6 1521 1449 1453 0 0 0 0 43 BulletSliderConstraint::lower_angular_limit 0

2134 19 upper_angular_limit 0 6 1521 1450 1454 0 0 0 0 43 BulletSliderConstraint::upper_angular_limit 0

2135 20 powered_linear_motor 0 6 1529 1458 1455 0 0 0 0 44 BulletSliderConstraint::powered_linear_motor 0

2136 28 target_linear_motor_velocity 0 6 1521 1459 1456 0 0 0 0 52 BulletSliderConstraint::target_linear_motor_velocity 0

2137 22 max_linear_motor_force 0 6 1521 1460 1457 0 0 0 0 46 BulletSliderConstraint::max_linear_motor_force 0

2138 21 powered_angular_motor 0 6 1529 1464 1461 0 0 0 0 45 BulletSliderConstraint::powered_angular_motor 0

2139 29 target_angular_motor_velocity 0 6 1521 1465 1462 0 0 0 0 53 BulletSliderConstraint::target_angular_motor_velocity 0

2140 23 max_angular_motor_force 0 6 1521 1466 1463 0 0 0 0 47 BulletSliderConstraint::max_angular_motor_force 0

2141 7 frame_a 0 2 1539 1468 0 0 0 0 0 31 BulletSliderConstraint::frame_a 0

2142 7 frame_b 0 2 1539 1469 0 0 0 0 0 31 BulletSliderConstraint::frame_b 0

2143 4 body 0 2 1584 1479 0 0 0 0 0 25 BulletSoftBodyShape::body 0

2144 6 radius 0 2 1521 1483 0 0 0 0 0 25 BulletSphereShape::radius 0

2145 7 pivot_a 0 6 1517 1489 1487 0 0 0 0 34 BulletSphericalConstraint::pivot_a 0

2146 7 pivot_b 0 6 1517 1490 1488 0 0 0 0 34 BulletSphericalConstraint::pivot_b 0

2147 8 timestep 0 2 1521 1493 0 0 0 0 0 32 BulletTickCallbackData::timestep 0

2148 13 num_triangles 0 2 1523 1502 0 0 0 0 0 33 BulletTriangleMesh::num_triangles 0

2149 16 welding_distance 0 6 1521 1503 1500 0 0 0 0 36 BulletTriangleMesh::welding_distance 0

2150 6 static 0 2 1529 1510 0 0 0 0 0 31 BulletTriangleMeshShape::static 0

2151 7 dynamic 0 2 1529 1511 0 0 0 0 0 32 BulletTriangleMeshShape::dynamic 0

15
2152 8 get_hits 0 782 783 32 BulletAllHitsRayResult::get_hits 0

2153 10 get_shapes 0 801 802 26 BulletBodyNode::get_shapes 0

2154 12 get_contacts 0 1020 1021 33 BulletContactResult::get_contacts 0

2155 21 get_overlapping_nodes 0 1035 1036 38 BulletGhostNode::get_overlapping_nodes 0

2156 13 get_materials 0 1080 1081 33 BulletSoftBodyNode::get_materials 0

2157 9 get_nodes 0 1083 1084 29 BulletSoftBodyNode::get_nodes 0

2158 10 get_wheels 0 1193 1194 25 BulletVehicle::get_wheels 0

2159 10 get_ghosts 0 1269 1270 23 BulletWorld::get_ghosts 0

2160 16 get_rigid_bodies 0 1271 1272 29 BulletWorld::get_rigid_bodies 0

2161 15 get_soft_bodies 0 1273 1274 28 BulletWorld::get_soft_bodies 0

2162 14 get_characters 0 1275 1276 27 BulletWorld::get_characters 0

2163 12 get_vehicles 0 1279 1280 25 BulletWorld::get_vehicles 0

2164 15 get_constraints 0 1281 1282 28 BulletWorld::get_constraints 0

2165 13 get_manifolds 0 1289 1290 26 BulletWorld::get_manifolds 0

2166 19 get_manifold_points 0 1302 1303 45 BulletPersistentManifold::get_manifold_points 0

